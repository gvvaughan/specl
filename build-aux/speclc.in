#! /bin/sh
A=--[[ exec @LUA@ "$0" "$@"  # -*- mode: lua; -*- ]]A
--
-- Compile YAML Spec file to nested lua function table.
--
-- Copyright (c) 2013 Free Software Foundation, Inc.
-- Written by Gary V. Vaughan, 2013
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3, or (at your option)
-- any later version.
--
-- This program is distributed in the hope that it will be useful, but
-- WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; see the file COPYING.  If not, write to the
-- Free Software Foundation, Fifth Floor, 51 Franklin Street, Boston,
-- MA 02111-1301, USA.

-- Remove current directory from package search paths.
package.path  = ("@speclpath@;" .. package.path):gsub (
                 ";%./%?.lua;", ";"):gsub (
                 ";%./%?.lua$", "")
package.cpath = ("@speclcpath@;" .. package.cpath):gsub (
                 ";%./%?.lua;", ";"):gsub (
                 ";%./%?.lua$", "")


local std  = require "std"
local yaml = require "lyaml"

if select ("#", ...) ~= 1 then
  io.stderr:write "Usage: lua specc.lua SPEC.yaml > SPEC.lua\n"
  os.exit ()
end

local dump_specs, dump_contexts, dump_examples, dump_example


-- These strings cannot be used for an example description.
local reserved = { before = true, after = true }


-- SPECS are compiled destructively in the specs table itself.
function dump_specs (specs, indent)
  indent = indent or ""

  for _, contexts in ipairs (specs) do
    dump_contexts (contexts, indent)
  end
end


-- CONTEXTS are also compiled destructively in place.
function dump_contexts (contexts, indent)
  for description, examples in pairs (contexts) do
    print (indent .. '{["' .. description .. '"] = {')
    dump_examples (examples, "  " .. indent)
    print (indent .. "}},")
  end
end


-- Return EXAMPLES table with all of the lua fragments compiled into
-- callable functions.
function dump_examples (examples, indent)
  local _reserved = {}

  for _, example in ipairs (examples) do
    -- There is only one, otherwise we can't maintain example order.
    local description, definition = next (example)

    if reserved[description] then
      -- YAML specs store reserved words in the ordered example list,
      -- so we have to hoist them out where we can rerun them around
      -- each real example in the list, without digging through all the
      -- entries each time.
      _reserved[description] = definition
    end
  end

  if _reserved.before then
    dump_example ("before", _reserved.before, indent)
  end

  for _, example in ipairs (examples) do
    -- There is only one, otherwise we can't maintain example order.
    local description, definition = next (example)

    if reserved[description] then
      -- Already handled outside of loop.

    elseif type (definition) == "string" then
      -- Lua code.
      dump_example (description, definition, indent)

    elseif type (definition) == "table" then
      -- A nested context table.
      dump_contexts (example, indent)

    else
      -- Oh dear, most likely your nesting is not quite right!
      error ('malformed spec in "' .. tostring (description) .. '", a ' ..
             type (definition) .. " (expecting table or string)")
    end
  end

  if _reserved.after then
    dump_example ("after", _reserved.after, indent)
  end

  return compiled
end


function dump_example (description, definition, indent)
  if definition == "" then
    -- Empty definitions denote a pending example.
    definition = "pending ()"
  end

  definition = "  " .. definition:gsub (
                 "\n", "\n  " .. indent):gsub (
                 "%s*$", "")
  if reserved[description] then
    print (indent .. description .. " = function ()")
    print (indent .. definition)
    print (indent .. "end,\n")
  else
    print (indent .. '{["' .. description .. '"] = function ()')
    print (indent .. definition)
    print (indent .. "end},")
  end
end


local filename = select (1, ...)
local s, errmsg = std.slurp (filename)

local t
if s ~= nil then
  t, errmsg = yaml.load (s)
end

if errmsg ~= nil then
  io.stderr:write (errmsg .. "\n")
  os.exit (1)
end

dump_specs ({t})

os.exit (0)
