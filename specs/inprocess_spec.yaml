before:
  inprocess = require "specl.inprocess"

specify inprocess:
- before: |
    core = {
      error  = error,
      exit   = os.exit,
      output = io.output,
      print  = print,
      stderr = io.stderr,
      stdin  = io.stdin,
      stdout = io.stdout,
      type   = io.type,
      write  = io.write,
    }

    Base = require "specl.std".object {
      _type = "Main",

      _init = function (self, arg)
        if arg.execute then
          self.execute, arg.execute = arg.execute, nil
        end
        if arg.inprocess then
          self.inprocess, arg.inprocess = arg.inprocess, nil
        end
        self.arg = arg
        return self
      end,
    }

    function call (where, fn, arg, stdin)
      local Main = Base {
        inprocess = where,
        execute   = fn,
      }
      return inprocess.call (Main, arg, stdin)
    end

- it diagnoses malformed inprocess field in Main object:
    expect (inprocess.call (Base)).to_raise "table expected, found nil"
    expect (inprocess.call (Base {inprocess = "{}"})).
      to_raise "table expected, found string"

- it propagates arguments to Main object:
    function execute (self)
      io.write (table.concat (self.arg or {}, " "))
    end
    expect (call (_G, execute, {"arg1", "arg2"})).to_succeed_with "arg1 arg2"


- describe capture:
  - before:
      capture = inprocess.capture

  - it propagates results:
      t = capture (function (...) return unpack {...} end, {"one", 2})
      expect ({t[1], t[2]}).to_equal {"one", 2}
  - it propagates arguments:
      expect (capture (function (...) print (...) end, {"one", 2})).
        to_output "one\t2\n"

  - context when matching normally:
    - it matches standard output:
        expect (capture (function () io.write "hello" end)).
          to_output "hello"
    - it matches standard error:
        expect (capture (function () io.stderr:write "oh noes" end)).
          to_output_error "oh noes"
    - it isolates standard input:
        input = "input string"
        expect (capture (function () io.write (io.stdin:read "*a") end,
                         nil, input)).to_output (input)
    - it unwraps functables:
        functable = setmetatable ({}, {__call = function (self) io.write "hello" end })
        expect (capture (functable)).to_output "hello"

  - context when matching with not_ prefix:
    - it matches no standard output:
        expect (capture (function () io.stderr:write "hello" end)).
          not_to_output "hello"
    - it matches no standard error:
        expect (capture (function () io.write "oh noes" end)).
          not_to_output_error "oh noes"
    - it isolates standard input:
        input = "input string"
        expect (capture (function () io.stderr:write (io.stdin:read "*a") end,
                         nil, input)).not_to_output (input)
    - it unwraps functables:
        functable = setmetatable ({}, {__call = function (self) io.stderr:write "hello" end })
        expect (capture (functable)).not_to_output "hello"

- describe error:
  - before:
      execute = function () return error "he deed" end
  - it captures raised errors: |
      expect (call (_G, execute)).not_to_succeed ()
      expect (call (_G, execute)).to_match_error "he deed\nstack traceback:\n"
  - it restores core error function on completion:
      expect (call (_G, execute)).not_to_succeed ()
      expect (error).to_be (core.error)

- describe exit:
  - context with normal exit:
    - it captures exit status:
        expect (call (_G, function () os.exit (true) end)).to_exit (0)
        expect (call (_G, function () os.exit (0) end)).to_exit (0)
    - it does not pollute output streams:
        expect (call (_G, function () os.exit (0) end)).to_output (nil)
        expect (call (_G, function () os.exit (0) end)).to_output_error (nil)
    - it reports normal exit for fall-through:
        expect (call (_G, function () end)).to_exit (0)
  - context with abnormal exit:
    - it captures exit status:
        expect (call (_G, function () os.exit (false) end)).to_exit (1)
        expect (call (_G, function () os.exit (77) end)).to_exit (77)
    - it does not pollute output streams:
        expect (call (_G, function () os.exit (false) end)).to_output (nil)
        expect (call (_G, function () os.exit (false) end)).to_output_error (nil)
  - it restores core exit function on completion:
      expect (call (_G, function () os.exit (0) end)).to_exit (0)
      expect (os.exit).to_be (core.exit)

- describe write:
  - it captures output:
      expect (call (_G, function () io.write "hello" end)).to_output "hello"
  - it restores core write function on completion:
      expect (call (_G, function () io.write "" end)).to_output ""
      expect (io.write).to_be (core.write)

- describe print:
  - it captures printed string:
      expect (call (_G, function () print "hello" end)).to_output "hello\n"
  - it captures printed objects: |
      expect (call (_G, function () print (1, {"", 2}, true) end)).
        to_match_output "1\ttable: 0x%x+\ttrue\n"
  - it restores core print function on completion:
      expect (call (_G, function () print "" end)).to_output "\n"
      expect (print).to_be (core.print)


- describe StrFile:
  - it displays as an annotated hex address:
      expect (call (_G, function () print (io.stdout) end)).
        to_match_output "strfile %(0x%x+/%a%)"
  - it has a stable display address:
      function execute ()
        print (tostring (io.stdout) == tostring (io.stdout))
      end
      expect (call (_G, execute)).to_output "true\n"
  - it has a unique display address per stream:
      stdout = call (_G, function () print (io.stdout) end)
      stderr = call (_G, function () print (io.stderr) end)
      expect (stdout).not_to_be (stderr)


- describe output:
  - it displays as an annotated hex address:
      expect (call (_G, function () print (io.output ()) end)).
        to_match_output "strfile %(0x%x+/%a%)"
  - it accepts a StrFile argument:
      function execute ()
        io.output (io.stderr)
        io.write "errout"
      end
      expect (call (_G, execute)).to_output_error "errout"
  - it accepts a filename argument:
      function execute ()
        local name = os.tmpname ()
        io.output (name)
        io.write "fileout"
        io.output (io.stdout)

        local r = io.open (name)
        io.write (r:read "*a")
        r:close ()
        os.remove (name)
      end
      expect (call (_G, execute)).to_output "fileout"
  - it accepts a file descriptor argument:
      function execute ()
        local name = os.tmpname ()
        local w = io.open (name, "w")
        io.output (h)
        io.write "fdout"
        w:close ()
        io.output (io.stdout)

        local r = io.open (name)
        io.write (r:read "*a")
        r:close ()
        os.remove (name)
      end
      expect (call (_G, execute)).to_output "fdout"
  - it restores core output function on completion:
      expect (call (_G, function () print (io.output ()) end)).
        to_match_output "strfile %(0x%x+/%a%)"
      expect (io.output).to_be (core.output)


- describe stdout:
  - context with close:
    - it diagnoses failure:
        expect (call (_G, function () print (io.stdout:close ()) end)).
          to_output "nil\tcannot close standard virtual file\n"

  - context with flush:
    - it intercepts method:
        expect (call (_G, function () print (io.stdout:flush ()) end)).
          to_output "\n"

  - context with lines:
    - it returns a function: |
        expect (call (_G, function () print (io.stdout:lines ()) end)).
          to_match_output "function: 0x%x+"
    - it diagnoses failure:
        function execute ()
          local iter = io.stdout:lines ()
          print (iter ())
        end
        expect (call (_G, execute)).
          to_output "nil\tBad virtual file descriptor\t9\n"

  - context with read:
    - it diagnoses failure:
        expect (call (_G, function () print (io.stdout:read ()) end)).
          to_output "nil\tBad virtual file descriptor\t9\n"
        expect (call (_G, function () print (io.stdout:read "*a") end)).
          to_output "nil\tBad virtual file descriptor\t9\n"
        expect (call (_G, function () print (io.stdout:read "not a mode") end)).
          to_output "nil\tBad virtual file descriptor\t9\n"

  # This specifies our idealised logical behaviour, but actually differs
  # (necessarily) from seeking on the real standard output.
  - context with seek:
    - it reports the output position:
        function execute () io.write (io.stdout:seek ()) end
        expect (call (_G, execute)).to_output "0"
    - it updates the output position:
        function execute ()
          for i = 1,8 do io.write (io.stdout:seek ("cur", 0)) end
        end
        expect (call (_G, execute)).to_output "01234567"
    - it defaults offset to zero:
        function execute ()
          for i = 1,8 do io.write (io.stdout:seek ("cur")) end
        end
        expect (call (_G, execute)).to_output "01234567"
    - it defaults whence to current position:
        function execute ()
          for i = 1,8 do io.write (io.stdout:seek ()) end
        end
        expect (call (_G, execute)).to_output "01234567"
    - it accepts position relative offsets:
        function execute ()
          io.stdout:seek ("set", 100)
          io.write (io.stdout:seek ())
          io.write (io.stdout:seek ())
        end
        expect (call (_G, execute)).to_output "1003"
    - it accepts end relative offsets:
        function execute ()
          for i = 1,8 do io.write (io.stdout:seek ()) end
          io.stdout:seek ("end", -3)
          io.write (io.stdout:seek ())
          io.write (io.stdout:seek ())
        end
        expect (call (_G, execute)).to_output "0123456759"

  - context with setvbuf:
    - it accepts no buffering argument:
        expect (call (_G, function () io.stdout:setvbuf "no" end)).to_succeed ()
    - it accepts full buffering arguments:
        expect (call (_G, function () io.stdout:setvbuf "full" end)).to_succeed ()
        expect (call (_G, function () io.stdout:setvbuf ("full", 1000) end)).
          to_succeed ()
    - it accepts line buffering arguments:
        expect (call (_G, function () io.stdout:setvbuf "line" end)).to_succeed ()
        expect (call (_G, function () io.stdout:setvbuf ("line", 1000) end)).
          to_succeed ()

  - context with write:
    - it appends to stream:
        expect (call (_G, function () io.stdout:write "foo" end)).to_output "foo"

  - it restores core stdout stream on completion:
      expect (call (_G, function () io.stdout:write "" end)).to_output ""
      expect (io.stdout).should_be (core.stdout)

- describe stderr:
  - context with close:
    - it diagnoses failure:
        expect (call (_G, function () print (io.stderr:close ()) end)).
          to_output "nil\tcannot close standard virtual file\n"

  - context with flush:
    - it intercepts method:
        expect (call (_G, function () print (io.stderr:flush ()) end)).
          to_output "\n"

  - context with lines:
    - it returns a function: |
        expect (call (_G, function () print (io.stderr:lines ()) end)).
          to_match_output "function: 0x%x+"
    - it diagnoses failure:
        function execute ()
          local iter = io.stderr:lines ()
          print (iter ())
        end
        expect (call (_G, execute)).
          to_output "nil\tBad virtual file descriptor\t9\n"

  - context with read:
    - it diagnoses failure:
        expect (call (_G, function () print (io.stderr:read "*a") end)).
          to_output "nil\tBad virtual file descriptor\t9\n"
        expect (call (_G, function () print (io.stderr:read "not a mode") end)).
          to_output "nil\tBad virtual file descriptor\t9\n"

  # This specifies our idealised logical behaviour, but actually differs
  # (necessarily) from seeking on the real standard error.
  - context with seek:
    - it reports the output position:
        function execute () io.stderr:write (io.stderr:seek ()) end
        expect (call (_G, execute)).to_output_error "0"
    - it updates the output position:
        function execute ()
          for i = 1,8 do io.stderr:write (io.stderr:seek ("cur", 0)) end
        end
        expect (call (_G, execute)).to_output_error "01234567"
    - it defaults offset to zero:
        function execute ()
          for i = 1,8 do io.stderr:write (io.stderr:seek ("cur")) end
        end
        expect (call (_G, execute)).to_output_error "01234567"
    - it defaults whence to current position:
        function execute ()
          for i = 1,8 do io.stderr:write (io.stderr:seek ()) end
        end
        expect (call (_G, execute)).to_output_error "01234567"
    - it accepts position relative offsets:
        function execute ()
          io.stderr:seek ("set", 100)
          io.stderr:write (io.stderr:seek ())
          io.stderr:write (io.stderr:seek ())
        end
        expect (call (_G, execute)).to_output_error "1003"
    - it accepts end relative offsets:
        function execute ()
          for i = 1,8 do io.stderr:write (io.stderr:seek ()) end
          io.stderr:seek ("end", -3)
          io.stderr:write (io.stderr:seek ())
          io.stderr:write (io.stderr:seek ())
        end
        expect (call (_G, execute)).to_output_error "0123456759"

  - context with setvbuf:
    - it accepts no buffering argument:
        expect (call (_G, function () io.stderr:setvbuf "no" end)).to_succeed ()
    - it accepts full buffering arguments:
        expect (call (_G, function () io.stderr:setvbuf "full" end)).to_succeed ()
        expect (call (_G, function () io.stderr:setvbuf ("full", 1000) end)).
          to_succeed ()
    - it accepts line buffering arguments:
        expect (call (_G, function () io.stderr:setvbuf "line" end)).to_succeed ()
        expect (call (_G, function () io.stderr:setvbuf ("line", 1000) end)).
          to_succeed ()

  - context with write:
    - it appends to stream:
        expect (call (_G, function () io.stderr:write "foo" end)).
          to_output_error "foo"

  - it restores core stderr stream on completion:
      expect (call (_G, function () io.stderr:write "" end)).to_output_error ""
      expect (io.stderr).should_be (core.stderr)


- describe stdin:
  - context with close:
    - it diagnoses failure:
        expect (call (_G, function () print (io.stdin:close ()) end)).
          to_output "nil\tcannot close standard virtual file\n"

  - context with flush:
    - it intercepts method:
        expect (call (_G, function () print (io.stdin:flush ()) end)).
          to_output "\n"

  - context with lines:
    - it diagnoses a bad argument:
        function execute ()
          local fn = io.stdin:lines "not a real mode"
          print (fn ())
        end
        expect (call (_G, execute)).to_contain_error "bad argument"
    - context with no argument:
      - it returns a function: |
          expect (call (_G, function () print (io.stdout:lines ()) end)).
            to_match_output "function: 0x%x+"
      - it iterates over lines:
          function execute ()
            local n = 0
            for l in io.stdin:lines () do
              n = n + 1
              print (n, l)
            end
          end
          expect (call (_G, execute, {}, "one\ntwo\nthree")).
            to_output "1\tone\n2\ttwo\n3\tthree\n"
    - context with *n argument:
      - it returns a function: |
          expect (call (_G, function () print (io.stdout:lines ()) end)).
            to_match_output "function: 0x%x+"
      - it iterates over numbers:
          function execute ()
            local n = 0
            for l in io.stdin:lines "*n" do
              n = n + 1
              if l == math.floor (l) then l = math.floor (l) end
              print (n, l)
            end
          end
          expect (call (_G, execute, {}, "10\n 2.022\t0x30\t4.5e6")).
            to_output "1\t10\n2\t2.022\n3\t48\n4\t4500000\n"
    - context with *a argument:
      - it returns a function: |
          expect (call (_G, function () print (io.stdout:lines ()) end)).
            to_match_output "function: 0x%x+"
      - it returns everything:
          function execute ()
            local fn = io.stdin:lines "*a"
            print (1, fn ())
          end
          expect (call (_G, execute, {}, "one\ntwo\nthree")).
            to_output "1\tone\ntwo\nthree\n"
    - context with *l argument:
      - it returns a function: |
          expect (call (_G, function () print (io.stdout:lines ()) end)).
            to_match_output "function: 0x%x+"
      - it iterates over lines stripping EOL:
          function execute ()
            local n = 0
            for l in io.stdin:lines "*l" do
              n = n + 1
              print (n, l)
            end
          end
          expect (call (_G, execute, {}, "one\ntwo\nthree")).
            to_output "1\tone\n2\ttwo\n3\tthree\n"
    - context with *L argument:
      - it returns a function: |
          expect (call (_G, function () print (io.stdout:lines ()) end)).
            to_match_output "function: 0x%x+"
      - it iterates over lines retaining EOL:
          function execute ()
            local n = 0
            for l in io.stdin:lines "*L" do
              n = n + 1
              print (n, l)
            end
          end
          expect (call (_G, execute, {}, "one\ntwo\nthree")).
            to_output "1\tone\n\n2\ttwo\n\n3\tthree\n"
    - context with numeric argument:
      - it returns a function: |
          expect (call (_G, function () print (io.stdout:lines ()) end)).
            to_match_output "function: 0x%x+"
      - it iterates over byte chunks:
          function execute ()
            local n = 0
            for l in io.stdin:lines (2) do
              n = n + 1
              print (n, l)
            end
          end
          expect (call (_G, execute, {}, "one\n2")).
            to_output "1\ton\n2\te\n\n3\t2\n"


  - context with read:
    - context using '*a':
      - it reads all input:
          subject = "a few\nlines\nof random\n   text\n"
          expect (call (_G, function () io.stdout:write (io.stdin:read "*a") end, {}, subject)).
            to_output (subject)
      - it returns "" at end of file:
          function execute ()
            local discard = io.stdin:read "*a"
            local eof = io.stdin:read "*a"
            print (type (eof), eof)
          end
          expect (call (_G, execute, {}, "")).to_output "string\t\n"
    - context using '*n':
      - before:
          function execute ()
            local n = io.stdin:read "*n"
            print (type (n), n)
          end
      - it reads a decimal number:
          expect (call (_G, execute, {}, "01234")).to_output "number\t1234\n"
      - it returns nil at end of file:
          expect (call (_G, execute, {}, "")).to_output "nil\tnil\n"
    - context passing multiple formats:
      - it returns multiple results:
          subject = "a string with\n3 lines\nin total"
          function execute ()
            print (io.stdin:read ("*l", "*n", "*L", 1, 3, "*a"))
          end
          expect (call (_G, execute, {}, subject)).
            to_output "a string with\t3\t lines\n\ti\tn t\total\n"

  # This specifies our idealised logical behaviour, but actually differs
  # (necessarily) from seeking on the real standard input.
  - context with seek:
    - it reports the output position:
        function execute () io.write (io.stdin:seek ()) end
        expect (call (_G, execute)).to_output "0"
    - it updates the output position:
        function execute ()
          for i = 1,8 do
            io.write (io.stdin:seek ("cur", 0))
            io.stdin:read (1)
          end
        end
        expect (call (_G, execute, {}, "abcdefgh")).to_output "01234567"
    - it defaults offset to zero:
        function execute ()
          for i = 1,8 do
            io.write (io.stdin:seek ("cur"))
            io.stdin:read (1)
          end
        end
        expect (call (_G, execute, {}, "abcdefgh")).to_output "01234567"
    - it defaults whence to current position:
        function execute ()
          for i = 1,8 do
            io.write (io.stdin:seek ())
            io.stdin:read (1)
          end
        end
        expect (call (_G, execute, {}, "abcdefgh")).to_output "01234567"
    - it accepts position relative offsets:
        function execute ()
          io.stdin:seek ("set", 3)
          io.write (io.stdin:seek ())
          io.write (io.stdin:read (2))
          io.write (io.stdin:seek ())
          io.write (io.stdin:read (1))
        end
        expect (call (_G, execute, {}, "abcdefgh")).to_output "3de5f"
    - it accepts end relative offsets:
        function execute ()
          io.stdin:seek ("end", -5)
          io.write (io.stdin:seek ())
          io.write (io.stdin:read (2))
          io.write (io.stdin:seek ())
          io.write (io.stdin:read (1))
        end
        expect (call (_G, execute, {}, "abcdefgh")).to_output "3de5f"

  - context with setvbuf:
    - it accepts no buffering argument:
        expect (call (_G, function () io.stdin:setvbuf "no" end)).to_succeed ()
    - it accepts full buffering arguments:
        expect (call (_G, function () io.stdin:setvbuf "full" end)).to_succeed ()
        expect (call (_G, function () io.stdin:setvbuf ("full", 1000) end)).
          to_succeed ()
    - it accepts line buffering arguments:
        expect (call (_G, function () io.stdin:setvbuf "line" end)).to_succeed ()
        expect (call (_G, function () io.stdin:setvbuf ("line", 1000) end)).
          to_succeed ()

  - context with write:
    - it diagnoses failure:
        expect (call (_G, function () print (io.stdin:write "fail") end)).
          to_output "nil\tBad virtual file descriptor\t9\n"

  - it restores core stdin stream on completion:
      function execute ()
        print (io.stdin:read (1))
      end
      expect (call (_G, execute, {}, "c")).to_output "c\n"
      expect (io.stdin).should_be (core.stdin)


- describe type:
  - it identifies virtual streams:
      expect (call (_G, function () io.write (io.type (io.stdin)) end)).
        to_output "file"
      expect (call (_G, function () io.write (io.type (io.stdout)) end)).
        to_output "file"
      expect (call (_G, function () io.write (io.type (io.stderr)) end)).
        to_output "file"
  - it identifies file descriptors:
      function execute ()
        local name = os.tmpname ()
        local r = io.open (name)
        io.write (io.type (r))
        r:close ()
        os.remove (name)
      end
      expect (call (_G, execute)).to_output "file"
  - it identifies closed file descriptors:
      function execute ()
        local name = os.tmpname ()
        local r = io.open (name)
        r:close ()
        os.remove (name)
        io.write (io.type (r))
      end
      expect (call (_G, execute)).to_output "closed file"
  - it returns nil for non-descriptors:
      expect (call (_G, function () print (io.type (nil)) end)).to_output "nil\n"
      expect (call (_G, function () print (io.type (true)) end)).to_output "nil\n"
      expect (call (_G, function () print (io.type (42)) end)).to_output "nil\n"
      expect (call (_G, function () print (io.type "str") end)).to_output "nil\n"
      expect (call (_G, function () print (io.type {}) end)).to_output "nil\n"
      expect (call (_G, function () print (io.type (io.type)) end)).to_output "nil\n"
  - it restores core type function on completion:
      expect (call (_G, function () print (io.type (nil)) end)).to_output "nil\n"
      expect (io.type).should_be (core.type)
