describe formatters:
- before: |
    function run_spec (yaml, arg)
      path = arg:gsub ("/[^/]*$", "", 1)
      name = arg:gsub (".*/", "")
      return specl.cmdpipe ("printf '" .. yaml .. "'| env " ..
        "LUA_PATH='" .. path .. "/?;;' specl/specl --color=no -f" .. name)
    end

- context when using a custom formatter:
  - before: |
      -- Spec-file to feed to the formatter.
      yaml = "dummy:\n" ..
             "- 1:\n" ..
             "    expect (1).should_be (0)\n" ..
             "    expect (0).should_not_be (0)\n" ..
             "- 2:\n" ..
             "- 3:\n"

  - context with an accumulator:
    - before: |
        tmpfile = os.tmpname ()

        -- Write a custom formatter to a temporary file, with overrides from T.
        function formatter (t)
          local f = io.open (tmpfile, "w")
          f:write "local util = require 'specl.util'\n"
          f:write "return {\n"
          for _, k in ipairs {"header", "spec", "expectations", "footer"} do
            local fn = "function (_, a) print (util.tostring (a)) end"
            if t[k] then
              fn = t[k]
            elseif k ~= "footer" then
              fn = "util.nop"
            end
            f:write ("  " .. k .. " = " .. fn  .. ",\n")
          end
          f:write "}\n"
          f:close ()
          return tmpfile
        end

    - after:
        os.remove (tmpfile)

    - it will collect spec return strings:
        fmt = formatter {
          spec = "function (t) return t[#t] end",
        }
        expect (run_spec (yaml, fmt).output).should_contain "dummy\n"
    - it will collect expectations return strings: |
        fmt = formatter {
          expectations = "function (_, t) return t[#t] end",
        }
        expect (run_spec (yaml, fmt).output).should_contain "123\n"

    - it will collect spec return table keys:
        fmt = formatter { spec =
          "function (t) return {[1] = table.concat (t, '>'), [2] = t[#t]} end",
        }
        expect (run_spec (yaml, fmt).output).
          should_contain "{1=dummy,2=dummy}"
    - it will collect expectations return table keys:
        formatter { expectations =
          "function (_, t)\n" ..
          "  return { [1] = table.concat (t, '>') .. ';', [2] = t[#t] }\n" ..
          "end",
        }
        expect (run_spec (yaml, tmpfile).output).
          should_contain "{1=dummy>1;dummy>2;dummy>3;,2=123}"
