describe report:
- before:
    preamble = "describe report:\n- it is pending:"


- context with empty example:
  - before:
      argt = {"-freport", stdin = preamble}
  - it exits with zero status: |
      expect (run_spec (argt)).to_exit (0)
  - it reports no expectations:
      expect (run_spec (argt)).to_contain_output "No expectations met."
  - it reports a pending example:
      expect (run_spec (argt)).to_contain_output ", 1 pending "


- context with pending call from empty example:
  - before:
      yaml = preamble .. "\n    pending ()"

  - context in non-verbose mode:
    - before:
        argt = {"-freport", stdin = yaml}
    - it exits with zero status:
        expect (run_spec (argt)).to_exit (0)
    - it reports no expectations:
        expect (run_spec (argt)).to_contain_output "No expectations met."
    - it reports the pending example:
        expect (run_spec (argt)).to_match_output ", 1 pending "
    - it appends pending suffix to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is pending %(PENDING example: not yet implemented%)\n"
        )
    - it lists pending example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of pending expectations:\n" ..
          "%- report is pending: %(PENDING example: not yet implemented%)\n"
        )

  - context in verbose mode:
    - before:
        argt = {"-freport", "-v", stdin = yaml}
    - it exits with zero status:
        expect (run_spec (argt)).to_exit (0)
    - it reports no expectations:
        expect (run_spec (argt)).to_contain_output "No expectations met."
    - it reports the pending example:
        expect (run_spec (argt)).to_match_output ", 1 pending "
    - it appends pending suffix to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is pending %(PENDING example: not yet implemented%)\n"
        )
    - it lists pending example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of pending expectations:\n" ..
          "%- report is pending: %(PENDING example: not yet implemented%)\n"
        )


- context with pending argument from empty example:
  - before:
      yaml = preamble .. "\n    pending 'see issue 123'"

  - context in non-verbose mode:
    - before:
        argt = {"-freport", stdin = yaml}
    - it exits with zero status:
        expect (run_spec (argt)).to_exit (0)
    - it reports no expectations:
        expect (run_spec (argt)).to_contain_output "No expectations met."
    - it reports the pending example:
        expect (run_spec (argt)).to_match_output ", 1 pending "
    - it appends pending suffix to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is pending %(PENDING example: see issue 123%)\n"
        )
    - it lists pending example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of pending expectations:\n" ..
          "%- report is pending: %(PENDING example: see issue 123%)\n"
        )

  - context in verbose mode:
    - before:
        argt = {"-freport", "-v", stdin = yaml}
    - it exits with zero status:
        expect (run_spec (argt)).to_exit (0)
    - it reports no expectations:
        expect (run_spec (argt)).to_contain_output "No expectations met."
    - it reports the pending example:
        expect (run_spec (argt)).to_match_output ", 1 pending "
    - it appends pending suffix to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is pending %(PENDING example: see issue 123%)\n"
        )
    - it lists pending example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of pending expectations:\n" ..
          "%- report is pending: %(PENDING example: see issue 123%)\n"
        )


- context with pending argument before expectation:
  - before:
      yaml = preamble .. "\n" ..
             "    pending 'see issue 123'\n" ..
             "    expect (1).to_be (0)\n"

  - context in non-verbose mode:
    - before:
        argt = {"-freport", stdin = yaml}
    - it exits with zero status:
        expect (run_spec (argt)).to_exit (0)
    - it reports no expectations:
        expect (run_spec (argt)).to_contain_output "No expectations met."
    - it reports the pending example:
        expect (run_spec (argt)).to_match_output ", 1 pending "
    - it appends pending suffix to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is pending %(1 pending%)\n"
        )
    - it lists pending example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of pending expectations:\n" ..
          "%- report is pending:\n" ..
          "  PENDING expectation 1: see issue 123\n"
        )

  - context in verbose mode:
    - before:
        argt = {"-freport", "-v", stdin = yaml}
    - it exits with zero status:
        expect (run_spec (argt)).to_exit (0)
    - it reports no expectations:
        expect (run_spec (argt)).to_contain_output "No expectations met."
    - it reports the pending example:
        expect (run_spec (argt)).to_match_output ", 1 pending "
    - it appends pending summary to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is pending\n" ..
          "    %-:3:1: PENDING expectation 1: see issue 123\n"
        )
    - it lists pending example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of pending expectations:\n" ..
          "%- report is pending:\n" ..
          "  %-:3:1: PENDING expectation 1: see issue 123\n"
        )


- context with passing expectation:
  - before: |
      yaml = "describe report:\n" ..
             "- it is passing:\n" ..
             "    expect (1).to_be (1)\n"
      argt = {"-freport", stdin = yaml}

  - it exits with zero status:
      expect (run_spec (argt)).to_exit (0)
  - it reports 100% expectations met:
      expect (run_spec (argt)).
        to_contain_output "Met 100.00% of 1 expectations."
  - it reports the passing example:
      expect (run_spec (argt)).to_match_output "\n1 passed,"


- context with passing 'examples' expectation:
  - before: |
      yaml = "describe report:\n" ..
             "  examples {['it is passing'] = function ()\n" ..
             "    expect (1).to_be (1)\n" ..
             "  end}\n"
      argt   = {"-freport", stdin = yaml}

  - it exits with zero status:
      expect (run_spec (argt)).to_exit (0)
  - it reports the 'it' description:
      expect (run_spec (argt)).to_contain_output "is passing"
  - it reports 100% expectations met:
      expect (run_spec (argt)).
        to_contain_output "Met 100.00% of 1 expectations."
  - it reports the passing example:
      expect (run_spec (argt)).to_match_output "\n1 passed,"


- context with failing expectation:
  - before: |
      yaml = "describe report:\n" ..
             "- it is failing:\n" ..
             "    expect (1).to_be (0)\n"

  - context in non-verbose mode:
    - before:
        argt = {"-freport", stdin = yaml}
    - it exits with non-zero status:
        expect (run_spec (argt)).not_to_exit (0)
    - it reports 0% expectations met:
        expect (run_spec (argt)).
          to_contain_output "Met 0.00% of 1 expectations."
    - it reports the failing example:
        expect (run_spec (argt)).to_match_output " 1 failed "
    - it appends failing suffix to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is failing %(1 failing%)\n"
        )
    - it lists failing example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of failed expectations:\n" ..
          "%- report is failing:\n" ..
          "  FAILED expectation 1: expecting exactly 0, but got 1\n"
        )

  - context in verbose mode:
    - before:
        argt = {"-freport", "-v", stdin = yaml}
    - it exits with non-zero status:
        expect (run_spec (argt)).not_to_exit (0)
    - it reports 0% expectations met:
        expect (run_spec (argt)).
          to_contain_output "Met 0.00% of 1 expectations."
    - it reports the failing example:
        expect (run_spec (argt)).to_match_output " 1 failed "
    - it appends failing summary to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is failing\n" ..
          "    %-:3:1: FAILED expectation 1:\n" ..
          "    expecting exactly 0, but got 1\n"
        )
    - it lists failing example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of failed expectations:\n" ..
          "%- report is failing:\n" ..
          "  %-:3:1: FAILED expectation 1:\n" ..
          "  expecting exactly 0, but got 1\n"
        )


- context with failing 'examples' expectation:
  - before: |
      yaml = "describe report:\n" ..
             "  examples {['it is failing'] = function ()\n" ..
             "    expect (1).to_be (0)\n" ..
             "  end}\n"

  - context in non-verbose mode:
    - before:
        argt = {"-freport", stdin = yaml}
    - it exits with non-zero status:
        expect (run_spec (argt)).not_to_exit (0)
    - it reports 0% expectations met:
        expect (run_spec (argt)).
          to_contain_output "Met 0.00% of 1 expectations."
    - it reports the failing example:
        expect (run_spec (argt)).to_match_output " 1 failed "
    - it appends failing suffix to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is failing %(1 failing%)\n"
        )
    - it lists failing example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of failed expectations:\n" ..
          "%- report is failing:\n" ..
          "  FAILED expectation 1: expecting exactly 0, but got 1\n"
        )

  - context in verbose mode:
    - before:
        argt = {"-freport", "-v", stdin = yaml}
    - it exits with non-zero status:
        expect (run_spec (argt)).not_to_exit (0)
    - it reports 0% expectations met:
        expect (run_spec (argt)).
          to_contain_output "Met 0.00% of 1 expectations."
    - it reports the failing example:
        expect (run_spec (argt)).to_match_output " 1 failed "
    - it appends failing summary to the example output: |
        expect (run_spec (argt)).to_match_output (
          "report\n" ..
          "  is failing\n" ..
          "    %-:2:1: FAILED expectation 1:\n" ..
          "    expecting exactly 0, but got 1\n"
        )
    - it lists failing example in report summary: |
        expect (run_spec (argt)).to_match_output (
          "Summary of failed expectations:\n" ..
          "%- report is failing:\n" ..
          "  %-:2:1: FAILED expectation 1:\n" ..
          "  expecting exactly 0, but got 1\n"
        )


- context when filtered:
  - before: |
      function specl (args)
        return run_spec {
          "-freport", args,
          stdin = "specify specl:\n" ..
                  "- describe option one:\n" ..
                  "  - context group one:\n" ..
                  "    - it passes:\n" ..
                  "        expect (1).to_be (1)\n" .. -- line 5
                  "    - it hasn't decided yet:\n" ..
                  "        pending ()\n" ..           -- line 7
                  "        expect (1).to_be (0)\n" ..
                  "  - context group two:\n" ..
                  "    - it fails:\n" ..
                  "        expect (1).to_be (0)\n" .. -- line 11
                  "- describe option two:\n" ..
                  "  - context group three:\n" ..
                  "    - it passes again:\n" ..
                  "        expect (1).to_be (1)\n" .. -- line 15
                  "    - it still hasn't decided:\n" ..
                  "  - context group four:\n" ..
                  "    - it fails again:\n" ..
                  "        expect (1).to_be (0)\n"    -- line 19
        }
      end

  - it displays contexts for filtered examples:
      expect (specl "+11").to_match_output "specl%s+option one%s+group two%s+fails"
      expect (specl "+15").to_match_output "specl%s+option two%s+group three%s+passes again"
  - it elides contexts for skipped examples:
      expect (specl "+11").not_to_match_output.any_of {
        "option one%s+group one%s+", "option two", "group three", "group four",
      }
      expect (specl "+15").not_to_match_output.any_of {
        "option one", "group one", "group two", "group four",
      }

- context with repeated description elements:
  - it does not elide repeats: |
      function specl ()
        return run_spec { "-freport",
          stdin = "specify specl:\n" ..
                  "- context one:\n" ..
                  "  - context sub-group:\n" ..
                  "    - it is:\n" ..
                  "- context two:\n" ..
                  "  - context sub-group:\n" ..
                  "    - it is:\n"
        }
      end
      expect (specl ()).to_match_output "\n%s+sub%-group\n.*\n%s+sub%-group\n"
  - it does not repeat contexts consecutively: |
      function specl ()
        return run_spec { "-freport",
          stdin = "specify specl:\n" ..
                  "- context one:\n" ..
                  "  - context sub-group:\n" ..
                  "    - it is: expect (1).to_be (1)\n" ..
                  "    - it is too: expect (2).to_be (2)\n"
        }
      end
      expect (specl ()).to_match_output "%s+one%s+sub%-group%s+is%s+is too"
