describe specl:
- describe spec-file format:
  - before: |
      yaml = "describe x:\n- it is pending:"

  - context with empty examples:
    - it exits with zero status:
        expect (run_spec (yaml)).to_exit (0)
    - it complains with no expectations:
        expect (run_spec (yaml)).to_contain_output "No expectations met, "
    - it treats it as a pending example:
        expect (run_spec (yaml)).to_match_output "%*.*1 still pending"

  - context with pending call from example:
    - it exits with zero status:
        yaml = yaml .. " pending ()"
        expect (run_spec (yaml)).to_exit (0)
    - it reports pending expectations:
        yaml = yaml .. " pending ()"
        expect (run_spec (yaml)).to_match_output "%*.*1 still pending"
    - it reports unexpected pending passes: |
        yaml = yaml .. "\n    pending ()\n    expect (1).to_be (1)"
        expect (run_spec (yaml)).
          to_match_output "%?.*PENDING expectation 1: .*passed unexpectedly"
    - it uses pending argument for pending passes: |
        yaml = yaml .. " |\n    pending 'issue #23'\n    expect (1).to_be (1)"
        expect (run_spec (yaml)).
          to_match_output "%?.*PENDING expectation 1.*issue #23.*passed unexpectedly"

  - context with libYAML parse error in spec file:
    - before:
        tmp = Tmpfile ()
    - after:
        tmp:remove ()
    - it diagnoses spurious question mark: |
        tmp:append (yaml .. " ?\n    garbage")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path .. ":2:3: mapping keys are not allowed")
    - it diagnoses spurious braces in plain scalar: |
        tmp:append (yaml .. "\n    { garbage")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path ..
                            ":4:1: did not find expected ',' or '}'")
    - it diagnoses spurious bracket in plain scalar: |
        tmp:append (yaml .. "\n    [ garbage")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path ..
                            ":3:7: did not find expected ',' or ']'")
    - it diagnoses missing colon in badly indented line: |
        tmp:append (yaml .. "\nprint ':'")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path .. ":2:3: could not find expected ':'")

  - context with LuaMacro parse error in macro expansion:
    - before:
        tmp = Tmpfile ()
    - after:
        tmp:remove ()
    - it diagnoses missing parenthesis in 'expect' call: |
        tmp:append (yaml .. "\n    expect (fn (x ()).to_be {}")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path .. ":3: parse error near 'expect'")
    - it diagnoses spurious paretheses in 'expect' call: |
        tmp:append (yaml .. " |" ..
                 "\n    expect (fn (x ()))" ..
                 "\n      ).to_be {}")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path .. ":4: unexpected symbol near ')'")
    - it diagnoses missing parentheses before 'expect' call: |
        tmp:append (yaml .. "\n    garbage ( expect (1).to_be (0) foo")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path .. ":3: ')' expected near 'foo'")
    - it diagnoses spurious parentheses before 'expect' call: |
        tmp:append (yaml .. "\n    ) expect (1).to_be (0)")
        expect (run_spec {"--color=no", tmp.path}).
          to_contain_error (tmp.path .. ":3: unexpected symbol near ')'")

  - context with Lua error in first line of example:
    - before:
        tmp = Tmpfile ()
        example = "\n    print garbage"
    - after:
        tmp:remove ()
    - it reports filename and line number for YAML plain style: |
        tmp:append (yaml .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":3: .* near 'garbage'")
    - it reports filename and line number for YAML literal style: |
        tmp:append (yaml .. " |" .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":3: .* near 'garbage'")
    - it reports filename and line number for YAML folded style: |
        tmp:append (yaml .. " >" .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":3: .* near 'garbage'")
    - it reports filename and line number for YAML single-quoted style: |
        tmp:append (yaml .. " '" .. example .. "'")
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":3: .* near 'garbage'")
    - it reports filename and line number for YAML double-quoted style: |
        tmp:append (yaml .. ' "' .. example .. '"')
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":3: .* near 'garbage'")

  - context with Lua error in multi-line example:
    - before:
        tmp = Tmpfile ()
        example = "\n    x=nil\n    t={}\n    print garbage"
    - after:
        tmp:remove ()
    - it reports filename and line number for YAML plain style: |
        tmp:append (yaml .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":5: .* near 'garbage'")
    - it reports filename and line number for YAML literal style: |
        tmp:append (yaml .. " |" .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":5: .* near 'garbage'")
    - it reports filename and line number for YAML folded style: |
        tmp:append (yaml .. " >" .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":5: .* near 'garbage'")
    - it reports filename and line number for YAML single-quoted style: |
        tmp:append (yaml .. " '" .. example .. "'")
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":5: .* near 'garbage'")
    - it reports filename and line number for YAML double-quoted style: |
        tmp:append (yaml .. ' "' .. example .. '"')
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":5: .* near 'garbage'")

  - context with Lua error in multi-example spec-file:
    - before: |
        yaml = yaml .. "\n" ..
               "- it succeeds: |\n" ..
               "    --\n" ..
               "    print 'garbage'\n" ..
               "describe y:\n" ..
               "- it fails:"
        example = "\n    print garbage"
        tmp = Tmpfile ()
    - after:
        tmp:remove ()
    - it reports filename and line number for YAML plain style: |
        tmp:append (yaml .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":8: .* near 'garbage'")
    - it reports filename and line number for YAML literal style: |
        tmp:append (yaml .. " |" .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":8: .* near 'garbage'")
    - it reports filename and line number for YAML folded style: |
        tmp:append (yaml .. " >" .. example)
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":8: .* near 'garbage'")
    - it reports filename and line number for YAML single-quoted style: |
        tmp:append (yaml .. " '" .. example .. "'")
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":8: .* near 'garbage'")
    - it reports filename and line number for YAML double-quoted style: |
        tmp:append (yaml .. ' "' .. example .. '"')
        expect (run_spec {"--color=no", tmp.path}).
          to_match_error (tmp.path .. ":8: .* near 'garbage'")

- describe command line interface:
  - before: |
      yaml = "describe x:\n- it passes: expect (true).to_be (true)"

  - it diagnoses unrecognised options: |
      expect (run_spec {"--notarealoption", stdin = yaml}).
        to_contain_error "error: unrecognised option '--notarealoption'"
      expect (run_spec {"-,", stdin = yaml}).
        to_contain_error "error: unrecognised option '-,'"
  - it responds to --version with appropriate version text:
      expect (run_spec {"--version"}).should_succeed_while_matching (
        "^specl %(Specl%) %d[%.%d]*\n" ..
        "Written by Gary V%. Vaughan <%w+@[%w%.]+>, 2013\n" ..
        "\n" ..
        os.date ("Copyright %%(C%%) %Y, Gary V%%. Vaughan\n") ..
        ".*ABSOLUTELY NO WARRANTY.*$")
  - it responds to --help with appropriate help text: |
      expect (run_spec {"--help"}).should_succeed_while_matching (
        "^Usage: specl %[OPTION%]%.%.%. %[FILE%]%.%.%.\n" ..
        "\n" ..
        "Behaviour Driven Development for Lua%.\n" ..
        ".*\n" ..
        "Report bugs to [%w%.@:/]+%.\n$")

  - it reads specs subdirectory with no arguments:
      expect (run_spec (yaml)).to_contain_output "All expectations met in "
  - it reads a spec from standard input for '-' filename argument:
      expect (run_spec {"-"; stdin = yaml}).
        to_contain_output "All expectations met in "
  - it exits with zero status when there are no failing examples:
      expect (run_spec (yaml)).to_exit (0)
  - it exits with non-zero status when there are failing examples: |
      yaml = "describe x:\n- it fails: expect (1).to_be (0)"
      expect (run_spec (yaml)).not_to_exit (0)
  - it outputs results from a formatter specified on the command line:
      expect (run_spec {"--formatter=tap"; stdin = yaml}).to_contain_output "1..1"

  - context when failing fast:
    - before: |
        function specl (args)
          return run_spec {
            "-freport", "-v", args,
            stdin = "specify specl:\n" ..
                    "- it passes:\n" ..
                    "    expect (1).to_be (1)\n" ..
                    "- it hasn't decided yet:\n" ..
                    "    pending ()\n" ..
                    "    expect (1).to_be (0)\n" ..
                    "- it fails:\n" ..
                    "    expect (1).to_be (0)\n" ..
                    "- it doesn't get this far:\n" ..
                    "    expect (1).to_be (1)\n" ..
                    "- it stil hasn't decided:\n" ..
                    "- it fails again:\n" ..
                    "    expect (1).to_be (0)\n"
           }
         end
    - it checks earlier passing examples:
        expect (specl "--fail-fast").to_contain_output "\n1 passed,"
        expect (specl "-1").to_contain_output "\n1 passed,"
    - it checks earlier pending examples:
        expect (specl "--fail-fast").to_contain_output " hasn't decided yet"
        expect (specl "-1").to_contain_output " hasn't decided yet"
    - it stops at the first failing example:
        expect (specl "--fail-fast").to_contain_output " 1 failed "
        expect (specl "-1").to_contain_output " 1 failed "
    - it does not check later passing examples:
        expect (specl "--fail-fast").
          not_to_contain_output "doesn't get this far"
        expect (specl "-1").
          not_to_contain_output "doesn't get this far"
    - it does not check later pending examples:
        expect (specl "--fail-fast").
          not_to_contain_output "still hasn't decided"
        expect (specl "-1").
          not_to_contain_output "still hasn't decided"
    - it does not check later failing examples:
        expect (specl "--fail-fast").
          not_to_contain_output "fails again"
        expect (specl "-1").
          not_to_contain_output "fails again"

  - context when using a custom formatter:
    - before: |
        -- Write a very basic custom formatter to a temporary file, and add
        -- its location to the lua search path.
        tmp = Tmpfile [[return {
            header  = function () io.write "h" end,
            spec    = function () io.write "s" end,
            expectations = function () io.write "." end,
            footer  = function () io.write "f"; io.flush () end,
          }]]
    - after:
        tmp:remove ()

    - it formats expectations with the custom formatter: |
        command = {
          "--formatter=" .. tmp:basename (), "-";
          env = { LUA_PATH = tmp:dirname () .. "/?;" .. package.path },
          stdin = yaml,
        }
        expect (spawn_specl (command)).to_output "hs.f"
    - it accepts -f as an equivalent to --formatter:
        command = {
          "-f" .. tmp:basename (), "-";
          env = { LUA_PATH = tmp:dirname () .. "/?;" .. package.path },
          stdin = yaml,
        }
        expect (spawn_specl (command)).to_output "hs.f"

  - context when filtering by pattern:
    - before: |
        yaml = "specify module:\n" ..
               "- context group one:\n" ..
               "  - it passes:\n" ..
               "      expect (1).to_be (1)\n" ..
               "  - it hasn't decided yet:\n" ..
               "- context group two:\n" ..
               "  - it fails:\n" ..
               "      expect (1).to_be (0)\n" ..
               "  - it fails again:\n" ..
               "      expect (0).to_be (1)\n"

    - it supports selection by string:
        expect (run_spec {"-e", "fails", stdin = yaml}).
          to_contain_output "\n0 passed, 0 pending, and 2 failed "
    - it supports selection by pattern:
        expect (run_spec {"-e", "%w+%s*again", stdin = yaml}).
          to_contain_output "\n0 passed, 0 pending, and 1 failed "

  - context when filtering by line number:
    - before: |
        yaml = "specify specl:\n" ..
               "- it passes:\n" ..
               "    expect (1).to_be (1)\n" ..
               "- it fails:\n" ..
               "    expect (1).to_be (0)\n" ..
               "- it hasn't decided yet:\n"

    - it reports failing line number in verbose mode: |
        expect (run_spec {"-v", stdin = yaml}).
          to_contain_output "  -:5:1: FAILED expectation 1"
    - it runs all examples without a line filter:
        expect (run_spec {"-v", stdin = yaml}).
          to_contain_output "\n1 passed, 1 pending, and 1 failed "

    - context by filename:
      - before: tmp = Tmpfile (yaml)
      - after: |
          tmp:remove ()

      - it runs only the failing example with a matching line filter:
          expect (run_spec {"-v", "+5", stdin = yaml}).
            to_contain_output "\n0 passed, 0 pending, and 1 failed "
      - it accepts multiple line numbers before the filtered spec file:
          expect (run_spec {"-v", "+3", "+5", stdin = yaml}).
            to_contain_output "\n1 passed, 0 pending, and 1 failed "
      - it only filters the immediately following spec file: |
          spec = Tmpfile (yaml .. "    expect (0).to_be (0)\n")
          expect (run_spec {"-v", "+3", spec.path, stdin = yaml}).
            to_contain_output "\n2 passed, 1 pending, and 1 failed "
          expect (run_spec {"-v", "+5", spec.path, stdin = yaml}).
            to_contain_output "\n1 passed, 1 pending, and 2 failed "
          expect (run_spec {"-v", "+7", spec.path, stdin = yaml}).
            to_contain_output "\n2 passed, 1 pending, and 1 failed "
          spec:remove ()
      - it accepts a line number suffix to a spec file:
          expect (run_spec {"-freport", tmp.path .. ":3"}).
            to_contain_output "\n1 passed, 0 pending and 0 failed "
          expect (run_spec {"-freport", tmp.path .. ":5"}).
            to_contain_output "\n0 passed, 0 pending and 1 failed "
          expect (run_spec {"-freport", tmp.path .. ":6"}).
            to_contain_output "\n0 passed, 1 pending and 0 failed "
      - it ignores column or expectation suffix to a spec file:
          expect (run_spec {"-freport", tmp.path .. ":3:1"}).
            to_contain_output "\n1 passed, 0 pending and 0 failed "
          expect (run_spec {"-freport", tmp.path .. ":5:3"}).
            to_contain_output "\n0 passed, 0 pending and 1 failed "
          expect (run_spec {"-freport", tmp.path .. ":6:999"}).
            to_contain_output "\n0 passed, 1 pending and 0 failed "

    - context by stdin:
      - it runs only the failing example with a matching line filter:
          expect (run_spec {"-v", "+5", stdin = yaml}).
            to_contain_output "\n0 passed, 0 pending, and 1 failed "
      - it accepts multiple line numbers before the filtered spec file:
          expect (run_spec {"-v", "+3", "+5", stdin = yaml}).
            to_contain_output "\n1 passed, 0 pending, and 1 failed "
      - it only filters the immediately following spec file: |
          spec = Tmpfile (yaml .. "    expect (0).to_be (0)\n")
          expect (run_spec {"-v", spec.path, "+3", stdin = yaml}).
            to_contain_output "\n3 passed, 0 pending, and 1 failed "
          expect (run_spec {"-v", spec.path, "+5", stdin = yaml}).
            to_contain_output "\n2 passed, 0 pending, and 2 failed "
          expect (run_spec {"-v", spec.path, "+6", stdin = yaml}).
            to_contain_output "\n2 passed, 1 pending, and 1 failed "
          spec:remove ()
      - it accepts a line number suffix to a spec file:
          expect (run_spec {"-freport", "-:3", stdin = yaml}).
            to_contain_output "\n1 passed, 0 pending and 0 failed "
          expect (run_spec {"-freport", "-:5", stdin = yaml}).
            to_contain_output "\n0 passed, 0 pending and 1 failed "
          expect (run_spec {"-freport", "-:6", stdin = yaml}).
            to_contain_output "\n0 passed, 1 pending and 0 failed "
      - it ignores column or expectation suffix to a spec file:
          expect (run_spec {"-freport", "-:3:1", stdin = yaml}).
            to_contain_output "\n1 passed, 0 pending and 0 failed "
          expect (run_spec {"-freport", "-:5:3", stdin = yaml}).
            to_contain_output "\n0 passed, 0 pending and 1 failed "
          expect (run_spec {"-freport", "-:6:999", stdin = yaml}).
            to_contain_output "\n0 passed, 1 pending and 0 failed "
