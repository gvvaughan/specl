#! /bin/sh
A=--[[ exec @LUA@ "$0" "$@"  # -*- mode: lua; -*- ]]A
--
-- Specification testing framework.
--
-- Copyright (c) 2013 Free Software Foundation, Inc.
-- Written by Gary V. Vaughan, 2013
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3, or (at your option)
-- any later version.
--
-- This program is distributed in the hope that it will be useful, but
-- WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; see the file COPYING.  If not, write to the
-- Free Software Foundation, Fifth Floor, 51 Franklin Street, Boston,
-- MA 02111-1301, USA.


-- Make a shallow copy of the pristine global environment, so that the
-- state of the Specl Lua environment is not exposed to spec files.
local function clone (t, nometa)
  local r = {}
  if not nometa then
    setmetatable (r, getmetatable (t))
  end
  local d = {[t] = r}
  local function copy (o, x)
    for i, v in pairs (x) do
      if type (v) == "table" then
        if not d[v] then
          d[v] = {}
          if not nometa then
            setmetatable (d[v], getmetatable (v))
          end
          o[i] = copy (d[v], v)
        else
          o[i] = d[v]
        end
      else
        o[i] = v
      end
    end
    return o
  end
  return copy (r, t)
end

local sandbox = clone (_G)

-- Notify modules that specifications are being checked.
_G._SPEC = true


-- Remove current directory from package search paths.
package.path  = ("@speclpath@;" .. package.path):gsub (
                 ";%./%?.lua;", ";"):gsub (
                 ";%./%?.lua$", "")
package.cpath = ("@speclcpath@;" .. package.cpath):gsub (
                 ";%./%?.lua;", ";"):gsub (
                 ";%./%?.lua$", "")


local getopt = require "std.getopt"
local yaml   = require "lyaml"
local specl  = require "specl"
local prog   = require "version"

prog = table.merge (prog, {
  purpose     = "Behaviour Driven Development for Lua.",
  version     = prog.program .. " " .. prog.VERSION .. "\n" ..
    "Written by Gary V. Vaughan <gary@gnu.org>, 2013",
  description = "Develop and run BDD specs written in Lua for RSpec " ..
    "style workflow.\n" ..
    "Execute specifications from FILEs or standard input, " ..
    "reporting results on standard output.\nIf no FILE is listed, or w" ..
    "here '-' is given as a FILE, read from standard input.",
  notes       = prog.BUGREPORT_NOTICE,
  copyright   = prog.COPYRIGHT_NOTICE,
  options     = {
    {{"help"}, "print this help, then exit"},
    {{"version"}, "print version number, then exit"},
    {{"verbose", "v"}, "verbose mode"},
    {{"formatter"}, "use a custom formatter from FILE", "Req", "FILE"},
  },
})


-- Called by io.processFiles() to concatenate a comma separated list of
-- specifications in each FILENAME.
local spec = {}
function slurp (filename)
  local s, errmsg = io.slurp ()
  if errmsg ~= nil then
    io.stderr:write (errmsg .. "\n")
    os.exit (1)
  end

  -- Remove leading comment lines, carefully preserving line numbers for
  -- error messages from 'load', and then inject the 'return' keyword at
  -- the start of the first non-blank line.
  s = s:gsub ("^%s*%-%-[^\r\n]+i(\r*\n)%s*", "%1"
      ):gsub (",%s*$", ""
      ):gsub ("[^\r\n]", "return %0", 1)
  local f, errmsg = loadstring (s, filename)

  local t
  if f ~= nil then
    t, errmsg = f ()
  else
    -- If loading as lua didn't work, try again as YAML.
    t, errmsg = yaml.load (s)
  end
 
  -- Execute the newly loaded function, and save the value returned, or
  -- report any error right away.
  if errmsg ~= nil then
    error (errmsg)
  end

  -- Append to the specification list, which specl will run on completion.
  table.insert (spec, t)
end


getopt.processArgs (prog)

-- Try to load and use a custom --formatter argument.
local formatter = getopt.opt.verbose and require "formatter.report"
if getopt.opt.formatter then
  local ok, file = next (getopt.opt.formatter)
  ok, formatter = pcall (require, getopt.opt.formatter[1])

  if ok == false then
    io.stderr:write ("could not load formatter: " .. formatter .. "\n")
    os.exit (2)
  end
end

io.processFiles (slurp)
os.exit (specl.run (spec, formatter, sandbox))
