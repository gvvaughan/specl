#! /usr/bin/env lua

-- Specification testing framework.
--
-- Copyright (c) 2013 Free Software Foundation, Inc.
-- Written by Gary V. Vaughan, 2013
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3, or (at your option)
-- any later version.
--
-- This program is distributed in the hope that it will be useful, but
-- WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; see the file COPYING.  If not, write to the
-- Free Software Foundation, Fifth Floor, 51 Franklin Street, Boston,
-- MA 02111-1301, USA.

require "std"

package.path = "src/?.lua;" .. package.path

local specl = require "specl"

-- TODO: make sure it really works with 5.1

prog = {
  name    = arg[0]:gsub ("^.*/", ""),
  banner  = "Specl " .. specl._VERSION .. " by Gary V. Vaughan <gary@gnu.org>",
  purpose = "A specification testing framework.",
  notes   = "Copyright (c) 2013 Gary V. Vaughan\n" ..
    "Specl comes with ABSOLUTELY NO WARRANTY.\n" ..
    "You may redistribute copies of Specl under the terms of the GNU\n" ..
    "General Public License; either version 3, or any later version.\n" ..
    "Report bugs at http://github.com/gvvaughan/specl/issues."
}

options = {
  Option {{"verbose", "v"}, "verbose mode"},
}


-- Called by io.processFiles() to concatenate a comma separated list of
-- specifications in each FILENAME.
local spec = {}
function slurp (filename)
  local s, errmsg = io.slurp ()
  if errmsg ~= nil then
    io.stderr:write (errmsg .. "\n")
    os.exit (1)
  end

  -- Remove leading comment lines, carefully preserving line numbers for
  -- error messages from 'load', and then inject the 'return' keyword at
  -- the start of the first non-blank line.
  s = s:gsub ("^%s*%-%-[^\r\n]+i(\r*\n)%s*", "%1"
      ):gsub ("[^\r\n]", "return %0", 1)
  local f, errmsg = load (s, filename)
 
  -- Execute the function from 'load', and save the value returned, or
  -- report any error right away.
  local t
  if f ~= nil then
    t, errmsg = f ()
  end
  if errmsg ~= nil then
    error (errmsg)
  end

  -- Append to the specification list, which specl will run on completion.
  table.insert (spec, t)
end


getopt.processArgs ()
io.processFiles (slurp)
specl.run (spec, getopt.opt.verbose and specl.report)

os.exit (0)
