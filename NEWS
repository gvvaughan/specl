Specl NEWS - User visible changes.

* Noteworthy changes in release 9 (2013-12-09) [stable]

** New features:

  - Vastly improved error diagnostics for syntax errors in spec
    files, reporting filename and line-number of error locations,
    and without spurious Lua-runtime stack traces.

  - Support for custom per-matcher adaptors. See docs/specl.md for
    documentation.

  - New 'a_permutation_of' adaptor for contain matcher, that allows
    expectations for operations that are inherently unordered:

      t = {}
      for _, v in pairs (a_big_table) do t[#t + 1] = v end
      expect (a_big_table).should_contain.a_permutation_of (t)

    It will fail unless the same set of elements are present in the
    expect argument values, or the expect argument keys; like the
    other 'contain' adaptors it works with strings and objects too.

  - New '--unicode' command-line option to support unicode in spec
    files, at the expense of inaccurate line-numbers in error
    messages.

  - Works correctly without ansicolors installed (albeit without
    displaying any color!).

  - If 'luaposix' is installed where Specl can find it, the report
    and progress formatters will use it to display the time spent
    running specifications much more accurately.

** Incompatible changes:

  - Requires lyaml 4 or newer.

  - Unicode characters in spec files are no longer supported by
    default. LibYAML counts indices by character when reporting the
    offsets used to re-extract the Lua code fragments (i.e. without
    YAML neline folding) that Specl uses to generate correct line-
    numbers in error-messages.  Lua string operations require byte
    offsets, which are incompatible.

  - When using std.objects, the contain matcher now displays the
    expected object type name (rather than just: "table") from the
    FAIL report.

** Bug fixes:

  - Help2man is no longer required to install specl from the
    distribution tarball.


* Noteworthy changes in release 8 (2013-06-26) [stable]

** New features:

  - Can now be installed directly from a release tarball by `luarocks`.
    No need to run `./configure` or `make`, unless you want to install
    to a custom location, or do not use LuaRocks.

  - A new 'all_of' adaptor for any matcher:

     expect (mytable).should_contain.all_of {x, y, z}

  - 'contain' matcher handles std.object module derived objects by
    coercing them to tables.

  - 'equal' matcher performs a deep comparison of std.object module
    derived objects' contents.

  - `./bootstrap` runs slowly again with 4800 lines of code
    reintroduced required to automatically manage Slingshot files with
    new `bootstrap.slingshot`.  This doesn't have any direct effect on
    users, except that the Slingshot managed release process is much
    more robust, reducing the chances you'll end up with a still-born
    release.

** Bug fixes:

  - Avoid 'nan%' divide-by-zero error output from report formatter.

  - Built in report formatter displays argument strings to pending
    calls from examples consistently.

** Incompatible changes:

  - API change in matchers, generalizing the former `format_any_of` to
    `format_alternatives`, with a new `adaptor` parameter for use with
    additional matcher adaptors.

  - API change in both matchers.concat and matchers.reformat, each of
    which now take an additional `adaptor` argument, which can be
    passed in from `format_alternatives` as received so that the
    grammatically best choice of `and` or `or` is used to display the
    list of alternatives when an expectation fails.

  - Calling `require` in a spec file no longer artificially extracts
    symbols from a returned table and injects them into the local
    environment -- because it was inelegant and unnecessary.  If you
    had relied on this feature, simply capture the returned table and
    either manually copy the symbols you need or use a fully qualified
    name.  Previously:

      # Don't do this!
      before:
        require "specl.shell"
      describe spawn:
        expect (spawn "printf hello").should_output "hello"

    Much better:

      # Do this instead.
      before:
        spawn = (require "specl.shell").spawn
      describe spawn:
        expect (spawn "printf hello").should_output "hello"


* Noteworthy changes in release 7 (2013-05-13) [stable]

** Bug fixes:

  - Add missing documentation for `matchers.Matcher.format_any_of`.

  - It's no longer possible to crash Specl using example descriptions
    that look like other types during lyaml parsing.

  - Specl 6 had a broken `should_contain` matcher, that would
    fail to match any expected substring with an active Lua
    pattern character in it (such as ?, * or % for example).

  - Add missing close parenthesis in non-verbose mode report
    formatter summaries with failing or pending expectations.

** Incompatible changes:

  - While not encouraged, one word descriptions are now supported,
    and are displayed correctly by the bundled formatters.


* Noteworthy changes in release 6 (2013-05-09) [stable]

** This release is a significant upgrade, with many new features,
   and, no doubt, some new bugs.

** New features:

  - Top level 'before' and 'after' functions are supported.

  - A proper, documented, API for adding custom matchers.

  - A new 'any_of' method for any matcher:

     expect (ctermid ()).should_match.any_of {"/.*tty.*", "/.*pts.*"}

  - You can `require "specl.shell"` from a spec file (usually in the
    initial top-level `before`) to get access to a shell Command
    constructor, a `spawn` executor function and several new matchers
    for querying the status of a shell command.

  - `package.path` is augmented, for the duration of each spec file,
    so that `require` can find and load other Lua files in the same
    directory.

  - Additional YAML "documents" from a spec file with '---' and '...'
    stream separators are no longer ignored; but treated as additional
    unnamed documents.

  - Report formatter displays inline expectation summaries for each
    example when not in verbose mode.

** Incompatible changes:

  - Documentation is now in Jekyll format markdown for easy website
    regeneration.

  - Calling require in a spec file now runs in the local environment,
    giving access to 'global' symbols from the newly loaded file from
    the local namespace.  Conversely, access to those same symbols is
    no longer available from "_G", the global environment table.


* Noteworthy changes in release 5 (2013-04-29) [stable]

** This release is a significant upgrade.

** New features:

  - Documentation reorganisation.  README.md is much simplified, with
    full documentation still in markdown at docs/specl.md.  The html
    documentation at http://gvvaughan.github.io/specl will be updated
    with every release from now on.

** Bug fixes:

  - './bootstrap' runs quickly with 4800 lines of code removed.

  - './configure' runs quickly with the remaining C macros removed.

  - 'progress' and 'report' formatters now report elapsed time rather
    than cpu time in their footer output.

  - The 'specl' LUA_PATH no longer picks up its own 'specl.std' module
    by mistake when a spec file requires the lua-stdlib 'std' module.

** Incompatible changes:

  - The 'should_error' matcher now takes arguments in the same order
    as the other matchers. LuaMacro injects a 'pcall' into every
    'expect' invocation, so the specifications are written
    intuitively:

        expect (error "failed").should_error "failed"

  - The Specl-1 Lua format for spec files is no longer supported, in
    part to clean up a lot of otherwise unused code, but also because
    Lua specs were accumulating too much magic to be easy to write by
    hand.

  - 'build-aux' speclc and the bundled generated 'specs/*_spec.lua'
    specs have been removed.


* Noteworthy changes in release 4 (2013-04-07) [beta]

** This release is a minor update.

** New features:

  - Now tested against Lua 5.1, Lua 5.2 and luajit-2.0 on every commit,
    thanks to travis-ci.org.

  - Pending specifications are now fully implemented and documented.

  - Unexpected passing of pending specifications is reported by progress
    and report formatters.

  - API for custom formatters is richer and clearer.

** Bug fixes:

  - Specs propagate user LUA_PATH settings to specl forks in Specls own
    own specifications.


* Noteworthy changes in release 3 (2013-03-20) [beta]

** This release is a significant upgrade.

** New features:

  - lyaml was spun out to a separate luarock, now required.

  - Initial support for pending examples, either using the new
    'pending ()' function, or having an example description with an
    empty definition.

  - pending and failed expectations are now summarized in the footer of
    default (progress) and report formatters.

  - Formatters display in color on supported TERM types, ansicolors is
    now required.

  - Color can be disabled with `--color=no` command line option.

  - Custom formatters are now supported, using the new command line
    option `--formatter=tap`.

  - The custom formatters API is documented in README.md.

  - A new TAP formatter was contributed by Fran√ßois Perrad.

  - Many more specifications for Specl were added, now that specl is
    featureful enough to support BDD development of itself.

** Bug fixes:

  - Error message from invalid Lua in example definitions are now
    reported correctly.

  - Runner environments are more robust, see README.md for details.

  - Specl no longer uses lua-stdlib (to break a cyclic dependency
    when using specl to run lua-stdlib spec-files).

** Incompatible changes:

  - `-v` now behaves differently, and simply requests more verbose
    output from the selected formatter, use `-freport` to select the
    report formatter like `-v` did in release 2 and earlier.


* Noteworthy changes in release 2 (2013-03-07) [beta]

  - Now compatible with Lua 5.2 *and* Lua 5.1.

  - Primary format for spec files is now YAML (specl-1 format spec files
    are still supported).

  - Requires libyaml-0.1.4 to be installed before building.

  - Includes some YAML specifications for Specl.


* Noteworthy changes in release 1 (2013-02-26) [alpha]

** Initial proof-of concept for an RSpec inspired framework for and in
   Lua.

** The spec file syntax is a bit horrid in pure Lua, but the next
   release uses YAML and is much nicer!
