2013-03-20  Gary V. Vaughan  <gary@gnu.org>

	specl: report YAML compilation failures.
	* specl/specl.lua (compile_example): Report loadstring error
	messages.
	Add newline before function closing `end` incase the previous line
	ends in a comment.
	* TODO.yaml: Remove fixed item.

	refactor: move color selection to specl/color.lua.
	To provide a more uniform use of color between built in formatters,
	factor out hard-coded colors and look them up by content type.
	* specl/color (colormap): Tabulate names of some useful colors, and
	return it, defaulting to underlining unknown color lookups.
	* specl/formatters/progress.lua, specl/formatters/report.lua: Use
	it.

	formatters: always show fail summary, use verbose for inline.
	You shouldn't need to specify `--verbose` on the command line to
	get a summary of failing and pending examples, show them all the
	time by default.  The `--verbose` switch now enables additional
	inline reporting, where that makes sense.
	* specl/formatter/progress.lua (footer): Always show summaries.
	* specl/formatter/report.lua (footer): LIkewise.
	(expectations): Show additional inline pending and failing reports
	in verbose mode.
	* GNUmakefile (specl_verbose_0): With V=1 use report formatter in
	verbose mode, otherwise default formatter.

	formatters: use table accumulators to collect pending reports.
	* specl/formatter/progress.lua (expectations): Split returned
	value into a `pend` and `fail` reports.
	(footer): Display `pend` and `fail` summaries in verbose mode.
	* specl/formatter/report.lua (expectations, footer): Likewise.
	* specl/formatter/tap.lua (expectations): Display pending reports
	inline as TAP comments.

	formatters: provide a richer accumulator API for custom formatters.
	* README.md (Custom Formatters): Document the richer API.
	* specs/formatters_spec.yaml: New file. Specify accumulator API
	behaviour.
	* specs/specs.mk (specl_SPECS): Add specs/formatters_spec.yaml.
	(specl_LUASPECS): Add specs/formatters_spec.lua.
	* specl/specl.lua (accumulator): Implement it.

2013-03-19  Gary V. Vaughan  <gary@gnu.org>

	maint: adjust output from compiled Lua spec files.
	Since we effectively run every specification twice to make sure
	support for Lua specs isn't broken, tweak the descriptions of
	compiled specs so we can tell them apart in failure summaries.
	* specs/specs.mk (.yaml.lua): Inject '(Lua spec)' into top-level
	describe entries as compiled specs are written to disk.

	formatters: tweak color output for report formatter.
	* specl/formatter/report.lua (footer): Use blue instead of red
	for the failing report header output.

	maint: remove completed TODO items.
	* TODO.yaml: Remove completed TODO items.

	matchers: report an empty example definition as a pending example.
	* README.md (Pending Examples): Update to document empty example
	definitions as denoting a pending example.
	* specs/specl_spec.yaml: Remove pending status for empty example
	definition specifications.
	* specl/specl.lua (compile_examples): Replace any empty definition
	with a call to `pending` before compiling.
	* specs/speclc_spec.lua: New file. Specify that the compiler must
	produce a Lua format spec file with a call to `pending` injected
	into otherwise empty example definitions.
	* specs/specs.mk (specl_SPECS): Add specs/speclc_spec.yaml.
	(specl_LUASPECS): Add specs/speclc_spec.lua.
	* build-aux/speclc.in (dump_example): Replace otherwise empty
	example definitions with a call to `pending`.

	matchers: preliminary support for pending expectations.
	* README.md: Document required behaviour of pending examples.
	Edit the surrounding text so that the new section fits in to
	the narrative logically.
	* specs/specl_spec.yaml: New examples to show how pending
	examples should work.  Some are still pending!
	* specl/specl.lua (run_examples): Change the formatters API
	slightly, because we don't want to have already displayed an
	example description on the previous line before we know whether
	the description is for a still pending example.
	* specl/formatter/progress.lua (expectations): Decode the new
	status parameter table to display pending examples as '*'.
	* specl/formatter/report.lua (tabulate): Make a suitably
	colorful output table element.  Factored out of spec.
	(spec): Adjust.
	(example): Remove.
	(expectations): Decode the new status pararameter table to show
	whether the whole example is pending, or that the expectations
	are specifying currently unimplemented behaviour.
	* spelc/formatter/tap.lua (expectations): Likewise.
	* specl/formatter/progress.lua (footer): Show pending examples
	in statistics.
	(M): Remove unused example entry point.
	* specl/formatter/report.lua, specl/formatter/tap.lua (footer)
	(M): Likewise.
	* specl/matchers.lua (M.init): New entry point to prepare for
	a new block of expectations, that keep track of pending status.
	(M.status): New entry point. Return results after a block of
	expectations have run.
	* specl/specl.lua (run_examples): Use them instead of hard-
	coding.
	* specl/matchers.lua (M.stats): Add pend counter.
	(M.expect): Don't try to match an expectation for a pending
	example, or count it's status.
	(M.pending): New entry point, put the current expectation block
	in pending mode, and increment pend counter.

	docs: re-organise and edit README.md to make way for pending docs.
	* README.md (YAML): Split out from the Specifications section.
	Don't list the quirks at the end, explain them in the main text
	of this section.
	Renumber following sections accordingly.
	(Contexts): Introduce an example right away.
	(Pending Examples): Pending.
	(Custom Formatters): Describe API changes necessary to support
	display of pending expectations and examples.

	refactor: move command pipe managment into environment sandbox.
	Generalize the output and exit status capturing functions into
	the outermost environment sandbox, where it can be used by any
	spec-files.
	* specs/specl_spec.yaml (exit_status, capture_output): Refactored
	from here...
	* specl/specl.lua (env.spec.cmdpipe): ...to here.
	* specs/specl_spec.yaml (run_spec): New helper function, wrapping
	spec.cmdpipe.
	Adjust all callers.

	matchers: use util.tostring to display tables for diagnostics.
	* specl/matchers.lua: Import specl.util.
	(q): Use util.tostring so that tables output by failed expectations
	are legible.

	refactor: move non-lua-stdlib functions out of specl.std.
	* AUTHORS: Credit Reuben Thomas for the contents of
	specl/std.lua.
	* specl/std.lua: Change copyright header to refrect the correct
	copyright and license terms of the code in this file.
	(prog, warn, process_args): Move from here...
	* specl/util.lua (prog, warn, process_args): ...to here.
	* specl/std.lua (metatable, strbuf,clone, metamethod, render)
	(tostring): New functions.  Copied from, or trivial reworkings of
	code from lua-stdlib.
	(M): Update accordingly.
	* specl/util.lua: Import specl.std.
	(M.process_files, M.slurp, M.tostring): Re-export functions from
	specl.std.
	* specl/specl.in: Import those APIs from specl.util instead of
	specl.std.

2013-03-18  Gary V. Vaughan  <gary@gnu.org>

	refactor: use canonical util.nop everywhere.
	* specl/specl.lua (nop): Remove.
	(compile_example): Use util.nop.

	specl: improve --help output.
	* specl/version.lua.in (M["--help"]): Improve --help output
	formatting, and correct an inaccuracy in --verbose description.

	docs: recommend --help for more info, -h was a typo.
	* README.md (Command Line): Fix a typo.

	refactor: encapsulate coloring into util.princ.
	* specl/util.lua: Require "specl.color".
	(M.princ, M.writc): Wrap ansicolor printing with princ, and
	io.stdout:write with writc.
	* specl/formatter/progress.lua, specl/formatter/report.lua:
	Require "specl.util" instead of "specl.color".
	Use princ and writc wrappers.

	specl: -v doesn't change formatter, support -f for that.
	* README.md (Command Line): Document change of meaning for
	`--verbose`.
	* specl/version.lua.in (M.opts): Default verbose to false.
	(M["--help"]): Document changes to command line interface.
	(M["--verbose"]): Don't change formatter, set verbose mode.
	(M["-f"]): An alias for `--formatter`.
	* specl/formatter/progress.lua, specl/formatter/report.lua
	(footer): Only show the failure summary in verbose mode.
	* GNUmakefile (specl_verbose_0): Pass `--verbose` to get failure
	summary.
	* specl/std.lua (process_args): Support short option arguments.
	(specl_verbose_1): Additionally, switch to the report formatter.

	rockspecs: fix a typo, and remove unused configure flags.
	* specl-rockspec.lua (dependencies): spell ansicolors correctly.
	(build.build_command): Remove unused YAML flags.

	configury: distribute specl/util.lua.
	* specl/specl.mk (nobase_dist_lua_DATA): Add specl/util.lua.

	refactor: move common formatter helpers into specl.util module.
	* specl/util.lua (map, strip1st, indent, nop): New file.
	* specl/formatter/progress.lua, specl/formatter/report.lua,
	specl/formatter/tap.lua: Import those functions from specl.util
	and remove local copies.
	* specl/formatter/progress.lua (expectations, footer): Display
	a failed expectation summary in the footer output.

	formatters: redisplay failed test reports in output footer.
	* README.md (Custom Formatters): Document accumulator feature of
	new custom formatter API.
	* specl/formatter/report.lua (map, strip1st): New functions,
	copied from tap.lua.
	(expectations): Return a separate but unindented concatenated
	string of all failure reports.
	(footer): Summarize failure reports.
	* specl/specl.lua (accumulator): New function to accumulate a
	string from pieces.
	(run_contexts, run_examples): Pass returned strings from formatter
	API calls to accumulator.
	(run): Initialise the formatter accumulated string, and then pass
	the result to formatter.footer.

	docs: many fine improvements to README.md.
	* README.md: Proof read the file carefully, and make corrections
	for grammar, spelling and clarity.

	docs: improve installation instructions.
	* README.md (Installation): New section.  Describe installation
	options.  Renumber following sections.

	refactor: generalize std.lua, move Specl specifics to version.lua.
	* specl/std.lua (optarg): Remove.
	(process_args): Remove Specl specific option processing, in favor
	of tabulated general option processor.
	* specl/version.lua.in (M): Tabulate option processing in terms
	of handler functions.
	(M.opts): Default option settings.

	refactor: simplify option processing.
	* specl/version.lua.in (M.PACKAGE, M.PACKAGE_NAME)
	(M.PACKAGE_BUGREPORT, M.VERSION, M.Name, M.program)
	(M.COPYRIGHT_STRING, M.COPYRIGHT_NOTICE, M.BUGREPORT_NOTICE):
	Remove.
	* specl/std.lua (prog.version, prog.usage): Move from here...
	* specl/version.lua.in (M.version, M.usage): ...to here, and
	simplify.

	formatters: color output on ANSI terminals.
	* specl-rockspec.lua (dependencies): Add ansicolor.
	* specl/std.lua (prog.usage): Describe new --color option.
	(optarg): Factor out extraction of argument options after '='.
	(process_args): Use it for --formatter processing.
	Add support for --color option.
	* specl/specl.in (opts): Make global, for visibility in color.lua.
	* specl/color.lua (color): New file.  Enable or disable colored
	output according to opts.color setting.
	* specl/specl.mk (nobase_dist_lua_DATA): Add color.lua.
	* specs/specl_spec.yaml: Add `--color=no` to specl invocations for
	saner output comparison checks.
	* specl/formatter/progress.lua: Color output when --color=no was
	not specified.
	* specl/formatter/report.lua: Likewise.

2013-03-17  Gary V. Vaughan  <gary@gnu.org>

	yaml: spun off into a separate project.
	Rather than ship and build our own yaml binding, spin it off to
	http://github.com/gvvaughan/lyaml and depend on a new luarock
	built from that.
	* yaml/yaml.mk: Remove.
	* Makefile.am: Adjust.
	* specl/specl.mk (SPECL_CPATH): Remove.
	(specl_install_edit, specl_inplace_edit): Adjust.
	(specl_specl_DEPS): Remove yaml/lyaml.la.
	* yaml/lua52compat.h, yaml/lyaml.c: Remove.
	* configure.ac (LT_INIT): Remove, along with supporting configury.
	(AC_CONFIG_HEADERS): Remove.
	* specl-rockspec.lua (external_dependencies.YAML): Remove.
	(dependencies): Add lyaml.

	rockspecs: remove debug line.
	* build-aux/mkrockspecs.lua: Remove left-over debug line.

	maint: add AUTHORS file.
	* AUTHORS: New file.

	formatters: strip 1st word from descriptions in formatters.
	* specl/specl.lua (run_contexts, run_examples): Don't strip 1st
	words, just pass full description tables to formatters.
	* specl/formatters/progress.lua (spec, example): Remove.
	* specl/formatters/tap.lua (header, spec, example): Remove.
	(map, strip1st): Strip 1st word from each element of a table.
	* specl/formatters/progress.lua (expectations): Rename `desc`
	parameter to `descriptions`.
	* specl/formatters/report.lua (indent, spec, example)
	(expectations): Likewise.
	* specl/formatters/tap.lua (expectations): Likewise.
	* specl/formatters/report.lua (spec, example): Strip 1st word
	from descriptions before printing.
	* specl/formatters/tap.lua (expectations): Likewise.
	* specl/formatters/progress.lua (nop): Null operation function.
	(M): Use nop as appropriate.
	* specl/formatters/tap.lua (nop, M): Likewise.

	specl: don't inject a Lua return keyword into a YAML spec.
	Assume specs are written in YAML, and only fallback to legacy
	Lua format if that fails.
	* specl/specl.in (slurp): Try yaml.load first, and loadstring
	with an injected return keyword only if yaml.load failed.
	Reported by François Perrad.

2013-03-16  Gary V. Vaughan  <gary@gnu.org>

	docs: document improved custom formatter API.
	* README.md (Custom Formatters): Document improved custom formatter
	API from François Perrad.

	formatters: support loading builtin formatters by basename.
	* specs/specl_spec.yaml: New specification for using a custom
	formatter by basename on the command line.
	* specl/specl.mk (specl_install_edit): Do as the documentation
	states, and allow loading of builtin formatters with a simple
	`--formatter=tap` command line option.

2013-03-16  Gary V. Vaughan  <gary@vaughan.pe>

	Merge pull request #3 from fperrad/tap
	TAP formatter

2013-03-16  Francois Perrad  <francois.perrad@gadz.org>

	add TAP formatter

	refactor formatter
	replace the string 'indent' by the array 'desc'

2013-03-15  Gary V. Vaughan  <gary@gnu.org>

	docs: be more relaxed about literal block markers.
	* README.md: Improve description of when `|' is necessary, and
	remove them from embedded examples.
	* specs/environment_spec.yaml, specs/matchers_spec.yaml,
	specs/specl_spec.yaml: Remove unnecessary `|' markers and use
	fewer new-lines.

	specs: specify behaviour of require calls in examples.
	* specs/environment_spec.yaml (when requiring a module): New
	specifications for use of require.
	* README.md (Environments versus `require`): Document that extra
	care is required when testing behaviour of required modules.

	environments: intercept load* calls in spec-files.
	Make sure that side-effects from executing a load* function
	variant in a spec-file example occur in the example environment.
	* specl/specl.in (clone): Remove.
	(sandbox): No need for a deep clone, because Specl is hygienic
	and puts everything in locals or the global specl table *after*
	the sandbox is created.
	* specl/specl.lua (run): Save references to the unwrapped core
	load* functions...
	(initenv): ...so they can be intercepted and wrapped specifically
	for each environment table.
	(run_examples): Call initenv() before running an example.
	* specs/environment_spec.yaml: A slew of examples to verify
	correct symbol access with load* variants.

2013-03-14  Gary V. Vaughan  <gary@gnu.org>

	specl: isolate specl modules into their own namespace.
	To avoid potential clashes with modules along the load-path of a
	specl client, refer to specl's own modules using the specl name-
	space.
	* specl/specl.in: Use `require "specl.std"`.  specl.lua is
	already in the specl namespace, so no need to prefix that one.
	* specl/specl.lua: Likewise for specl modules required here.
	* specl/std.lua: Likewise.
	* specl/specl.mk (SPECL_PATH): Support prefixed requires in the
	build tree.
	(specl_install_edit): Likewise, for the install tree.
	(nobase_dist_lua_DATA): Move specl/specl.lua from here...
	(dist_lua_DATA): ...to here, so that specl.lua is not installed
	into the specl subdirectory, and `require "specl"` works
	correctly.

2013-03-13  Gary V. Vaughan  <gary@gnu.org>

	specs: make sure Lua specs are compiled correctly.
	Using '$^' passes all dependencies as a single non-existent
	filename - garbage in, garbage out.
	* specs/specs.mk (.yaml.lua): Use '$<', which passes the correct
	yaml input for compilation to Lua.

	configury: move gmake-only SPECL_OPTS rules to GNUmakefile.
	* specs/specs.mk (SPECL_OPTS, specl_verbose_, specl_verbose_0)
	(specl_verbose_1): Move from here...
	* GNUmakefile: ..to here.

	specl: implement our own getopt with no dependencies.
	Lua stdlib getopt.lua ends up pulling in several more stdlib
	modules, which we don't want if specl is to be useful as the
	BDD tool for stdlib itself.  And after removing getopt, it turns
	out we still had a handful of hidden dependencies on stdlib
	ext module behaviours.
	* specl/std/getopt.lua: Remove.
	* specl/std.lua: Implement our own slurp, warn, process_args and
	process_files functions.
	* specl/specl.in (prog): Move from here...
	* specl/std.lua (prog): ...to here.
	* specl/specl.in: Simplify with the help of bespoke std.lua.
	* specl/specl.mk (nobase_dist_lua_DATA): Adjust.
	* build-aux/speclc.in: Use our mini std.lua.
	(reserved): Use a table with true valued keys. instead of a std
	set. Adjust all callers.
	* specl/matchers.lua (M): Inject public APIs as we go, rather
	than relying on stdlib table.merge to assemble the M table.
	* specl/spel.lua (M): Likewise.
	* specs/specl_spec.yaml (specl): Don't rely on stdlib nil concat
	behaviour.

2013-03-12  Gary V. Vaughan  <gary@gnu.org>

	specl: break dependency on std sets.
	Being intertwined with lua-stdlib makes it hard to use specl for
	the std specs.
	* specl/specl.lua (reserved): Use a table with true valued keys,
	instead of a std set.

2013-03-10  Gary V. Vaughan  <gary@gnu.org>

	environments: make runner environments more robust.
	Make sure each nested example block uses the same environment
	for before, definition and after calls, and passes the correctly
	initialised environment (after befores have run) to nested
	contexts.
	* specs/environment_spec.yaml: Uncomment previously failing
	examples.
	* specl/specl.in (clone): New function, copied from stdlib
	tree.lua.
	(sandbox): Before loading anything, make a deep copy of the
	pristine global environment to use as a sandbox for running
	examples.
	* specl/specl.lua (run): Add an env parameter, and pass that to
	run_contexts.
	(run_contexts): Remove dead code.
	(run_examples): Set up the sandbox for the current example group
	from the env parameter, and use it for each example before,
	definition and after block.
	Fix a bug that passed the wrong environment to recursive
	run_context calls.

2013-03-10  Reuben Thomas  <rrt@sc3d.org>

	configury: ensure lua includes match lua binary version.
	* configure.ac (AX_LUA_HEADERS): Invoke this macro.

	configury: AC_CONFIG_MACRO_DIRS is not released yet!
	* configure.ac (AC_CONFIG_MACRO_DIRS): Replace this...
	(AC_CONFIG_MACRO_DIR): ...with the buggy old API call.

	specl: factor away getopt.Option constructor.
	* specl/std/getopt.lua: Update to latest upstream.
	* specl/specl.in (prog.options): Use bare tables, per stdlib-34
	API.

2013-03-09  Gary V. Vaughan  <gary@gnu.org>

	docs: document current dir removal for custom formatters.
	* README.md (Command Line): Make note of the fact that loading
	custom formatters from the current directory requires a little
	extra path munging in the environment.

	specl: break dependency on lua-stdlib.
	* specl/matchers.lua: Do not require std.
	* specl/std/getopt.lua: A copy of stdlib-33 getopt.lua.
	* specl/specl.in: Require local copy of getopt instead of all of
	stdlib.
	* specl/specl.mk (nobase_dist_lua_DATA): Add specl/std/getopt.lua.
	* specl-rockspec.lua (dependencies): Remove std dependency.
	* TODO.yaml: Remove completed TODO item.

	TODO: more TODO items.
	* TODO.yaml: Put some new pressing TODO items at the top of the list.

	specl: support --formatter=FILE option.
	* specl/specl.in (prog): Add new formatter option.
	If formatter was passed, try to load the passed formatter.
	Pass the eventual formatter to specl.run.
	* specs/specl_spec.yaml (when using a custom formatter): Check
	that custom formatters are called correctly.
	* README.md (Custom Formatters): New section describing how to
	write a custom formatter.

	maint: support 'make check V=1' and 'SPECL_OPTS=-v make check'
	* specs/specs.mk (SPECL_OPTS): Unless set in the environment already,
	pass -v to specl according to whether or not V=1 was given to make.
	(check-local): Use it.

	formatters: factor out into separate modules.
	For Automake to install subdirectories correctly with a _DATA
	primary, the nobase_ prefix only works when the source and
	destination directories have the same name, so we have to rename
	'src' to 'specl' in order that the new specl/formatters/*.lua
	sources are installed correctly.
	* specl/specl.mk (dist_pkglua_DATA): Rename from this...
	(nobase_dist_lua_DATA): ...to this.
	* src/.gitignore, src/matchers.lua, src/specl.in, src/specl.lua,
	src/specl.mk, src/version.lua.in: Move from here...
	* specl/.gitignore, specl/matchers.lua, specl/specl.in,
	specl/specl.lua, specl/specl.mk, specl/version.lua.in: ...to here.
	* Makefile.am, configure.ac, specl/specl.mk, specs/specs.mk,
	specs/specl_spec.yaml: Adjust.
	* specl/specl.lua (M): Remove progress and report.
	(progress): Move from here...
	* specl/formatter/progress.lua: New file.  ...to here.
	* specl/specl.lua (report): Move from here...
	* specl/formatter/report.lua: New file.  ...to here.
	* specl/matchers.lua (expectations, stats): Initialise inside the
	module table.
	(expect): Update inside the module table.
	(M): Adjust.
	* specl/specl.in: Load and pass report formatter to specl.run()
	on demand.
	* specl/specl.mk (nobase_dist_lua_DATA): Add
	specl/formatter/progress.lua and specl/formatter/report.lua.
	(specl_specl_DEPS): Adjust.

	matchers: factor out into a separate module.
	Get rid of ugly global stats and expectations place holders, and
	factor matchers out into their own module.
	* src/specl.lua (objcmp, q, matchers, expect, expectations)
	(stats): Move from here...
	* src/matchers.lua (objcmp, q, M.matchers, M.expect, M.expectations)
	(M.stats): ...to here.
	* src/specl.lua (run_examples, run): Adjust.
	(M): Remove matchers.
	* src/specl.mk (dist_pkglua_DATA): Add src/matchers.lua.

	specl: set specl._VERSION correctly.
	* src/specl.lua (version): require version.lua.
	(M._VERSION): Set from version table.

	maint: ignore .DS_Store files.
	* .gitignore: Add .DS_Store.

	specl: ensure lyaml is built before running specl.
	Parallel make gets carried away without a full and complete
	dependency graph, so be sure to specify that specl doesn't work
	until lyaml.la is built.
	* src/specl.mk (src_specl_DEPS): Add yaml/lyaml.la.
	Reported by Reuben Thomas at https://github.com/gvvaughan/specl/issues/1.

2013-03-07  Gary V. Vaughan  <gary@gnu.org>

	maint: bump version to 3.
	* configure.ac (AC_INIT): Bump version number to 3.

2013-03-06  Gary V. Vaughan  <gary@gnu.org>

	rockspecs: correct source.url and source.dir for github.
	* specl-rockspec.lua (source.url, source.dir): Remove '-1' suffix.

	maint: distribute README.md.
	* Makefile.am (EXTRA_DIST): Add README.md.

	rockspecs: build from github zip file.
	Rather than require git clone to checkout the source tree at
	rockspec install time, download the automatic github zip file.
	* specl-rockspec.lua (source): Extrapolate zip file location.
	(source.branch): Remove.
	* src/specl.mk (specl_install_edit): Use pkgluadir and libdir
	to match luarocks installation dirs.
	* yaml/yaml.mk (luaexec_LTLIBRARIES): Rename from this...
	(lib_LTLIBRARIES): ...to this, or luarocks doubles up the
	installation subdirectories to lua/5.x/lua/5.x!

	rockspecs: fix missing quote in build_command.
	* specl-rockspec.lua (build.build_command): Add missing quote.

	maint: don't distribute compiled Lua specs.
	* specs/specs.mk (SPECLC): Path to speclc program.
	(specl_SPECS): Remove Lua spec files.
	(specl_LUASPECS): List Lua spec files.
	(.yaml.lua): Make sure there is a specs dir in the build tree.
	(DISTCLEANFILES): Remove generated lua spec files.

	maint: distribute specl-rockspec.lua.
	* Makefile.am (EXTRA_DIST): Add specl-rockspec.lua.

	specl: always pass a (small) number to os.exit().
	os.exit in Lua 5.1 doesn't accept a boolean, so we pass it 1 if
	there are any failures, otherwise 0.
	* src/specl.lua (run): Return a small integer suitable for os.exit.
	* src/specl.in: Remove completed TODO.

	specl: use loadstring for Lua 5.1 compatibility.
	* src/specl.lua (loadstring): If loadstring is not defined, then
	this must be Lua 5.2, so define a loadstring work-a-like around
	load.
	* src/specl.in (slurp): Use loadstring, either from Lua 5.1 core,
	or the wrapper above.

2013-02-28  Gary V. Vaughan  <gary@gnu.org>

	maint: more TODO items.
	* TODO.yaml: New items.

	specl: support continued (undocumented!) specl-1 _spec.lua specs.
	* src/specl.in (slurp): First try to load as pure Lua, and if
	that fails, fall back to the YAML loader before erroring.
	* src/specl.lua (copile_specs, compile_examples, compile_example):
	Factor out compilation phase for YAML specs.
	* build-aux/speclc.in: New file. %_spec.yaml to %_spec.lua
	compiler (requires lyaml!).
	* specs/specs.mk (build-aux/speclc): Build it from speclc.in.
	(.yaml.lua): New rule to compile all yaml specs to lua to make
	sure Lua specs continue to be fully functional.
	(specl_SPECS): Add lua specs.
	* build-aux/.gitignore: Add speclc.
	* specs/environment_spec.yaml: Comment out a spec that fails
	when loaded as a lua spec, but passes as a yaml spec :-?
	* TODO.yaml: Remove done items.

	maint: keep track of TODO items in the repository.
	* TODO.yaml: New file. List pending TODO items.

	yaml: compile lua fragments on the fly instead of requiring `!lua`.
	* yaml/lyaml.c (load_scalar): Remove `!lua` precompiling support.
	* src/specl.lua (compile_example): New function to compile an
	example.
	(run_examples): Use it when encountering an uncompiled example.
	* specs/environment_spec.yaml, specs/matchers_spec.yaml,
	specs/specl_spec.yaml: Remove all `!lua` tags.
	* specs/specl_spec.yaml: New expectations for yaml specs on CLI
	standard input.
	* README.md: Update documentation. Particularly removing the
	notes about dealing with quirks of `!lua`.

	specs: specify exit statuses
	* specs/specl_spec.yaml (describe specl): New examples to specify
	exit status of specl.
	(describe matchers): Move everything else from here...
	* specs/matchers_spec.yaml: ...to here.

	maint: GNUmakefile improvements.
	* GNUmakefile (unpack-distcheck-release): Be sure to rebuild rockspecs.
	(check-in-release): Commit all unpacked files on the release branch.

	rockspecs: allow arbitrary revision numbers.
	* build-aux/mkrockspecs.lua (qualified_version): New value.
	Extract this from the template, in case this is not a revision -1
	rockspec.

2013-02-26  Gary V. Vaughan  <gary@gnu.org>

	specl: return non-zero exit status when there are failing specs.
	* src/specl.lua (run): Return false when there are failing tests.

	maint: call woger properly at release time.
	* GNUmakefile (WOGER_ENV): Lua environment settings for extracting
	woger release variables.
	(WOGER_OUT): Lua call for feretting out the rockspec file
	settings used by woger.
	(release): Fully populate all the fields needed to make a correct
	woger release of Specl.

2013-02-25  Gary V. Vaughan  <gary@gnu.org>

	docs: update README to document new YAML syntax spec files.
	* README.md: Updated to document new YAML syntax spec files.

	configury: user-overridable search for install libyaml.
	* configure.ac (AC_CHECK_HEADERS): Look for yaml.h.
	(AC_SEARCH_LIBS): Abort with an error if libyaml is not found.
	* yaml/yaml.mk (yaml_lyaml_la_LIBADD): Remove hardcoded -lyaml.
	* specl-rockspec.lua (external_dependencies): Add yaml.
	(build.build_command): Pass through YAML options from rockspec
	make command.

	specs: factor out specification checking to a separate makefile.
	* src/specl.mk (Specs): Move this section from here...
	* specs/specs.mk: New file.  ...to here.
	* Makefile.am: Include specs/specs.mk.

	specs: a minimal environment sharing spec.
	* specs/environment_spec.yaml: New file. Ensure before, after,
	examples in the same scope share execution environments
	correctly.
	* src/specl.mk (specl_SPECS): New macro. List all spec files.
	(EXTRA_DIST): Adjust.
	(check-local): Add dependencies. Remove unnecessary environment
	setting. Pass a static list of spec files.

	specl: read yaml format spec files.
	* yaml/lua52compat.h, yaml/yaml.c: New files.  Sources for yaml
	module.
	* yaml/yaml.mk: New file. Build yaml module.
	* Makefile.am: Include it.
	(lib_LTLIBRARIES): Initialise.
	* configure.ac (AC_INIT): Bump version to 2.
	(AM_INIT_AUTOMAKE): Use subdir-objects.
	(LT_PREREQ, LT_INIT): Add libtool setup.
	(AC_PROG_CC, AC_HEADER_STDC): Add C compiler setup.
	(AC_CONFIG_HEADERS): Make config.h.
	* specs/specl_spec.lua: Move from here...
	* specs/specl_spec.yaml: ...to here. Reformat to yaml.
	* src/specl.mk (check-local): Move from here...
	* specs/specs.mk: New file. ...to here.
	* src/specl.lua (run_examples): YAML doesn't provide a pleasant
	way to format reserved descriptions (before, after) outside of
	the ordered list of actual examples, so we have to make a first
	pass over the list to extract them, and then be careful not to
	run them again in the main loop.

	specl: fix --version and --help formatting with stdlib-33 getopt.
	* src/specl.in (prog.version): Separate out copyright notice...
	(prog.copyright): ...to here.
	(prog.description): Latest stdlib getopt doesn't need double
	newline paragraph separators.
	* src/version.lua.in (M.COPYRIGHT_NOTICE): Rejustify slightly.
	Point to gnu licenses webpage rather than COPYING file, which
	might have been lost during installation!

	rockspecs: add dependency on latest stdlib rock.
	* specl-rockspec.lua (dependencies): Add stdlib.

	maint: don't check release tarball file in on release branch.
	* .gitignore: Ignore specl-*.tar.gz.
	* build-aux/.gitignore: Don't ignore manually imported
	gitlog-to-changelog.

	specl: update to cleaner stdlib-33 getopt formats.
	* src/version.lua.in (M.COPYRIGHT_NOTICE): Remove stray '\n'.
	* src/specl.in (prog): No longer needs to be a magic global.
	(options): Ditto.  Move from here...
	(prog.options): ...to here.
	(prog.purpose, prog.description): Reword to match rockspec.
	(prog.version): Add this for --version output.
	(prog.banner): Remove.

	maint: fix typos in GNUmakefile.
	* GNUmakefile (unpack-distcheck-release): Add missing \s, ` and '.
	(Makefile.in): Only one '-' in '-Wall'.

	configury: install correctly from './configure; make all install'.
	The latest 'm4/ax_lua.m4' sets up pkgluadir to point into Lua's
	module directory.
	* Makefile.am (install_edit, inplace_edit): Remove useless
	@pkgdatadir@ and @pkgdocdir@ substitutions.
	* src/specl.mk (specldatadir): Remove.
	(specl_install_edit, specl_inplace_edit): Use pkgluadir instead.
	(dist_specldata_DATA): Rename from this...
	(dist_pkglua_DATA): ...to this.
	* src/specl.in (package.path): Inject pkgluadir substitution.
	(PATH_DATA, PATH_DOCDIR): Remove.  Unused variables.

	configury: add rockspec machinery.
	* specl-rockspec.lua: New file. Rockspec data.
	* build-aux/mkrockspecs.lua: New file. Reuben's templating
	rockspec building script.
	* GNUmakefile (luarocks-config.lua, rockspecs): Use it to build
	rockspecs.
	* src/specl.mk (EXTRA_DIST): Add build-aux/mkrockspecs.lua.

2013-02-24  Gary V. Vaughan  <gary@gnu.org>

	specs: specl specs for specl.
	* src/specl.mk (check-local): Run specs with 'make check'.

	configury: use ./bootstrap && ./configure && make & sudo make install.
	* bootstrap: New file, from Libtool master HEAD.
	* bootstrap.conf: New file.  Configure bootstrap for Specl.
	* build-aux/gitlog-to-changelog: New file.  Required for
	'make dist'.
	* configure.ac: New file. Check Specl build prerequisites.
	* m4/ax_compare_version.m4, m4/ax_lua.m4, m4/ax_with_prog.m4:
	New files. Used by configure.ac.
	* src/version.lua.in: New file.  Configured constants.
	* specl: Moved from here...
	* specl.in: ...to here.  Rework to use src/version.lua.in.
	* Makefile.am: New file. Top-level non-recursive Makefile.
	* src/specl.mk: New file. Make fragment for specl directory.
	* .gitignore, build-aux/.gitignore, src/.gitignore: New files.

2013-02-22  Gary V. Vaughan  <gary@gnu.org>

	specl: set _G._SPEC to allow modules to expose additional APIs.
	When a non-public API is being specified, we need a way to inform
	the module to give the specification access to it.
	* specl (_G._SPEC): Set this to true.
	* src/specl.lua (M): Put _expect into the module table if it is set.
	(matchers.contain): Improve wording of error message.
	* specs/specl_spec.lua (describe contain matcher): Add spec for
	error message.
	* src/specl.lua (matchers.match): Improve wording of error message.
	* specs/specl_spec.lua (describe match matcher): Add spec for error
	message.

	maint: store the version number in the interface table.
	* src/specl.lua (M): Add _VERSION key.
	* specl (prog): Use it in the --version output.

	matchers: compare table key/value contents using contain matcher.
	* src/specl.lua: When checking expectations against a table,
	compare against each key and value in the table.
	* specs/specl_spec.lua: Remove fake specs.
	Specify behaviour of contain matcher.
	* specl: Remove obsolete TODO entries.
	* README.md: Document it.

	formatters: Be consistent when reporting met expectations.
	* src/specl.lua (report): Add "Met" prefix to output.
	(progress): Write "expectations met", not "examples worked".

	matchers: make the contain and match matchers useable.
	Fix some silly bugs preventing these matchers from working
	properly.
	* src/specl.lua (matchers.match): Use VALUE consistently for
	parameter name.
	Set the return condition properly.
	(matchers.contain): Likewise.
	string.match patterns are not anchored, so no need to bookend
	with .*.

2013-02-21  Gary V. Vaughan  <gary@gnu.org>

	docs: initial draft documentation in README.
	* README.md: Rewritten with initial draft documentation.

2013-02-20  Gary V. Vaughan  <gary@gnu.org>

	matchers: make the error matcher useable.
	* src/specl.lua (matchers.error): Take arguments in reverse, so
	that 'should_error' is called like pcall, and 'expect' is a
	substring to match against any resulting error message.
	(report.expectation): Since error messages can be very long,
	reindent multiple lines as best as possible.

	matchers: work properly with _not_ expectations.
	* src/specl.lua (q): New function to quote strings in failure
	messages nicely.
	(matchers): Always return the failure status message, even if
	the matcher succeeded, since it may be inverted later with a 'not'.

	formatters: nicer fail message for report formatter.
	* src/specl.lua (report.expectations): Reformat slightly for
	better english, and to stand out better.

	formatter: group and format expectations every example.
	Fix a bug that counts a FAILed expectation incorrectly. Restart
	the counter for every example, not just at the start of the
	entire group.
	* src/specl.lua (run_examples): Don't save up all the expectations
	from the entire group before displaying, format them after every
	example completes.

	environments: fix the environment sharing TODO.
	* src/specl.lua (run_examples): Pass the correct block environment
	into the block, so that befores share settings with examples and
	afters correctly, and then reset when they go out of scope.
	* specl: Remove TODO.

	specl: implement an alternate format, selected by -v option.
	* specl (options): Accept -v or -verbose.
	* src/specl.lua (run): Add new format parameter.  Assuming what
	is passed conforms to the API, that formatter will be called as
	the examples are executed.
	(formatter): Move from here...
	(report): ...to here.
	(progress): New formatter that just prints dots as examples pass,
	or F as they fail.
	(formatter): Default formatter is the new progress formatter.
	(M): Put the two formatters in the public interface.
	* specl: Request the old report formatter in verbose mode.

	maint: refill copyright notices.

	specl: write a command line interface.
	* src/specl.lua: Don't clobber the global namespace with anything.
	(M): Record and return APIs.
	(Fake specs): Move from here...
	* specs/specl_spec.lua: New file. ...to here.
	* specl: New file. Load the specl module, and use it to process
	each spec file passed on the command line.
	* README.md: Update.

	maint: fix mistakes in pasted copyright header.
	* src/specl.lua: Actually, not part of GNU Zile, and didn't exist
	at all for the first 4 years of the 2009-2013 copyright range.

	maint: add README.
	* README.md: New file. Barely useful at the moment...

	specl: initial import.
