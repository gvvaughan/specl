2015-10-26  Gary V. Vaughan  <gary@gnu.org>

	Release version 14.1.3
	* NEWS.md: Record release date.

	slingshot: sync with upstream.
	* slingshot: Sync with upstream for release rules fix.

	configury: bump release version to 14.1.3.
	* configure.ac (AC_INIT): Bump release version to 14.1.3.
	* .travis.yml: Regenerate.

	util: fix stack overflow when tables are their own metatable.
	* lib/specl/util.lua (deepcopy): Note when a table is its own
	metatable, and instead of copying the metatable, simply set the
	metatable of the copy to itself before returning.
	* NEWS.md (Bug fixes): Update.

2015-08-08  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 14.1.2
	* NEWS.md: Record release date.

	configury: bump release version to 14.1.2.
	* configure.ac (AC_INIT): Bump release version to 14.1.2.
	* .travis.yml: Regenerate.

	override eqv, tostring and type from stdlib.
	* lib/specl/std.lua (object.type, string.tostring): Inject
	backwards compatible implementations over imports from
	unreleased stdlib.
	(operator.eqv): Inject forwards compatible implementation over
	imports from released stdlib.
	* lib/spec/matchers.lua (objcmp): Replace calls to this...
	(std.operator.eqv): ...with calls to this.
	* NEWS.md (Bug fixes): Update.

2015-08-02  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 14.1.1
	* NEWS.md: Record release date.

	configury: distribute specl test harness.
	* local.mk (EXTRA_DIST): Add specl.

	matchers: match mutable table keys correctly.
	* specs/matchers_spec.yaml (equal): New example of deep comparison
	with table keys as well as values.
	* lib/specl/matchers.lua (totable): Pickle mutable keys before
	comparison so that they compare as equal when matching.
	* NEWS.md (Bug fixes): Update.

	configury: bump release version to 14.1.1.
	* configure.ac (AC_INIT): Bump release version to 14.1.1.
	* .travis.yml: Regenerate.

	configury: travis needs to install LDoc.
	* bootstrap.conf (travis_extra_rocks): Add ldco.
	* .travis.yml: Regenerate.

	slingshot: sync with upstream, for lua 5.3.1 support.
	* slingshot: Sync with upstream.
	* .travis.yml: Regenerate.

2015-01-03  Gary V. Vaughan  <gary@gnu.org>

	Release version 14.1.0
	* NEWS.md: Record release date.

	slingshot: sync with upstream, for latest 5.3.0 release tarball.
	* slingshot: Sync with upstream.
	* bootstrap: Sync with slingshot.
	* .travis.yml: Regenerate.

	configury: bump release version to 14.1.0.
	* configure.ac (AC_INIT): Bump release version to 14.1.0.
	* .travis.yml: Regenerate.

	configury: add ldoc to bootstrap prerequisites.
	* bootstrap.conf (buildreq): Add ldoc.

	badargs: support invalid field diagnostics.
	* lib/specl/badargs.lua (format): Return an invalid field error
	message when called with a field name but no expected type arg.
	* NEWS.md: Update.

	matchers: support new `raise_matching` matcher.
	* specs/matchers_spec.yaml (error): Correct specifications to
	exercise `error` matcher instead of `raise`.
	(raise): Specify behaviour with pattern meta-characters.
	(raise_matching): Specify behaviours for pattern matching error
	matcher.
	* lib/specl/matchers.lua (matchers.raise_matching): Implement new
	matcher to meet specifications.
	* doc/specl.md (raise_matching): Document new matcher.
	* NEWS.md: Update.

	refactor: simplify raise matcher implementation.
	* lib/specl/matchers.lua (matchers.raise): Remove spurious .*
	elements from match pattern.

	badargs: accept '?' as function name from Lua in diagnose.
	LuaJIT in particular often fails to find the name of a function,
	so we must accept '?' when checking error message contents.
	* lib/specl/badargs.lua (diagnose): Accept either the correct
	name of the function, or '?' in error messages raised when
	forcing argument errors.
	* NEWS.md: Update.

	specl: remove underscore substitution in example descriptions.
	* lib/specl/runner.lua (run_examples): Remove underscore
	substitutions, once and for all!

2015-01-01  Gary V. Vaughan  <gary@gnu.org>

	configury: Add ansicolors to travis_extra_rocks.
	* bootstrap.conf (travis_extra_rocks): New setting.  Install
	ansicolors rock on travis for color in specl output.
	* .travis.yml: Regenerate.

	maint: update version output copyright year.
	* lib/specl/version.lua.in (optspec): Bump copyright year to 2015.

	maint: update copyrights.
	* bootstrap.conf, configure.ac, lib/specl/badargs.lua,
	lib/specl/color.lua, lib/specl/compat.lua,
	lib/specl/formatter/progress.lua,
	lib/specl/formatter/report.lua, lib/specl/inprocess.lua,
	lib/specl/loader.lua, lib/specl/main.lua,
	lib/specl/matchers.lua, lib/specl/runner.lua,
	lib/specl/shell.lua, lib/specl/util.lua,
	lib/specl/version.lua.in, local.mk, specl.in, specs/specs.mk:
	Add 2015 to copyright statement.

2014-12-31  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 14.0.0
	* NEWS.md: Record release date.

	specs: make some spurious travis failures pending.
	* specs/badargs_spec.yaml: Until we understand why these examples
	fail on Travis (but not on my own Ubuntu 12.04 test VM), mark some
	spurious failures as pending, even though they work otherwise!

	specl: make re-execute code Lua 5.3 and luajit compatible.
	* bin/specl: Accept 'Lua 5.3' version string from REPL.
	Try lua5.3 and luajit in command PATH search.
	Unset LUA_INIT_5_3.

	NEWS.md: Reformat in github markdown.
	* NEWS: Move from here...
	* NEWS.md: ...to here.  Reformat in github markdown.
	* local.mk (old_NEWS_hash): Update.
	* .gitignore: Add NEWS.

	specl: line numbers and filters use integer keys.
	* lib/specl/loader.lua (parser_mt.error): Use string.format to
	convert integers for error messages.
	(parser_mt.compile): Likewise.
	(parser_mt.parse): Set lines and columns to integers.
	(Parser): Set mark line and column to integer 0.
	* lib/specl/main.lua (process_args): Make sure line number filters
	are stored with integer keys.

	specs: remove unsupported underscores in example descriptions.
	* specs/runner_spec.yaml (runner): Remove unsupported underscores
	in example descriptions.

	specs: adjust for Lua 5.3 compatibility.
	* specs/spec_helper.lua (unpack): Load a working `unpack` function
	into the spec environment.
	* specs/inprocess_spec.yaml: Convert whole floats to integers
	before display.

	compat: intercept and correct package.loaders on Lua 5.3.
	Lua 5.3 has renamed package.loaders to package.searchers.
	* lib/specl/compat.lua (package_mt): Metatable to redirect
	references to package.loaders on Lua 5.3, and vice versa for
	package.searchers on Lua 5.1 and 5.2.
	(intercept_loaders): Apply the metatable.
	* lib/specl/loader.lua (Parser): Apply the metatable in the before
	preamble.
	* lib/specl/runner.lua (initenv): Likewise when initialising new
	execution environments.

	refactor: encapsulate a portable unpack symbol in specl.compat.
	* lib/specl/compat.lua (unpack): Set to an appropriate function
	that works on Lua 5.1 through 5.3.
	* lib/specl/badargs.lua (unpack): Use compat.unpack everywhere.
	* lib/specl/inprocess.lua (unpack): Likewise.
	* lib/specl/runner.lua (unpack): Remove unused symbol.

	configury: support Lua 5.3.
	* configure.ac (AC_INIT): Bump version to 14.0.0.
	(AX_PROG_LUA): Support Lua 5.3.
	* NEWS: Update.

	slingshot: sync with upstream, for Lua 5.3.0 support.
	* slingshot: Sync with upstream.
	* bootstrap: Update from slingshot.
	* bootstrap.conf (require_bootstrap_uptodate): Remove.
	(slingshot_files): Remove unused slingshot.m4.
	* configure.ac (SS_CONFIG_TRAVIS): Remove.
	* specl-git-1.rockspec: Regenerate.
	* .travis.yml: Regenerate.

2014-12-24  Gary V. Vaughan  <gary@gnu.org>

	matchers: import std.getmetamethod before use.
	* lib/specl/matchers.lua: stdlib >= 41 no longer monkey patches
	the global table with a getmetamethod function, so import it
	explicitly from std.

	specs: update bit-rotted error messages.
	* specs/spec_helper.lua (spawn_specl, run_spec): Use the correct
	function name for error messages.

	refactor: use pure lambda strings to simplify specl.std.
	* lib/specl/std.lua (M): Use the new std.operator.set to
	load std submodules into specl.std table using only pure lambda
	functions.

	refactor: use std.functional.map and remove specl.util.map.
	* lib/specl/util (map): Remove.
	Adjust all callers and simplify accordingly.
	(examplename): Factor out this common call sequence into a
	utility function.
	Adjust all client code, and simplify accordingly.

	maint: std.string.tostring is deprecated by stdlib 41.
	* lib/specl/match.lua (tostring): Import std.tostring instead of
	deprecated std.string.tostring.
	* lib/specl/util.lua (concat): Likewise.

	maint: std.object >= v41 do not support __totable metamethods.
	* lib/specl/matchers.lua (totable): A compatibility function
	over new std.pairs implementation.

	maint: update to stdlib >= 41.
	* lib/specl/std.lua (init, std.string.require_version)
	(std.list.elems): Refactor from these...
	(_DEBUG, std.require, std.ielems): ...to these.
	(std.functional.bind, std.io.dirname, std.table.len): Remove
	overrides, allow use of exported versions of the same.
	* rockspec.conf (dependencies): Bump stdlib requirement to >= 41.
	* specl-git-1.rockspec: Regenerate.

	inprocess: break an infinite loop in env.io.type.
	* lib/specl/inprocess.lua (env_init): Inside the type method,
	get the `_type` value directly from the metatable instead of
	calling std.object.type, which in turn may call back into the
	env.io.type method.

	specl: diagnose missing luaposix during argument parsing.
	* lib/specl/util.lua (files): Return an error when luaposix was
	required but missing.
	* lib/specl/main.lua (execute): Display any error returned from
	util.files.
	* NEWS: Update.

	specl: use bold rather than bright white for lua errors.
	* lib/specl/color.lua (colormap): Use bold attribute for strong
	markup.

	maint: add missing NEWS items since release v13.
	* NEWS: Note change of treatment of underscores in example
	descriptions.

2014-10-15  Gary V. Vaughan  <gary@gnu.org>

	specl: protect nested calls against keyword abuse in examples.
	* lib/specl/badargs.lua, lib/specl/runner.lua: When running the
	functions exported by these modules in the example function
	environments, bind keywords locally in case the code in the
	example abuses them before the call.

	specl: propagate nested inprocess environments correctly.
	* lib/specl/compat.lua (getfenv): New function to emulate Lua
	getfenv in Lua 5.2.
	* lib/specl/badargs.lua (diagnose): Propagate environment of
	diagnose to calls of expect and examples for the rest of the
	function.
	* lib/specl/runner.lua (run_examples): Set environments of expect,
	pending and examples to block environment.
	(run_example): Likewise for badargs.diagnose.
	* specs/badargs_spec.yaml (diagnose): Specify behaviour
	accordingly.
	* NEWS: Update.

	refactor: eliminate spurious temporary local variable.
	* specs/spec_helper.lua (run_spec): Factor away spurious 'proc'
	local.

2014-10-14  Gary V. Vaughan  <gary@gnu.org>

	badargs: specify format behaviours.
	* specs/badargs_spec.yaml: New file.  Specify format behaviours.
	* specs/specs.mk (specl_SPECS): Add badargs_spec.yaml.
	* lib/specl/badargs.lua (format): Only return "argument" for
	exactly one argument, otherwise "arguments".
	* NEWS: Update.

	specl: remove support for underscores in examples description.
	* lib/specl/runner.lua (run_examples): Remove support for
	replacing underscores with spaces in examples description.
	* specs/formatter/report_spec.yaml, specs/loader_spec.yaml:
	Adjust accordingly.

	maint: unload luaposix > v32 correctly.
	* lib/specl/util.lua: Unload any module with a name prefixed by
	"posix", in order that autoloaded submodules for an installed
	recent luaposix are dropped in favour of test versions as
	necessary.

2014-10-05  Gary V. Vaughan  <gary@gnu.org>

	maint: remove bogus Zile reference from bootstrap.conf.
	* bootstrap.conf: Remove bogus Zile reference.

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* configure.ac (AC_INIT): Bump release version to 14.
	* local.mk (old_NEWS_hash): Auto-update.

2014-10-04  Gary V. Vaughan  <gary@gnu.org>

	Release version 13
	* NEWS: Record release date.

	badargs: helpers for argchecking specs.
	* lib/specl/badargs.lua: New file.
	(init):  Lua core style bad argument error message generator
	factory.
	(diagnosebadargs): Use new programmatic examples to inject specs
	for expected bad argument diagnostics according to `specifier`
	argument.
	* local.mk (dist_specl_DATA): Add lib/specl/badargs.lua.
	* NEWS: Update.

2014-10-01  Gary V. Vaughan  <gary@gnu.org>

	std: add table.len and fix buggy stdlib v40 functional.bind.
	* lib/specl/std.lua (std.functional.bind): Overwrite stdlib v40's
	broken functional.bind with a simplified v41-like implementation.
	(std.table.len): Implement this future stdlib API.

	specl: expand macros when requiring specl submodules.
	* lib/specl/loader.lua (expandmacros): Append package.path to
	search directories for specl submodules.
	* NEWS: Update.

	maint: remove bogus file reference in local.mk.
	* local.mk (dist_specl_DATA): Remove lib/specl/badargs.lua.

	configury: correctly install formatters to formatter subdir.
	* local.mk (luaspecldir, dist_luaspecl_DATA): Rename from these...
	(specldir, dist_specl_DATA): ...to these.
	(formatterdir): New macro.  Formatter subdirectory.
	(dist_specl_DATA): Move formatter/progress.lua,
	formatter/report.lua and formatter/tap.lua from here...
	(dist_formatter_DATA): ...to here.

	std: don't leak _DEBUG settings into global environment.
	* lib/specl/std.lua (_DEBUG): Remove side effecting global.
	(init): Load and access _DEBUG table entries directly.

	maint: store git master rockspec file on git master branch.
	It's really easy for git master to change incompatibly with the
	specl-git-1.rockspec from the previous release, so maintain and
	advertise it on its own branch.
	* .gitignore: Don't ignore specl-git-1.rockspec.
	* specl-git-1.rockspec: Save to version control.
	* README.md: Adjust git rockspec URL.

	std: use correct iterator to erase std modules from package.loaded.
	* lib/specl/std.lua: With stdlib v40, std.functional.filter
	returns a flat list that must be iterated over by std.list.elems
	when passed through to v40 std.functional.map.

	refactor: install as library files and caller script.
	* build-aux/larch, lib/larch/from.lua: Remove. We no longer need
	to compile a single executable from library sources.
	* local.mk: Adjust.
	* lib/specl/formatter/progress.lua, lib/specl/formatter/report.lua,
	lib/specl/formatter/tap.lua, lib/specl/inprocess.lua,
	lib/specl/loader.lua, lib/specl/main.lua, lib/specl/matchers.lua,
	lib/specl/runner.lua, lib/specl/shell.lua, lib/specl/util.lua:
	Manually unroll `from` macro calls, which are no longer expanded
	by larch.
	* specl.in: New in-tree wrapper script.
	* bin/specl: Much simplified wrapper, now checked in.
	* specs/specs.mk: Adjust accordingly.
	* lib/specl/main (optspec): Move from here...
	* lib/specl/version.lua.in: New file. ...to here, where @AUTOCONF@
	variables can expanded.
	* configure.ac (AC_CONFIG_FILES): Add lib/specl/version.lua, and
	specl,
	* .gitignore: Remove bin.  Add specl and lib/specl/version.lua.
	* AUTHORS: Remove references to local stdlib.
	* NEWS: Update.

2014-09-30  Gary V. Vaughan  <gary@gnu.org>

	specs: fix an unresolved reference to std.Object.
	* specs/inprocess_spec.yaml: Spell `"specl.std".Object` with a
	lower-case `o` to match imported stdlib module layout.
	* NEWS: Update.

	refactor: use installed stdlib.
	* lib/specl/std.lua: No need to carry around local copies of
	stdlib pieces we use; load installed stdlib modules into the specl
	namespace, and clear the package.loaded cache so that examples
	can load and check behaviours of another version of stdlib than
	the one specl loaded for itself.
	Adjust all callers.
	(std.io.dirname): Set a fallback for this function, not exported
	by stdlib v40.
	* rockspec.conf (dependencies): Add stdlib v40.
	* lib/specl/optparse.lua: Remove.  Use the installed std.optparse.
	Adjust all callers.
	* local.mk (bin_specl_SOURCES): Remove lib/specl/optparse.lua.

2014-09-26  Gary V. Vaughan  <gary@gnu.org>

	specs: use 'raise' matcher consistently.
	* specs/matchers_spec.yaml: Use 'raise' matcher consistently.

	slingshot: sync with upstream for SPECL_ENV improvements.
	* slingshot: Sync with upstream.
	* specs/spec_helper.lua (package.path): Update according to
	advice in slingshot release notes.
	* specs/specs.mk (SPECL_ENV): Likewise.

	rockspec: bump lyaml requirement to v5.
	* rockspec.conf (dependencies): Bump lyaml to v5 or better.

2014-09-25  Gary V. Vaughan  <gary@gnu.org>

	specl: don't cache loaded module dependencies.
	* lib/specl/loader.lua: Remove yaml and lyaml handles from the
	loaded module cache.  We still have a handle for internal use,
	and now the spec-files in the lyaml project check the in-tree
	module behaviours rather than picking up Specl's already loaded
	version from the install tree.
	* NEWS: Update.

2014-09-24  Gary V. Vaughan  <gary@gnu.org>

	specl: generalize `it` into `examples` for programmatic specs.
	* specs/runner_spec.yaml: New file.  Exercise examples syntax.
	* specs/specs.mk (specl_SPECS): Add specs/runner_spec.yaml.
	* lib/specl/runner.lua (run_examples): Remove `it` from function
	environment.
	Add new `examples` definition to function environment.
	* specs/formatter/report_spec.yaml, specs/loader_spec.yaml:
	Update accordingly.
	* doc/specl.md (Programmatic Specifications): Likewise.
	* NEWS: Update.

2014-09-23  Gary V. Vaughan  <gary@gnu.org>

	specl: expand macros when loading from spec directories.
	* lib/specl/std.lua (io.writelines): Copy from upstream stdlib.
	* specs/spec_helper.lua: Set randomseed for tmp directory name
	randomisation.
	(TMPDIR): Set to environment TMPDIR or TMP or fall back to /tmp
	if all else fails.
	(append): Factored out of Tmpfile.
	(Tmpfile): Adjust _init function to accept an optional path and
	zero or more lines to write to the file.
	(append): Simplify using std.io.writelines.
	(Tmpdir): New object.  Manage a directory of Tmpfile objects.
	* specs/specl_spec.yaml: Adjust Tmpfile calls accordingly.
	* specs/loader_spec.yaml: New file. Specify loading behaviours.
	* specs/specs.mk (specl_SPECS): Add specs/loader_spec.yaml.
	* lib/specl/loader.lua (spec_path): Track spec-file directories.
	(expandmacros): New searcher for `package.loaders` that runs
	loaded source files from `spec_path` through
	`macro.substitute_string` with `expect` macro already defined.
	(Parser.preamble): Use it when autoloading `spec_helper.lua`.
	* lib/specl/runner.lua (run_examples): When running an example
	from the function environment definition of `it`, set the line
	number of the definition to "unknown" if we don't have a line
	number from the YAML parser.
	* doc/specl.md (Programmatic Specifications): Document it.
	* NEWS: Update.

2014-09-22  Gary V. Vaughan  <gary@gnu.org>

	specl: support programmatic `it` calls.
	* specs/formatter/report_spec.yaml (with passing 'it' expectation)
	(with failing 'it' expectation): Specify behaviour of programmatic
	`it` calls.
	* lib/specl/runner.lua (run_examples): Inject `it` implementation
	into the function execution environment.
	* doc/specl.md (Programmatic Specifications): Document idiomatic
	use of `it` calls.
	* NEWS: Update.

	travis: regenerate .travis.yml for latest luarocks stable.
	* .travis.yml: Regenerate.

	refactor: factor run_example out of runner.run_examples.
	* lib/specl/runner.lua (run_example): New function.  Factored
	out...
	(run_examples): ...of this.

2014-08-17  Gary V. Vaughan  <gary@gnu.org>

	matchers: `to_raise` as an alias for `to_error`.
	Avoid spurious matches for capitalised error messages from
	Slingshot sanity checks.
	* specs/matchers_spec.yaml (raise): Specify behaviours of new
	alias.
	* lib/specl/matchers.lua (error): Rename from this...
	(raise): ...to this.
	(error): Reinstate as an alias for the new `raise` matcher.
	* specs/inprocess_spec.yaml, specs/shell_spec.yaml: Use `raise`
	matcher by default.
	* NEWS: Update.

	shell: succeed with a `not_` versus `nil` streams.
	* specs/shell_spec.yaml: Specify behaviours with a `not_` matcher
	against a `nil` stream.
	* specs/inprocess_spec.yaml (capture): Likewise.
	* lib/specl/shell.lua (contain_output, succeed_while_containing)
	(output, match_output, succeed_while_matching, fail)
	(contain_error, fail_while_containing, output_error)
	(match_error, fail_while_matching): Treat a `nil` valued stream
	as "" before calling string.match on it!
	* NEWS: Update.

	inprocess: return a Process object from capture.
	* lib/specl/inprocess.lua (capture): Return a Process object.
	* specs/inprocess_spec.lua (capture): Adjust.
	* NEWS: Update.

	slingshot: sync with upstream, for slack notifications.
	* slingshot: Sync with upstream.
	* bootstrap: Update from slingshot.
	* bootstrap.conf (slingshot_files):
	Remove m4/ax_compare_version.m4.
	* .slackid: New file.
	* .travis.yml: Regenerate.

	refactor: unwrap functables more generally.
	* lib/specl/inprocess.lua (capture): Move functable unwrapping
	from here...
	* lib/specl/compat.lua (setfenv): ...to here.

2014-07-21  Gary V. Vaughan  <gary@gnu.org>

	inprocess: support functables with capture.
	* specs/inprocess_spec.yaml (capture): Specify behaviour of
	capture when passed a functable.
	* lib/specl/inprocess.lua (capture): If the captured function is
	a functable, unwrap it.
	* NEWS: Update.

2014-07-18  Gary V. Vaughan  <gary@vaughan.pe>

	maint: improve README.md text.
	* README.md: Remove spurious apostrophe from "it's"

2014-07-17  Gary V. Vaughan  <gary@gnu.org>

	Merge branch 'waffle-iron-master'

2014-07-17  Making GitHub Delicious.  <iron@waffle.io>

	add waffle.io badge

2014-06-29  Gary V. Vaughan  <gary@gnu.org>

	specl: remove posix libraries from cache after use.
	* lib/specl/util.lua: After saving references to the luaposix
	functions this file uses, remove cached posix libraries in case
	an example specl runs changes package.cpath and wants to check
	behaviours of another luaposix installed there.
	(have_posix): Export.
	* lib/specl/main.lua: Import util.have_posix.
	(process_args): Use have_posix rather than the cached table to
	determine whether posix.files was available.
	* NEWS: Update.

	specl: luaposix >= v32 compatibility.
	posix.timersub is now posix.sys.timersub.
	* lib/specl/util.lua (timersub): Local handle for posix.timersub
	with older luaposix releases, posix.sys.timersub for recent
	releases otherwise nil for ancient releases.
	(gettimeofday, timesince): Adjust.
	* NEWS: Update.

2014-05-30  Gary V. Vaughan  <gary@gnu.org>

	doc: correct argument order for error matcher.
	The order of error matcher arguments was reversed with Specl 5.
	* doc/specl.md (Pending Examples): Fix error matcher argument
	order to match contemporary usage.

	doc: add a subsection on skipping examples.
	* doc/specl.md (Skipping Examples): New subsection demonstrating
	how to skip examples programatically.

2014-05-21  Gary V. Vaughan  <gary@gnu.org>

	slingshot: sync with upstream.
	* slingshot: Sync with upstream for grep GNUism fix.
	* bootstrap.conf (buildreq): Don't set a git version number, or
	else `GIT=true ./bootstrap` doesn't work!

	configury: bump release version.
	* configure.ac (AC_INIT): Bump release version to 13.

2014-05-06  Gary V. Vaughan  <gary@gnu.org>

	formatters: don't repeat contexts on every example.
	The previous fix printed previously elided contexts too often.
	* specs/formatter/report_spec.yaml
	(does not repeat contexts consecutively): Specify a single output
	for a non-filtered context with multiple nested examples.
	* lib/specl/formatter/report.lua (show_contexts): Implement new
	behaviour.

	formatters: don't elide repeated nested contexts.
	* specs/formatter/report_spec.yaml
	(with repeated description elements): Specify the output when
	different yaml branches share an element description.
	* lib/specl/formatter/report.lua (show_contexts): Adjust to
	match specified behaviour.
	* NEWS: Update.

2014-04-25  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 12
	* NEWS: Record release date.

	slingshot: sync with upstream.
	* slingshot: Update to latest upstream revision, for corrections
	to github url scheme.

2014-04-24  Gary V. Vaughan  <gary@gnu.org>

	inprocess: support multiple format arguments to StrFile:read.
	* specs/inprocess_spec.yaml: Specify behaviour of read with
	multiple format arguments.
	* lib/specl/inprocess.lua (StrFile:read): Support multiple format
	arguments.

	inprocess: implement StrFile:lines.
	* specs/inprocess_spec.yaml (inprocess): Specify behaviour of
	StrFile lines method when called on standard virtual streams.
	* lib/specl/inprocess.lua (StrFile): Implement lines method.

	inprocess: return correct eof markers from StrFile:read.
	* specs/inprocess_spec.yaml (with read): Specify that read returns
	the empty string for end of file when called with "*a", or nil
	otherwise.
	* lib/specl/inprocess (StrFile:read): Handle "*a" early, so that
	the empty string is returned, otherwise return nil for end of file
	before further processing.

	specs: correct wording for no argument example.
	* specs/specl_spec.yaml (specl): When called with no arguments,
	specl now reads files from the specs subdirectory; reword
	description to reflect that.

2014-04-23  Gary V. Vaughan  <gary@gnu.org>

	refactor: move shared initialisation into separate functions.
	* lib/specl/inprocess.lua (env_init): Shared initialisation.
	(capture, call): Use it.

	inprocess: new `capture` API, for isolating functions from io.
	Provide a way to write examples that call functions which would
	otherwise use Specl's io streams, by isolation all io for later
	inspection.
	* specs/inprocess_spec.yaml (capture): Specify behaviour of new
	capture API.
	* lib/specl/inprocess.lua (capture): Implement it.
	* NEWS: Update.

2014-04-21  Gary V. Vaughan  <gary@gnu.org>

	larch: ignore user LUA_INIT environment variables.
	* build-aux/larch (preamble): Reset LUA_INIT and LUA_INIT_5_2
	before re-executing with Lua interpreter.
	* THANKS: Add Reuben Thomas.
	* NEWS: Update.
	Reported by Reuben Thomas.

2014-04-07  Gary V. Vaughan  <gary@gnu.org>

	doc: use https url for direct luarocks install url.
	* README.md: Use https url for direct luarcoks install url.

	docs: update direct luarocks install url.
	* README.md: Update direct luarocks install url.

	report: elide contexts for filtered-out examples.
	* specs/formatter/report_spec.yaml: Specify output of report
	formatter when some examples are filtered out.
	* lib/specl/formatter/report.lua (spec): Remove.
	Adjust all callers.
	(show_contexts): New function to show not yet displayed context
	lines for filtered-in examples.
	(expectations): Use it.
	* NEWS: Update.

	doc: remove trailing whitespace.
	* doc/specl.md: Remove trailing whitespace.

	specl: fix premature fail fast for failing expect() after pending().
	* specs/specl_spec.yaml (when failing fast): Specify behaviour of
	--fail-fast (and -1) options.
	* lib/specl/runner.lua (run_examples): Only stop when a failing
	expect () does not follow a call to pending().
	* NEWS (Bug fixes): Update.

2014-04-06  Gary V. Vaughan  <gary@gnu.org>

	doc: new specl.shell documentation.
	Now that the specl.shell API is stable, document it.
	* doc/specl.md (Writing Program Specifications): New chapter
	documenting specl.shell.
	* NEWS: Update.

2014-04-05  Gary V. Vaughan  <gary@gnu.org>

	environments: support requiring core modules in spec-files.
	* specs/environment_spec.yaml (when requiring a module): Specify
	behaviour when requiring a core module.
	* lib/specl/runner.lua (initenv): A core module only has an entry
	in `package.loaded`, but not in `package.preloaded`... and in any
	case has no side-effects to capture since it's table is available
	from _G in the outermost environment. So we can safely skip the
	previously failing code for capturing side-effects when running
	a module load function.
	* NEWS: Update with note about bug-fix.

	specl: add specifications for --version and --help.
	* specs/specl_spec.yaml: Add specifications for --version and
	--help output.
	* lib/specl/main.lua (optspec): Bump copyright year in version
	output text.

	doc: remove spurious specs/*_spec.yaml arguments in examples.
	* doc/specl.md (Command Line): Specl automatically loads all
	files ending with `_spec.yaml` from the `specs` directory, so no
	need to write it out long hand.

	doc: sync with gh-pages branch.
	* doc/specl.md: Sync with gh-pages index.md, for kramdown support.

	maint: post-release administrivia.
	* configure.ac (AC_INIT): Bump release version to 12.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	configury: set SPECL correctly in VPATH builds.
	* specs/specs.mk (SPECL_ENV): Make sure SPECL is set correctly
	for VPATH builds, per `make distcheck`.

	reformat: remove trailing whitespace.
	* lib/specl/shell.lua: Remove trailing whitespace.

	Release version 11
	* NEWS: Record release date.

	slingshot: sync with upstream.
	* slingshot: Sync with upstream for public-submodule-commit
	fix.
	* .travis.yml: Regenerate.

	compat: use `debug.setfenv` when available.
	* lib/specl/compat.lua (setfenv): In Lua 5.1, `setfenv` cannot
	change environment of C functions, so use `debug.setfenv` in that
	case.

2014-03-27  Gary V. Vaughan  <gary@gnu.org>

	specs: use inprocess examples for almost everything.
	* lib/specl/matchers.lua (expectations, ispending): Remove.  We
	can't use file local symbols if Specl Main is reentrant.
	(init): Require a new state parameter, and set expectations and
	ispending attributes on the state.  Adjust all callers.
	(status): Require a new state parameter, and construct the
	results table from state attributes.  Adjust all callers.
	(M.stats): Violates reentrancy.  Move from here...
	* lib/specl/main.lua (Main.stats): ...to here.
	* lib/specl/matchers.lua (expect, pending): Require a new state
	parameter, and access stats values from there.
	* lib/specl/runners.lua (run_examples): Set expect and pending in
	the execution environment as closures that pass the new state
	parameter to matchers implementations.
	(accumulator): Adjust callers to accumulate formatter output into
	state object, not the formatter module, for reentrancy.
	* specs/formatters/spec_helper.lua (run_spec): Use inprocess.call
	instead of shell.spawn.
	* specs/spec_helper.lua (run_spec): Likewise.
	(spawn_specl): Copy of the old shell.spawn using run_spec for
	examples that don't yet work with inprocess.
	* specs/custom_formatters_spec.yaml: Until we have a way to set
	the package.path from an example to affect the environment of
	inprocess calls, use spawn_specl for these examples.
	* specs/specl_spec.yaml: Likewise for examples that need to
	reset the package.path.
	* NEWS: Update.

	inprocess: set Main instance fields from Main._init.
	The Object clone process borrowed from lua-stdlib only makes a
	shallow copy of the prototype's fields when instantiating a new
	object.  This means that any table references in the prototype
	end up being shared by the cloned object.
	* lib/specl/main.lua: ...unless we always set new values in the
	_init method.

	inprocess: improve io.input() and io.output() emulation.
	* lib/specl/inprocess.lua (env.io.input, env.io.output): Always
	return the latest file object, like the core Lua implementations.
	(env.io.output): Flush any output from the previous output file
	before switching to a new file.

	specl: collect spec-files from subdirs correctly.
	* lib/specl/util.lua (files): table merging subdirectory files
	into the array part of the master list overwrites previous
	entries!  When we recurse, pass down the master list and append
	new file names to that instead.

	refactor: reuse util.nop in "specl.util".
	* lib/spec/util.lua (files): Set to `nop` when lua_posix is not
	installed.
	(nop): Move definition before first use.

	refactor: save a function call on non-table environment recursion.
	This shaves over 4% off the time of Specl's make check: from 27.2
	to 26.0 seconds averaged over 3 runs.
	* lib/specl/util.lua (deepcopy): Only recurse when a whole table
	needs to be copied, otherwise deal with already-copied tables and
	non-tables in-situ.

	specl: reduce unnecessary dereferences in inner environment loop.
	* lib/specl/util.lua (deepcopy): Use copy instead of copied[orig]
	for a small speedup.

	refactor: remove redundant environment creation.
	* specs/environment_spec.yaml: New examples to ensure before and
	after blocks don't have access to each others' environments.
	* lib/specl/runner.lua (run_examples): Remove redundant nested
	environment creation.  The environment shared by an example
	block is sufficient, and must be shared by the before and after
	blocks of each example anyway.

	configury: don't bundle build-time larch macros.
	* local.mk (bin_specl_SOURCES): A list of files used to build
	bin/specl.
	(dist_noinst_DATA): Append to this.
	(bin/specl): Expand only $(bin_specl_SOURCES), not all of
	$(dist_noinst_DATA).

	formatters: output of progress colors `specify` descriptions.
	* lib/specl/color.lua (h1, h2, h3): Make h1 bright blue, and
	shuffle the former values of h1 & h2 into h2 & h3, resp.
	(colormap): Adjust entries to use these settings to output the
	same color-scheme, except `specify` which is now `h1` colored.

	refactor: use the system loaders for caching environment require.
	* lib/specl/runner.lua (initenv): Don't do a manual walk over the
	package.path, use the provided `package.loaders`.

	larch: sync with upstream, and simplify callers.
	Richer `from` syntax encourages simpler symbol import blocks at
	the start of modules.
	* lib/larch/from.lua: Sync with upstream.
	* lib/specl/formatter/progress.lua,
	lib/specl/formatter/report.lua, lib/specl/formatter/tap.lua,
	lib/specl/inprocess.lua, lib/specl/loader.lua, lib/specl/main.lua,
	lib/specl/matchers.lua, lib/specl/runner.lua, lib/specl/shell.lua,
	lib/specl/util.lua: Simplify accordingly.

	specs: luajit error output does not include error line number.
	* specs/inprocess_spec.yaml (it captures raised errors): For
	compatibility with luajit, don't require error line numbers.

	compat: support xpcall argument passing in Lua 5.1.
	* lib/specl/compat.lua (xpcall): If Lua's xpcall does not pass
	additional arguments through, pack everything into a closure that
	unpacks the arguments for the protected function.
	* lib/specl/inprocess.lua: Import xpcall.

2014-03-25  Gary V. Vaughan  <gary@gnu.org>

	inprocess: give a useful diagnostic for missing Main.inprocess.
	* specs/inprocess_spec.yaml (before): Refactor Main object into a
	Base object, and set instance fields in `call`.
	Add specification for malformed Main diagnostic.
	* lib/specl/inprocess.lua (call): Raise an error if `inprocess`
	is malformed, before first use.

	refactor: replace inprocess setfenv with direct method injection.
	Calling `setfenv` only affects the environment of the named
	function; any subroutines it calls revert back to their default
	environment if they were already declared.
	* lib/specl/inprocess.lua (inject): New function, similar to
	`table.merge`, but operate recursively and create missing
	subtables in destination as necessary.
	(call): Require that the main object have a new `inprocess`
	field, and `inject` override functions into that environment
	table.  Restore to original values when the main object returns.
	Don't deepcopy the whole environment from whatever happens to be
	in _G when called, just set the overrides, and let the main
	object handle the details.
	* lib/specl/main.lua: Set main.inprocess to _G.
	* specs/inprocess_spec.yaml: Conform to the new `main.inprocess`
	interface. Be careful that `before` blocks run in a different
	environment to `example` blocks, so we have to pass the current
	value of _G from each `example` block into the main constructor
	in `before`.

	refactor: lift lua compatibility functions into new module.
	* lib/specl/runner.lua (loadstring, setfenv): Move from here...
	* lib/specl/compat.lua: New file. ...to here.
	Adjust all callers.
	* local.mk (dist_noinst_DATA): Add lib/specl/compat.lua.

2014-03-24  Gary V. Vaughan  <gary@gnu.org>

	matchers: new `copy` matcher.
	* specs/matchers_spec.yaml (copy): Specify behaviour of new copy
	matcher.
	* lib/specl/matchers.lua (matchers.copy): Implement it.
	* doc/specl.md (copy): Document it.
	* NEWS: Update.

	environments: replace copy-on-write with safe deepcopy envs.
	Unfortunately, Lua makes it difficult to write a general copy-on-
	write table, because __index doesn't know whether it was called
	as part of resolving the RHS of an assignment. The previous
	implementation tried to overcome this by prefilling the COW table
	valued entries with a proxy that loaded the required subtables
	on-demand, but that doesn't work when on the LHS of a table
	valued key lookup (it returns the empty proxy table, rather than
	the real table value).  Punt for now with the order of magnitude
	slower (but correct!) deep copied environments.
	* lib/specl/util.lua (cow): Remove. It doesn't work in common
	corner cases.
	(deepcopy): Rewrite for full and correct loop-detecting algorithm.
	Adjust all callers to use deepcopy() instead of cow().

2014-03-22  Gary V. Vaughan  <gary@gnu.org>

	inprocess: new feature to run Lua programs inside Specl process.
	* specs/inprocess_spec.yaml: New file. Specify capturing exit
	status, and io streams while otherwise simulating running a
	program in an external process.
	* specs/specs.mk (specl_SPECS): Add specs/inprocess_spec.yaml.
	* lib/specl/inprocess.lua: New file. Implement specifications.
	* local.mk (dist_noinst_DATA): Add lib/specl/inprocess.lua.
	* lib/specl/main.lua: Adjust to new calling convention.
	* NEWS: Update.

	specl: fix crash when called with no arguments and no specs dir.
	* lib/specl/util.lua (files): If posix.dir returns nil, for a
	missing directory, pass back an empty results table.

2014-03-21  Gary V. Vaughan  <gary@gnu.org>

	progress: don't try to animate a '>' pseudo-cursor in output.
	Using ^H to backspace over the '>' character to simulate moving
	it along the front of the output is unnecessary (the actual
	cursor is already doing that), slow (there's a noticeable multi-
	second pause on terminals that are capable of backspacing over
	a carriage return to erase the last '>' on the previous line),
	and error-prone (testing programs that switch to the alternate
	screen between '>' and backspace often damages the display when
	returning from the alternate screen).
	* lib/specl/formatter/progress.lua (header): Remove. Adjust module
	table.
	(expectations): Don't output the '>' or try to erase it with a
	subsequent backspace.
	* specs/formatter/progress_spec.yaml: No need to match the old
	invisible '>' and backspace characters with expect patterns.

	util: improve diagnostic for failed type check.
	Type check failures often occur when a checked object is a Lua
	error string instead of the expected object.  Displaying that as
	a diagnostic makes debugging much easier.
	* lib/specl/util (type_error): Append stringified argument that
	prompted the failure.

2014-03-12  Gary V. Vaughan  <gary@gnu.org>

	progress: flush output stream after each write.
	* lib/specl/formatter/progress.lua (writc, header, expectations):
	In preparation for inprocess examples, which hijack io and restore
	between formatter calls, we must rigorously select and flush the
	correct stream each time we write to it.

	shell: don't break backwards compatibility gratuitously.
	This is a partial revert of 503a2fd, where that changeset had
	previously changed the names of several matchers unnecessarily.
	* lib/specl/shell.lua (output_containing, output_matching)
	(output_error_containing, output_error_matching): Rename these...
	(contain_output, match_output, contain_error, match_error):
	...back to these.
	Adjust all callers.
	* NEWS: Update.

	refactor: refill optspec at 78 columns.
	* lib/specl/main.lua (optspec): Refill at 78 columns.

	specl: add inclusive `--example` filters.
	* specs/specl_spec.yaml: Specify behaviour of --example filters.
	* lib/specl/main.lua (optspec): Add --example option, along with
	reference documentation for --help output.
	(execute): Coerce single example options to 1-element tables.
	(compile): Append example filters to each spec-file structure.
	* lib/specl/runner.lua (run_examples): Adjust filtering to manage
	new --example filters.
	* doc/specl.md (Running a Subset of Examples): Document --example.
	*: NEWS: Update.

	refactor: simplify specl invocation from `make check`.
	* specs/specs.mk (SPECL_ENV): Remove.  The bundled specl script
	can figure this all out by itself now.

	specs: specify progress formatter behaviours.
	* specs/formatter/spec_helper.lua (run_spec): Refactor for better
	flexibility in arguments to SPECL subprocess, without hard-coding
	`--formatter=report`.
	* specs/formatter/report_spec.yaml: Adjust all callers.
	* specs/formatter/progress_spec.yaml: New specifications.
	* specs/specs.mk (specl_SPECS): Add it.

2014-03-05  Gary V. Vaughan  <gary@gnu.org>

	refactor: use string prefix instead of function in shell matchers.
	* lib/specl/shell.lua (ProcessMatcher._init)
	(ProcessMatcher._parmtypes): ProcessMatcher constructor takes
	just two unnamed method arguments.
	(ProcessMatcher:format_expect)
	(ProcessMatcher:format_alternatives): Set default methods to
	automatically construct resport strings from expecting field.
	Adjust and simplify all instantiations accordingly.

	refactor: make all matcher methods OO.
	* lib/specl/matchers.lua (Matcher.matchp, Matcher.format_expect)
	(Matcher.format_actual, Matcher.format_alternatives): Add self
	parameter. Adjust all callers.
	* lib/specl/shell.lua, specs/spec_helper.lua: Likewise.
	* doc/specl.md (Custom Matchers): Update documentation.
	* NEWS: Note incompatible changes.

	refactor: simplify shell ProcessMatcher declarations.
	* lib/specl/std.lua (object_clone): Fetch paramnames from new
	object metatable, not prototype.
	* lib/specl/shell.lua (ProcessMatcher): Move dummy `matchp`
	declaration from here...
	* lib/specl/matchers.lua (Matcher.matchp): ...to here.
	(Matcher._parmnames, Matcher._parmtypes): Support type-checked
	field assignments by default.
	* lib/specl/shell.lua (ProcessMatcher._init): Automatically
	assign and check types for each object method.
	Adjust all callers.

	refactor: factor away spurious util.QUOTED constant.
	* lib/specl/util.lua (concat): Accept any non-nil argument.
	Adjust all callers to pass literal ":quoted" (a non-nil value)
	in place of util.QUOTED.
	(QUOTED): Remove.

	refactor: factor format_actual fields into shared functions.
	* lib/specl/shell.lua (nonempty_output, but_got_status)
	(but_got_status_with_output, but_got_status_with_errout):
	Factored out of matchers. Adjust all callers.
	(process_errout, reformat_errout): Renamed from these...
	(but_got_output, but_got_errout): ...to these, respectively.

	refactor: factor out formatted error stream output.
	* lib/specl/shell.lua (reformat_err): Renamed from this...
	(reformat_errout): ...to this. Adjust all callers.
	(nonempty_errout): New function...
	(process_errout): ...factored out of here.  Simplify accordingly.
	(matchers.exit.format_actual, Matchers.succeed.format_actual)
	(matchers.succeed_while_containing.format_actual)
	(matchers.succeed_with.format_actual)
	(matchers.succeed_while_matching.format_actual)
	(matchers.fail.format_actual): Simplify with nonempty_errout ().

	refactor: parameterize object init field type checking.
	* lib/specl/std.lua (object_clone): If an object specifies a
	`_parmtypes` table field, then use util.typecheck to ensure the
	fields named by `objmt._init` have types that match.
	* lib/specl/matchers.lua (Matcher._init): Replace function
	definition with table `{"matchp"}`.
	(Matcher._parmtypes): Specify that `matchp` must be a function
	during instantiation.

	refactor: simplify Matcher:_init ().
	* lib/specl/matchers.lua (Matcher:_init): Use clone_rename ()
	instead of manual parameter merge.  Simplify accordingly.
	(merge_hash): Remove.  No longer used.

	refactor: factor out repeated identical setting of Matcher type.
	* lib/specl/shell.lua (ProcessMatcher): New Matcher prototype
	requiring a Process object argument.
	Adjust all callers.

	shell: new `fail_while_containing` and `succeed_while_containing`.
	* specs/shell_spec.yaml: Specify behaviour of new matchers.
	* lib/specl/shell.lua (matchers.fail_while_containing)
	(matchers.succeed_while_containing): Implement new behaviours.
	* NEWS: Update.

	shell: new `fail_while_matching` and `succeed_while_matching`.
	* specs/shell_spec.yaml: Specify behaviour of new matchers.
	* lib/specl/shell.lua (matchers.fail_while_matching)
	(matchers.succeed_while_matching): Implement new behaviours.
	* NEWS: Update.

	refactor: rationalise and normalise shell matchers.
	* lib/specl/shell.lua (contain_output, match_output)
	(contain_error, match_error): Rename from these...
	(output_containing, output_matching, output_error_containing)
	(output_error_matching): ...to these.
	Adjust all callers.
	* NEWS: Update.

2014-03-04  Gary V. Vaughan  <gary@gnu.org>

	shell: new `fail_with` and `succeed_with` matchers.
	* specs/shell_spec.yaml: Specify behaviour of new matchers.
	* lib/specl/shell.lua (matchers.fail_with)
	(matchers.succeed_with): Implement new behaviours.
	* NEWS: Update.


	Conflicts:
		lib/specl/shell.lua
		specs/shell_spec.yaml

2014-03-04  Gary V. Vaughan  <gary@gnu.org>

	shell: new `fail` and `succeed` matchers.
	* specs/shell_spec.yaml (describe fail matcher): Specify
	behaviour of fail matcher.
	(describe succeed matcher): Similarly for succeed.
	* lib/specl/shell.lua (matchers.fail, matchers.succeed):
	Implement newly specified behaviours.
	* NEWS: Update.

	refactor: reorder shell matchers logically.
	* lib/specl/shell.lua: Reorder matchers logically.
	* specs/shell_spec.yaml: Likewise, to match.

	specl: pass arg through to execute correctly.
	* local.mk (bin/specl): Instantiate main with the arg array as a
	bare argument instead of wrapping in another table.
	* lib/specl/main.lua (execute): Parse the options passed during
	instantiation instead of accessing the global environment again.

	specl: add --fail-fast option.
	* lib/specl/main.lua (optspec): Add --fail-fast option.
	* lib/specl/runner.lua (run): Stop running if run_examples
	returns false.
	(run_examples): Stop running examples if an expectation fails,
	or run_contexts returns false.
	(run_contexts): Propagate a false returned by nested context or
	example.
	* doc/specl.md (Running a Subset of Examples): Document
	--fail-fast.
	* NEWS: Update.

2014-02-28  Gary V. Vaughan  <gary@gnu.org>

	specl: diagnose unrecognised command-line options.
	* specs/specl_spec.yaml: Specify behaviour for unrecognised
	options.
	* lib/specl/main.lua (process_args): Add parser option.  Use it
	to diagnose unrecognised options.
	(execute): Adjust accordingly.
	* NEWS: Updated.

	refactor: improve locality of reference.
	* lib/specl/shell.lua (Command): Fix a comment typo.
	(matchers): Move from file scope to matchers scope.

	refactor: make specl re-entrant.
	* lib/main.lua: Move from here...
	* lib/specl/main.lua: ...to here.
	* local.mk (dist_noinst_DATA): Adjust.
	* lib/specl/main.lua (sandbox): Renamed from this, a shared
	sandbox...
	(global): ...to this, an initial globals list.
	(filters, opts, parser, specs): Move globals...
	(Main): ...to states in a new module object.
	(compile, execute, process_args, specfilter): Refactored into
	object methods from earlier code.
	* local.mk ($(srcdir)/bin/specl): Instantiate a new specl.main
	object with global command line `arg` table, and `:execute()` it.
	* lib/specl/runner.lua (sidefx, filename, filters): Remove
	shared module state.  Replace with fields on `Main` object.
	(initenv, run, run_contexts, run_examples): Add `state`
	parameter to replace shared module local state.
	* lib/specl/color.lua (color): Add `want_color` parameter now
	that we have no global `opts` table.
	* lib/specl/util.lua (princ, writc): Move from here...
	* lib/specl/formatter/progress.lua (princ, writc): ...to here.
	* lib/specl/formatter/report.lua (princ): ...and here.

	specl: allow examples to safely set environment table elements.
	* specs/environment_spec.yaml (context do not leak references):
	Specify behaviour of examples when setting environment table
	elements.  They should not leak into sibling examples.
	* lib/specl/runner.lua (initenv): Make sure _G and _ENV refer to
	the innermost environment, not the source environment.
	(env.require): Use package.path and package.cpath from innermost
	environment for searching, and when calling core.require.
	* lib/specl/util.lua (cow): New function.  Fast copy-on-write
	table cloning.
	* lib/specl/runner.lua (run_examples.block, run_examples): Use
	util.cow for nested environments.
	* NEWS: Update.

	refactor: improve sandbox comment.
	* lib/main.lua (sandbox): The purpose of the shallow copy is to
	prevent future changes to specls global environment leaking into
	example environments.

2014-02-27  Gary V. Vaughan  <gary@gnu.org>

	std: sync package functions with upstream.
	* lib/specl/std.lua (func.case): New function.
	(package.find, package.pathsub, package.normalize)
	(package.insert, package.mappath, package.remove): Sync with
	upstream.
	* specs/spec_helper.lua: Simplify package.path mangling.

2014-02-05  Gary V. Vaughan  <gary@gnu.org>

	optparse: sync with upstream.
	* lib/specl/optparse.lua: Sync with upstream stdlib version.

2014-02-04  Gary V. Vaughan  <gary@gnu.org>

	matchers: accept `not_to` as an alias of `to_not_`.
	* specs/custom_formatters_spec.yaml, specs/matchers_spec.yaml,
	specs/shell_spec.yaml, specs/specl_spec.yaml,
	specs/formatter/report_spec.yaml: Use `not_to_` in preference to
	`to_not_`.
	* specs/matchers_spec.yaml: Add some `to_not_` examples to ensure
	they keep working.
	* lib/specl/matchers.lua (expect): Accept `not_to_` as an alias
	of `to_not`.
	* doc/specl.md (Inverting a Matcher with not): Note equivalence
	of `to_not_` and `not_to`.
	* NEWS: Update.

	specl: prefer new `to_` syntax over `should_` for expectations.
	* specs/custom_formatters_spec.yaml, specs/environment_spec.yaml,
	specs/formatter/report_spec.yaml, specs/matchers_spec.yaml,
	specs/shell_spec.yaml, specs/specl_spec.yaml: Update to `to_`.
	* specs/should_spec.yaml: New specs to ensure `should_` continues
	working.
	* specs/specs.mk (specl_SPECS): Add specs/should_spec.yaml.
	* lib/specl/matchers.lua (expect): Accept new `to_` syntax.
	* doc/specl.md: Update.
	* NEWS: Update.

	specs: no need for --unicode any more.
	* specs/specs.mk (SPECL_OPTS): Remove --unicode.  There are no
	spec files with unicode in them in the project any more.

	specl: support file:NN:EE format line filters in arguments.
	* specs/spec_helper.lua (run_spec): Only add the "-" argument
	when params.stdin is set.
	(Tmpfile): Remove unnecessary __tostring metamethod.
	* specs/specl_spec.yaml: Add specifications for behaviour with
	various combinations of +NN and :NN:EE arguments, and rearrange
	into contexts for readability.
	* lib/main.lua (process_args): Accept line number filters as :NN
	or :NN:EE suffixes to filenames.
	(OptionParser): Update help text.
	* doc/specl.md (Command line): Update.
	* NEWS: Update.

2014-02-03  Gary V. Vaughan  <gary@gnu.org>

	optparse: sync with upstream.
	* lib/specl/optparse.lua: Sync with upstream for latest fixes.
	* specs/optparse_spec.yaml: Remove.  No longer owned by this
	project.
	* specs/specs.mk (specl_SPECS): Remove optparse_specl.yaml.

	specl: filter examples by line-number with +NN argument.
	* specs/specl_spec.yaml: Specify behaviour of +NN argument.
	* specs/spec_helper.lua (Tmpfile): Add __tostring metamethod to
	support new specl_specl.yaml specs.
	* lib/main.lua (filters): Store +NN filters in advance of
	following FILE.
	(process_args): A variation of std.io.process_files that saves
	+NN filter to `filters`.
	(slurp): Rename from this...
	(compile): ...to this.  Collect line filters into specs table.
	* lib/specl/runner.lua (run_examples): If any filters were
	set, then check only the examples from this file with matching
	line numbers.
	* lib/main.lua (OptionParser): Update spec string to describe
	use of +NN filters.
	* NEWS: Update.

	maint: rename lib/specl.lua to lib/specl/runner.lua.
	* lib/specl.lua: Move from here...
	* lib/specl/runner.lua: ...to here.
	* lib/main.lua: Adjust require statement accordingly.
	* local.mk (dist_noinst_DATA): Adjust.

2014-02-02  Gary V. Vaughan  <gary@gnu.org>

	specl: formatters report file:line:expectation in verbose output.
	* specs/formatter/report_spec.yaml: Add specifications for
	desired improved output in verbose mode.
	* lib/specl/loader.lua (parser_mt:load_map): Save line number
	* into map table value when a Lua function is loaded.
	* lib/main.lua (slurp): Save filenames into specs table from
	loader.
	* lib/specl.lua (filename): New file local variable to hold the
	most recently encountered specs table filename.
	(run): Set filename at each iteration.
	(run_examples): Adjust for changes in example table layout.
	Pass filename and line number to formatter.expectations().
	* lib/specl/formatter/progress.lua (expectations): Report file:
	line:expectation in verbose output for pending and failed
	examples.
	* lib/specl/formatter/report.lua (expectations): Likewise.
	* doc/specl.md: Update.
	* NEWS: Update.

2014-01-31  Gary V. Vaughan  <gary@gnu.org>

	specl: autoload all spec-files when no FILES are passed.
	* lib/specl/util.lua (files): New function, recursively collect
	all non-directory files below a given root into a table.
	* lib/main.lua: Use it to find all spec-files below `specs/` when
	no FILEs are passed.
	Update optparse help spec.
	* specs/spec_helper.lua, specs/formatter/spec_helper.lua: Pass an
	explicit '-' to specl subprocesses to force reading example input
	from stdin.
	* doc/spec.md (Command Line): Update.
	* NEWS: Update.

	specl: autoload spec_helper from spec directory.
	* lib/specl/loader.lua: Require specl.std for new path apis.
	(Parser): Use preamble to add current specfile directory to
	front of the package.path, and to autoload spec_helper.lua if
	present.
	* specs/spec_helper.lua: Add ./lib/?.lua to the front of the
	package.path.
	* specs/custom_formatters_spec.yaml, specs/matchers_spec.yaml,
	specs/shell_spec.yaml, specs/specl_spec.yaml,
	specs/formatter/report_spec.yaml: Remove specl.shell and
	spec_helper require statements.
	* specs/specs.mk (SPECL_ENV): Add $(srcdir)/lib/?.lua to package.
	path for VPATH builds.
	($(SPECL)): Remove.  No need to build a LUA_PATH setting wrapper
	script now that specl, with a bit of help from spec_helper in the
	common case, and from SPECL_ENV in VPATH builds.
	(SPECL): Point directly to bin/specl.
	(SPECL_ENV): Set SPECL in the environment for subprocess tests.
	* specs/spec_helper.lua, specs/formatter/spec_helper.lua (SPECL):
	Prefer SPECL setting from os environment, so that Make can pass
	the path in VPATH builds.
	* .gitignore: Remove specs/specl.
	* doc/specl.md (Separating Helper Functions): Update.
	* NEWS: Update.

	std: add and use std.package.mappath to simplify initenv().
	* lib/specl/std.lua (mappath): New api to call a function with
	each segment of a package.path sep delimited path string.
	* lib/specl.lua (initenv): Use it.

	std: new package methods to simplify path strings management.
	* lib/specl/std.lua (table.invert): Import from upstream stdlib.
	(io.basename, io.dirname, package.find, package.insert)
	(package.normalize, package.remove): New `package.dirsep` and
	`package.pathsep` aware functions for path string management.

	specl: clean up intercepted require, load, etc.
	* lib/specl/std.lua (split): Just like upstream stdlib, but much
	easier to understand :)
	* lib/specl.lua (run): Remove env.specl, which corrupts the
	example block environment unnecessarily.
	(core): Store intercepted functions as upvalues here instead.
	(initenv): Adjust load, loadfile and loadstring interception to
	use upvalues from core table.
	(sidefx): Map module name to table of leaked global symbols that
	will need to be copied into the example block environment during
	initialisation.
	(initenv): Rewrite `env.require` interceptor to capture leaked
	globals in sidefx on first call, and to copy references into the
	example block environment on subsequent interceptions.  Remove
	all the cruft that copied everything into the global environment,
	and reran core `require` unnecessarily.

	specl: save path to spec file in `specl.specpath`.
	* lib/specl/std.lua (std.package, std.io.catfile): Copied from
	 stdlib.

2014-01-26  Gary V. Vaughan  <gary@gnu.org>

	specs: be more tolerant to differeng Lua error message formats.
	* specs/specl_spec.yaml: Some versions report `'=' expected` and
	others `syntax error` for the example code in the spec; use
	`match_error` rather than `contain_error` to accept either.

	matchers: recognize non-table inequality sooner in objcmp.
	Replace lost section from objcmp reordering in b234584:
	* lib/specl/matchers.lua (objcmp): Recognize inequality of non-
	table objects sooner.

	matchers: make object comparison faster and more robust.
	This fixes a failing spec in `Sexpr` on luajit, where a
	comparing a 10000 element cons list previously triggered a
	stack overflow:
	* lib/specl/matchers.lua (objcmp): Rewrite to return immediately
	when primitive types, or objects with __eq metamethods, determine
	the arguments are equal.
	Rearrange order of additional comparisons to handle fast
	comparison of primitive types (or with __eq metamethods) on
	table entries without recursing, and use tail call optimisation
	when only a single table value needs to be checked to determine
	equality.
	* NEWS: Update.

2014-01-15  Gary V. Vaughan  <gary@gnu.org>

	configury: add forgotten larch sources.
	* local.mk (dist_noinst_SCRIPTS): Add build-aux/larch.
	(dist_noinst_DATA): Add lib/larch/from.lua.

	maint: post-release administrivia.
	* configure.ac (AC_INIT): Bump version to 11.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 10
	* NEWS: Record release date.

	slingshot: sync with upstream.
	* slingshot: Sync with upstream.
	* bootstrap: Sync with slingshot.
	* .travis.yml: Regenerate.

	configury: don't regenerate specl.1 after configure.
	* local.mk ($(srcdir)/doc/specl.1): Depend on $(srcdir)/bin/specl
	instead of generated specs/specl.  Add $(LUAM_ENV) to help2man
	invocation, and call $(srcdir)/bin/specl instead of $(SPECL).

	configury: no need to duplicate release_extra_dist in local.mk.
	* local.mk (release_extra_dist): Remove.

2014-01-07  Gary V. Vaughan  <gary@gnu.org>

	specl/shell: manually pass package.path in remaining hell.spawn(specl) specs.
	* specs/custom_formatters_spec.yaml (formatter): In case we're
	using modules not on the system Lua package path, make sure to
	manually pass our package.path to inferior specl spawn.
	* specs/specl_spec.yaml: Likewise.

2014-01-06  Gary V. Vaughan  <gary@gnu.org>

	configury: bump release number to 10.
	* configure.ac (AC_INIT): Bump release number to 10.

	specl/shell: don't force specl's LUA_PATH on subprocesses.
	Forcing Specl's internal package.path into a subprocess'
	environment will break if the subprocess invokes a Lua
	interpreter with a different package.path, especially for a
	different Lua version.
	* lib/specl/shell.lua (Command._init): Remove LUA_PATH setting.
	* specs/spec_helper.lua (run_spec): Pass through LUA_PATH for
	inferior Specl processes that `require "spec_helper"`.
	* specs/custom_formatters_spec.yaml, specs/specl_spec.yaml:
	Add trailing ";;" so we don't override the system package.path.
	* NEWS: Update.

2014-01-05  Gary V. Vaughan  <gary@gnu.org>

	slingshot: sync with upstream.
	Fix the annoying contest.sed file dropping bug.
	* slingshot: Sync with upstream.
	* bootstrap: Sync with slingshot.

2014-01-04  Gary V. Vaughan  <gary@gnu.org>

	maint: update copyright notices to include 2014.
	* .x-update-copyright: New file. Exclude files not owned by this
	project from update-copyright rules.
	* bootstrap.conf (slingshot_files): Add update-copyright.
	* .gitignore: Update accordingly.
	* local.mk (update_copyright_env): Settings for update-copyright.
	* bootstrap.conf, build-aux/larch, configure.ac,
	lib/larch/from.lua, lib/main.lua, lib/specl.lua,
	lib/specl/color.lua, lib/specl/formatter/progress.lua,
	lib/specl/formatter/report.lua, lib/specl/loader.lua,
	lib/specl/matchers.lua, lib/specl/optparse.lua,
	lib/specl/shell.lua, lib/specl/util.lua, local.mk,
	specs/specs.mk: Bump copyright year.

	slingshot: sync with upstream, and simplify accordingly.
	* slingshot: Sync with upstream.
	* bootstrap: Update from slingshot.
	* bootstrap.slingshot: Remove.  No longer required.
	* bootstrap.conf: Remove bootstrap.slingshot boilerplate.
	(func_ensure_changelog, specl_force_readme): Remove. Automated by
	slingshot now.

2013-12-09  Gary V. Vaughan  <gary@gnu.org>

	slingshot: sync with upstream.
	* slingshot: Pick up latest release with fixes for running tests
	on installed packages with inlined sources.

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 9
	* NEWS: Record release date.

	larch: spin lua inline archiving out into standalone script.
	* build-aux/larch: New script. Assemble a list of lua sources
	into a single executable with package.preload inline modules.
	* local.mk (LARCH): Location of inline archive script.
	(bin/specl): Simplify by calling $(LARCH).
	(dist_lua_DATA, dist_luaspecl_DATA, dist_luaformatter_DATA)
	(luaspecldir, luaformatterdir): Remove.
	(dist_noinst_DATA): List all uninstalled library sources.
	* lib/specl.in: Rename from this...
	* lib/main.lua: ...to this.A
	* local.mk (EXTRA_DIST): Remove lib/specl.in.
	(dist_noinst_DATA): Add lib/main.lua.
	(mkrockspecs_args): Remove.  No separate sources to install now,
	they are all inlined.
	* rockspec.conf (build): Declare empty module list to inform
	mkrockspecs that we still want a "builtin" install, even though
	there are no lua libs now.

	maint: move docs/ to doc/ for LDoc compatibility.
	* docs/specl.md: Move from here...
	* doc/specl.md: ...to here.
	* local.mk, rockspec.conf: Adjust.

2013-12-08  Gary V. Vaughan  <gary@gnu.org>

	slingshot: sync with upstream.
	* slingshot: Pick up latest release with fixes for build.type =
	"builtin" rockspecs.

	docs: remove trailing whitespace.
	* docs/specl.md: Remove trailing whitespace for 'make dist'.

	travis: regenerate .travis.yml.
	* .travis.yml: Regenerate from latest Slingshot.

	slingshot: sync with upstream.
	* slingshot: Pick up latest release with fixes for Travis.

	travis: replace recently missing links for libyaml
	Rerunning previously passing integration test shows that the
	multilibbed libyaml libraries are no longer available from
	/usr/lib alongside other libs - maybe an OS upgrade, or an
	upstream packaging error?
	* .travis.yml (install): Run a shell find command to link the
	multilib libyaml libs back into /usr/lib.
	If this command starts failing in future then it should mean
	libyaml has moved back to the proper place causing our manual
	relink to start failing, so this workaround can then be
	removed.

	refactor: remove '_expect' references.
	* lib/specl/loader.lua (expect): Instead of expanding literal
	expect to an '_expect' reference, pass-through the 'expect'
	token even when a function is recognized.
	* lib/specl.lua (run_examples, M): Remove '_expect' references.

	loader: only trigger expect macro expansion with arguments.
	* lib/specl/loader.lua (expect): Use a getter function for the
	body of this macro, that only triggers expansion if the 'expect'
	token is followed by a parenthesized argument.

	refactor: use LuaMacro to support 'from table import <fieldlist>'.
	* lib/larch/from.lua: New file. Implements 'from' syntax as a
	LuaMacro macro.
	* configure.ac (LUAM): Search for a working luam program.
	* local.mk (LUAM_ENV): Add location of from.lua to LUA_PATH.
	(LUAM_OPTS): Load from macro, and then dump macro-expanded
	source.
	(bin/specl): Expand macros in preloaded sources.
	* lib/specl/formatter/progress.lua,
	lib/specl/formatter/report.lua, lib/specl/formatter/tap.lua,
	lib/specl/matchers.lua, lib/specl/shell.lua,
	lib/specl/util.lua: Use 'from' to simplify alias creation.

	refactor: don't reexport specl.std functions from specl.util.
	* lib/spec/util.lua (M.champ, M.escape_pattern, M.merge)
	(M.Object, M.prettytostring, M.process_files, M.slurp)
	(M.tostring, M.totable): Remove.
	* lib/specl/matchers.lua, lib/specl/shell.lua,
	specs/spec_helper.lua: Adjust. Require specl/std.lua into a
	local table, and access functions directly.
	* specs/custom_formatters_spec.yaml (context with an accumulator):
	Set local tostring directly from specl/std.lua.

	specl: preload sources, and prefer preloaded from env.require.
	On my machine this gets me about a 5% speedup in a large set
	of specfiles, but I have an SSD which makes opening sources
	every time they are loaded seem fast - on an io-bound machine
	this should show an even greater speedup.
	* local.mk (bin/specl): When generating this file, preload the
	library sources with verbatim function initialisers.
	* lib/specl.lua (env.require): Prefer preloaded modules, rather
	than a full blown manual file slurp and loadstring().
	And, excepting "spec_helper" and temporary lua_xxxxxx files, add
	the result of loadstring to package.preload to speed up subsequent
	loads.

2013-12-05  Gary V. Vaughan  <gary@gnu.org>

	matchers: new contain.a_permutation_of adaptor.
	* specs/matchers_spec.yaml: Specify expected behaviour of a new
	adaptor.
	* lib/specl/matchers.lua (Object, prettytostring, totable):
	Alias directly from specl.std, to save reexporting functions
	through specl.util all the time.
	(clone, empty, size): Alias these too.
	(concat): Use " and " as the final element separator when
	concatenating a_permutation_of arguments.
	(matchers.container.format_alternatives): Format strings
	correctly when called by a_permutation_of.
	(matchers.container:a_permutation_of?): New adaptor.
	* docs/specl.md (Unordered matching with a_permutation_of):
	Document it.
	* TODO.yaml: Some new TODO items.
	* NEWS: Update.

	std: implement std.table.empty and std.table.size.
	* lib/specl/std.lua (empty, size): Copied from upstream stdlib.
	(std.table): Export them.

	matchers: use aliases for util functions.
	* lib/specl/matchers.lua: Alias util.prettytostring and
	util.table to prettytostring and table.
	(objcmp, matchers.contain, matchers.contain:format_actual):
	Simplify with aliases.

	matchers: differentiate between primitive tables and objects.
	* specs/matchers_spec (contain): Specify display of object
	type name in failure reports.
	* lib/specl/util.lua (xtype): New function that always returns
	"object" for std.objects.
	(M): Export xtype as util.type.
	* lib/specl/matchers.lua (contain): Simplify with util.type.
	(contain:format_actual, contain:format_alternatives): Likewise.
	(contain:format_expect): Display object name for std.objects.
	* NEWS: Update.

	matchers: fix comment typo.
	* lib/specl/matchers.lua (reformat): Replace 'previded' with
	'provided'.

	util: simplify type_error implementation.
	* lib/specl/util.lua (type_error): convert single types to a
	typelist, then use util.concat unconditionally.

	util: check for type table before using # operator.
	* lib/specl/util.lua (type_check): Don't apply # operator until
	after we've checked that the operand is a table.

	std: add string support to totable function.
	* lib/specl/std.lua (totable): When passed a string, return a
	table of each character in the string.

2013-12-04  Gary V. Vaughan  <gary@gnu.org>

	docs: fix a typo in specl.md.
	* docs/specl.md: Replace 'succed' with 'succeed'.

	specs: improve long form summary sentences.
	* specs/matchers_spec.yaml: Adjust descriptions slightly so that
	long form summaries read better. "matchers be matcher displays
	expected and actual output for failures" becomes "matcher be
	displays expected and actual output for failures".

	matchers: support custom adaptors.
	Declare adaptor functions as regular Object fields so they can
	be added to and overridden during object cloning.  This requires
	dynamic run-time adaptor lookup during expectations:
	* specs/matchers_spec.yaml: Specify behaviour of the custom
	adaptor API.
	* lib/specl/matchers.lua (matchers): In addition to type-
	checking assignments to the matchers table, also inject a
	new `name` field in the assigned Matcher object.
	 (Matcher:_init): First element of a new Matcher object
	instantiation is always the matcher predicate. Save that into
	the `matchp` field of the newly instantiated Matcher object.
	Adjust all callers.
	(Matcher["match?"], Matcher["all_of?"], Matcher["any_of?"]):
	Instead of assigning these dynamically from _init during
	instantiation...
	(Matcher:match, Matcher["all_of?"], Matcher["any_of?"]):
	...assign immediately in the prototype Matcher.  Strip the
	trailing question mark from the match method, as that is now
	used to signify an adaptor method.
	(matchers): Automatically assign the name field so that methods
	can fetch it easily with `self.name`.
	(expect): Adjust to new calling conventions above.
	Also, instead of hard-coding the adaptor scoring functions in
	the returned functable, look them up dynamically in the Matcher
	object fields in the __newindex metamethod by appending a "?"
	to the adaptor name.
	* docs/specl.md (Custom Adaptors): New documentation section.
	* NEWS: Update.

	matchers: always check the type of new matcher assignments.
	* lib/specl/matchers.lua (matchers): Store the actual matcher
	functions in a `contents` subtable so that `__newindex` doesn't
	ignore reassignments to an existing entry!
	(matchers:__index): Automatically reference the contents
	subtable.

2013-09-12  Gary V. Vaughan  <gary@gnu.org>

	refactor: move tmpfile handling to spec_helper.lua.
	* specs/spec_helper.lua (Tmpfile): New Object derived tmpfile
	wrapper.
	* specs/specl_spec.yaml: Simplify accordingly.

	specl: better timer resolution when luaposix is available.
	* lib/specl/util.lua (gettimeofday, timesince): New functions to
	wrap posix.gettimeofday and posix.timersub when available, or
	else fall back to os.time and integer subtraction respectively.
	* docs/specl.md: Document use of `util.timesince`.
	* lib/specl/matchers.lua (M.stats): Use util.gettimeofday.
	* lib/specl/formatter/progress.lua: Use util.timesince to display
	elapsed time.
	* lib/specl/formatter/report.lua: Likewise.
	* NEWS: Update.

	configury: don't require help2man on build host.
	As a general rule, configure should not generate distributed files.
	In particular, we don't want configure to always generate a new
	`bin/specl`, because that forces make to rebuild `doc/specl.1',
	which requires help2man, which may not be installed on the build
	host.
	* configure.ac (AC_CONFIG_FILES): Remove bin/specl builder.
	* local.mk ($(srcdir)/bin/specl): New rule to regenerate bin/specl
	only when lib/specl.in has changed.
	($(srcdir)/docs/specl.1): Calculate mkdir directory dynamically.
	* specs/spec.mk ($(SPECL)): Always run distributed bin/specl from
	$(srcdir).
	* NEWS: Update.

	specl: make ansicolors an optional dependency.
	* lib/specl.in: If ansicolors is not loadable, always disable
	opts.color.
	* lib/specl/color.lua: Don't raise an error when ansicolors is
	not available.
	* rockspec.conf (dependencies): Remove ansicolor.
	* NEWS: Update.

	specl: new --unicode command line option.
	* specs/optparse_spec.yaml: Revert ASCIIfication of unicode
	characters from earlier changeset.
	* lib/specl.in: Add --unicode, and postamble clarifications to
	OptionParser parameter.
	* specs/specs.mk (SPECL_OPTS): Add --unicode option to support
	specs/optparse_spec.yaml.
	* lib/specl/loader.lua (parser_mt:refetch): Don't try to refetch
	with incorrect indices when --unicode was passed.

	slingshot: sync with upstream.
	* slingshot: Pick up recent improvements, particularly ability to
	set SPECL_OPTS non-destructively!

	specl: refetch Lua fragments without line-folding for compilation.
	* lib/specl/loader.lua (Parser): Save the input string, so we can
	grab parts of it when refetching Lua fragments.
	(parser_mt:refetch): New method to refetch the Lua code fragment
	without line-folding, using offsets in the libYAML marker indices.
	(parser_mt:load_scalar): Add the scalar event table to the return
	statement.
	Don't save the style into the current event.
	(parser_mt:load_map): Use refetch method with returned scalar
	event, and pass that unfolded fragment to parser_mt:compile.
	(parser_mt:compile): No need to conditionally fiddle with the line
	number in error messages.
	* specs/specl_spec.yaml (with Lua error in multi-line example):
	Adjust to expect correct line numbers.
	* specs/optparse_spec.yaml: Replace unicode characters with ASCII
	equivalents.
	* NEWS: Warn that unicode characters mess up libYAML indices.

	refactor: report errors and exit consistently.
	* specs/specl_spec.yaml: Add specifications for libYAML parser
	error output.
	* lib/specl/loader.lua (parser_mt:error): Don't raise an error
	and force a backtrace, just report the error and position to
	stderr then exit gracefully.
	(parser_mt:parse): Capture errors raised by libYAML and handle
	them with parser_mt:error, like everything else.
	* NEWS: Update.

	loader: report errors with macro expansion in Lua examples.
	Although macro.substitute_tostring doesn't raise any errors when
	the macro expansion is foiled, the errors it returns refer to
	the LuaMacro internal stack. Consequently, we overwrite those
	errors with something that helps point to the real cause of the
	problem - a parser error during expect() expansion.
	* specs/specl_spec.yaml: Specify error messages from common errors
	with incorrect number of closing parens to expect macro.
	* lib/specl/loader.lua (parser_mt:compile): Make macro expansion
	a separate step, and report any resulting errors before moving on
	to compilation of the result.
	* NEWS: Update.

	refactor: simplify a redundant function wrap and execute.
	* lib/specl/loader.lua (parser_mt:compile): No need to wrap the
	argument to loadstring in a function, and then execute the result
	to get back to the original function.  Remove the wrapper, and
	simplify. Remove the unwrap call.

	refactor: consolidate error reporting from Lua compilation.
	* lib/specl/loader.lua (parser_mt:compile): Always report error
	messages to standard error instead of raising an error. Simplify
	accordingly.
	* NEWS: Update.

	refactor: report <filename:line:errmsg> for compile errors.
	* specs/specl_spec.yaml: New examples for Lua code syntax errors
	at various positions within the spec file.
	* lib/specl/loader.lua (compile): Move from here...
	(parser_mt:compile): ...here. Use the filename for error messages,
	rather than spurious `location` parameter.
	Adjust all callers.
	* NEWS: Update.

	refactor: compile lua examples during spec loading.
	* lib/specl.lua (macro, compile_example): Move from here...
	* lib/specl/loader.lua (macro, compile): ...to here.
	* lib/specl.lua (reserved, compile_specs, compile_contexts)
	(compile_examples): Remove, no longer required.
	(run): Remove precompilation pass.
	* lib/specl/loader.lua (parser_mt:load_map): Compile string type
	map values upon loading.
	(parser_my:load_sequence): Compile befores and afters during
	hoisting.
	* lib/specl.lua (run_examples): Only run befores and afters if
	they are available.

	refactor: perform keyword hoisting during loading.
	* lib/specl.lua (compile_examples): Move keyword hoisting from
	here...
	* lib/specl/loader.lua (parser_mt:load_sequence): ...to here.

	refactor: move spec dir package.path injection into loader.
	* lib/specl.in (slurp): Move spec directory package path injection
	from here...
	* lib/specl/loader.lua (parser_mt:load_map): ...to here.

	loader: report parse error filename and line/column position.
	* lib/specl.in (slurp): Pass filename to load function.
	* lib/specl/loader (load): New filename parameter. Use it to
	call...
	(Parser): ...this constructor.  Also initialise line and column
	marker.
	(parser_mt:parse): Update line and column mark for each new event.
	(parser_mt:error): New metamethod, raise an error with parser
	filename, line number and column number of erroneous event.
	Update all error callers to use parser_mt:error wrapper instead.

	configury: add loader.lua to distribution file list.
	* local.mk (dist_luaspecl_DATA): Add lib/specl/loader.lua.

2013-09-10  Gary V. Vaughan  <gary@gnu.org>

	loader: rewrite spec loader using lyaml-4 low-level API.
	* lib/specl/loader.lua: New file. Load spec files using the
	lyaml-4 low-level API.
	* lib/specl.in: Use it.

	optparse: improve specs and fix uncovered buglets.
	* specs/optparse_spec.yaml: Add specs for parse:on.
	* lib/specl/optparse.lua (optional): Pass `nil` for missing optarg.
	(boolean): Default to `true` with nil valued optarg.
	Fold case of argument before value lookup.
	(file): Add a FIXME comment for when luaposix support is added.
	Don't pollute the global namespace.
	Use error message from io.open if opening fails.
	Return the passed argument in case of success.
	(M): Export the file function handler.

2013-08-30  Gary V. Vaughan  <gary@gnu.org>

	slingshot: sync with upstream, which requires lyaml 4+.
	* slingshot: Pick up recent improvements, particularly bootstrap
	bugfixes and revised backward-compatible lyaml 4 APIs.
	* bootstrap: Upgrade from slingshot.
	* rockspec.conf (dependencies): Require lyaml 4 or better.
	* lib/specl.in: Adjust for lyaml 4 APIs.
	* NEWS: Amend lyaml 4 compatibility note.

2013-07-28  Gary V. Vaughan  <gary@gnu.org>

	specl: compatibility with lyaml > 3.
	lyaml > 3 returns all documents in a YAML stream as a table, not
	just the first document.
	* lib/specl.in: Detect lyaml 4+ by whether 'require "yaml"'
	works, or else wrap the lyaml.load function return value in a
	table.
	* NEWS: Update.

	slingshot: sync with upstream.
	* slingshot: Pick up recent improvements, particularly compatibility
	with upcoming lyaml 4 release.
	* .travis.yml: Regenerate.

2013-07-26  Gary V. Vaughan  <gary@gnu.org>

	slingshot: sync with upstream.
	* slingshot: pick up recent improvements, particularly the
	generalisation of ldoc/luadoc handling for Travis CI.

2013-06-27  Gary V. Vaughan  <gary@gnu.org>

	docs: document all_of matcher adaptor.
	* docs/specl.md (Matcher adaptors): New section.
	(Matching alternatives with any_of): Push down heirarchy to be a
	subsection of new `Matcher adaptors` section.
	(Multiple matches with all_of): New subsection.

2013-06-26  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.
	* configure.ac (AC_INIT): Bump release number to 9.

	Release version 8
	* NEWS: Record release date.

	specs: correct output from instantiate_a matcher.
	Without this changeset, output from failed instantiate_a matches
	aresmooshedtogetherlikethis.
	* specs/spec_helper.lua (matchers.instantiate_a::format_actual):
	Add missing leading space.
	(matchers.instantiate_a::format_expect): Add missing leading space,
	and trailing comma.

	stdlib: sync with upstream.
	* lib/specl/std.lua: Improved Object implementation.
	Adjust all clients.
	* lib/specl/matchers.lua (Matcher::_type): Capitalize typename to
	match stdlib pattern.
	Adjust all clients.
	* lib/specl/shell.lua (Command::_type): Likewise.
	(Process::_type): Likewise.
	* lib/specl/util.lua (type_check): Detect an Object based type
	with `type (x) == "table" and Object.type (x) ~= "table"` rather
	than encoding knowledge about the object layout (which just
	changed with this update, and broke here in a hard to find way!).
	* specs/shell_spec.yaml: Adjust for capitalized type names.

2013-06-01  Gary V. Vaughan  <gary@gnu.org>

	formatters: no need to hardcode 'not yet implemented' in progress.
	* lib/specl/formatter/progress.lua (expectations): Like the report
	formatter, we can rely on status.ispending or expectation.pending
	to hold a suitable string, without hardcoding 'not yet implemented'
	as a fallback.

2013-05-31  Gary V. Vaughan  <gary@gnu.org>

	formatters: insert missing space in unexpected pass message for report.
	* lib/specl/formatter/report.lua: Insert a missing space in the
	unexpected pass message.

2013-05-25  Gary V. Vaughan  <gary@gnu.org>

	formatters: report pending argument strings consistently.
	* specs/formatter/spec_helper.lua (run_spec): Accept additional
	arguments to SPECL call.
	* specs/formatter/report_spec.yaml: Specify output for various
	combinations of pending calls in example specs.
	* specs/specl_spec.yaml: Loosen specification to allow additional
	pending argument display.
	* lib/specl/matchers.lua (pending): Always save the argument
	as a string, defaulting to "not yet implemented".
	* lib/specl/formatter/report_spec.yaml: Display pending argument
	strings consistently.
	* NEWS: Update.

	formatters: report 'No expectations' instead of 'nan% of expectations'
	* specs/formatters_spec.yaml: Move from here...
	* specs/custom_formatters_spec.yaml: ...to here.
	* specs/formatter/spec_helper.lua: New file. Implement spec
	runner helper.
	* specs/formatter/report_spec.yaml: Specify correct output from
	report formatter.
	* specs/specs.mk (specl_SPECS): Add
	specs/formatter/report_spec.yaml.
	(EXTRA_DIST): Add specs/formatter/spec_helper.lua.
	* lib/specl/formatter/report.lua (footer): When there are zero
	passing expectations, don't trigger a DIVBYZERO, just report "No
	expectations met".
	* NEWS: Update.

	docs: clarify YAML string quotation rules.
	* docs/specl.md (YAML): Not all punctuation forces description
	strings to require quotes, only punctuation that is ambiguous to
	the YAML parser.
	* specs/matchers_spec.yaml, specs/specl_spec.yaml: Remove
	unnecessary description quoting.

2013-05-24  Gary V. Vaughan  <gary@gnu.org>

	slingshot: sync with upstream.
	* slingshot: Sync with upstream for scm_rockspec distribution.

2013-05-22  Gary V. Vaughan  <gary@gnu.org>

	stdlib: sync with upstream.
	* lib/specl/std.lua (M.type): Use rawget to avoid triggering
	__index metamethod when _type is not present.

2013-05-21  Gary V. Vaughan  <gary@gnu.org>

	matchers: equal matcher now understands std.objects.
	* specs/matchers_spec.yaml: Specify desired behaviour when
	comparing objects with the equal matcher.
	* lib/specl/matchers.lua (objcmp): Compare the contents of
	std.object derived types.
	* docs/specl.md (equal): Update.
	* NEWS: Update.

2013-05-20  Gary V. Vaughan  <gary@gnu.org>

	matchers: contain matcher now accepts std.objects.
	Now that stdlib objects convert to tables by default (which in
	turn prettyprint with ordered keys suitable for expectations to
	compare against), should_contain can coerce an unknown object to
	a table and search within that.
	* specs/matchers_spec.yaml: Specify desired behaviour when passing
	an object to the contain matcher.
	* lib/specl/util.lua (type_check): Support "object" in the type
	list, to denote a table that object.type recognises.
	(M.totable): Re-export this from specl.std.
	* lib/specl/matchers.lua (matchers.contain): Accept an object, and
	coerce it to a table with std.table for comparison purposes.
	* docs/specl.md (contain): Update.
	* NEWS: Update.

	stdlib: import prettyprint improvements from upstream.
	* lib/specl/std.lua (render): Output table keys in order.
	(prettytostring): Omit quoting for table keys that are already
	valid symbol names.

	stdlib: resync from upstream and reorganise hierarchically.
	* lib/specl/std.lua (std): Return this new top-level namespace.
	(std.func): New namespace for std.functional apis.
	(std.string, std.io): Likewise.
	(std.table): Likewise, adding totable api from upstream.
	(std.object): Likewise, with a callable metatable like upstream.
	(std.strbuf): Likewise, sync with Object based upstream
	implementation.
	* lib/specl/util.lua: Adjust.

	stdlib: update object implementation from upstream.
	* lib/specl/std.lua (Object, new, object): Update to typed object
	from upstream.
	* lib/specl/util.lua (Object, typeof): Remove custom type layer.
	(object, object.type): Re-export apis from "specl.std".
	Adjust all callers.

	travis: regenerate .travis.yml.
	* .travis.yml: Regenerate from Slingshot.

2013-05-19  Gary V. Vaughan  <gary@gnu.org>

	slingshot: let slingshot manage its own files.
	* GNUmakefile, Makefile.am, build-aux/do-release-commit-and-tag,
	build-aux/gitlog-to-changelog, build-aux/mail, build-aux/mkrockspecs,
	build-aux/release.mk, build-aux/rockspecs.mk, build-aux/sanity.mk,
	build-aux/specl.mk, m4/ax_compare_version.m4, m4/ax_lua.m4,
	travis.yml.in: Remove.  Slingshot will pull back the right versions
	during bootstrap.
	* slingshot: New git submodule.
	* bootstrap, bootstrap.slingshot: Manually copy in from Slingshot.
	* .gitignore, bootstrap.conf, configure.ac: Adjust.
	* NEWS: Update.

	README: INSTALL is only available on release branch.
	* README.md: Fix url for Automake installed INSTALL file to point
	at release branch, where it is checked in.

	configury: don't force distribution of README.md.
	* Makefile.am (EXTRA_DIST): Don't force distribution of README.md.

	git: consolidate and simplify .gitignore.
	* bin/.gitignore, build-aux/.gitignore: Consolidate into...
	* .gitignore: ...here.  Simplify.

2013-05-18  Gary V. Vaughan  <gary@gnu.org>

	configury: support non-autotool LuaRocks installation.
	* Makefile.am, build-aux/mkrockspecs, build-aux/rockspecs.mk:
	Sync with upstream slingshot.
	* src/specl.in: Move from here...
	* lib/specl.in: ...to here.
	* configure.ac (SPECL_FALSE): Adjust.
	(AC_CONFIG_FILES): Generate a non-writeable bin/specl from
	lib/specl.in.
	(AM_INIT_AUTOMAKE): Remove `foreign` option, so
	that INSTALL is distributed, among other small nits.
	* lib/specl.in (@LUA@): Remove substituted value, and replace
	with a Bourne shell Lua search, and use that to re-execute.
	(package.path): Do not set here.
	* specs/specs.mk (specs/specl): Generate a wrapper to set
	LUA_PATH appropriately for running bin/specl in the build tree.
	(SPECL): Use it.
	* specs/specl_helper.lua (run_spec): Use it.
	* bootstrap: Create a README softlink to keep Automake happy.
	* src/.gitignore, src/specl.lua, specl/color.lua,
	specl/formatter/progress.lua, specl/formatter/report.lua,
	specl/formatter/tap.lua, specl/matchers.lua, specl/optparse.lua,
	specl/shell.lua, specl/std.lua, specl/util.lua: Move from
	here...
	* bin/.gitignore, lib/specl.lua, lib/specl/color.lua,
	lib/specl/formatter/progress.lua, lib/specl/formatter/report.lua,
	lib/specl/formatter/tap.lua, lib/specl/matchers.lua,
	lib/specl/optparse.lua, lib/specl/shell.lua, lib/specl/std.lua,
	lib/specl/util.lua: ...to here.
	* src/src.mk, specl/specl.mk: Consolidate into...
	* local.mk: ...here.
	* m4/.gitignore, specl/.gitignore, specs/.gitignore: Delete.
	* rockspec.conf (build.copy_directories): Add docs and bin.
	* NEWS, README.md: Update.

	specl: remove implicit imports misfeature.
	* src/specl.lua (initenv): No need to clobber the environment
	with everything in the table returned from any `require` in a
	spec file.
	* specs/shell_spec.yaml, specs/optparse_spec.yaml: Explicity
	import function symbols from `specl.shell` as needed.
	* NEWS: Update.

	typo: spell the matchers module name correctly in documentation.
	* docs/specl.md (Custom Matchers): The module is called `matchers`
	not `matcher`, and API calls are now fully qualified.

	typo: first "describe" in shell_spec.yaml should be "describe shell".
	* specs/shell_spec.yaml (describe specl): Rename from this...
	(describe shell): ...to this.

	typo: spell "find" correctly in a comment.
	* src/specl.lua: Spell "find" correctly in a comment.

2013-05-16  Gary V. Vaughan  <gary@gnu.org>

	specl: support new `any_of` matcher adaptor.
	* specs/matchers_spec.yaml, specs/shell_spec.yaml: Examples of
	new behaviours with `any_of` adaptor.
	* specl/matchers.lua (concat): Add a new `adaptor` parameter to
	decide between formatting a list with a final `or` or `and`
	depending on whether called from `any_of` or `all_of`.  Adjust
	all callers.
	(reformat): Likewise.
	(Matcher): Add a new `all_of?` receiver.
	(alternatives_msg): Factor out common code from `any_of?` and
	`all_of?` receivers.
	* NEWS: Update.

	refactor: rename format_any_of to format_alternatives.
	* specl/matchers.lua (Matcher.format_any_of): Rename from this...
	(Matcher.format_alternatives): ...to this. Adjust all callers.
	* docs/specl.md (Custom Matchers): Update.
	* NEWS: Update.

2013-05-13  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* configure.ac (AC_INIT): Bump relese to version 8.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 7
	* NEWS: Record release date.

	sanity: allow OptionParser in optparse error messages.
	* build-aux/sanity.mk: Update from slingshot.
	* build-aux/sanity-cfg.mk (sc_error_message_uppercase): Exclude
	specl/optparse.lua from check.
	(EXTRA_DIST): Add build-aux/sanity-cfg.mk.

	specl: remove reference to deleted specl.version module.
	* src/specl.lua: Remove `require "spec.version"`.
	(M._VERSION): Remove.

	util: remove reference to deleted specl.version module.
	* specl/util.lua: Remove `require "spec.version"`

	specl: much improved optparse specs, prompting some bug fixes.
	* specs/optparse_spec.yaml: Many, many more examples.
	* specl/optparse.lua (normalise): Don't add a phantom '-' to the
	end of split short options.
	(finished): Add to unrecognised list options *after* the '--' that
	got us here.
	(opterr): Add a missing period to the end of passed error message
	if necessary.
	(parse): Make unrecognised list an instance variable so that it
	can be augmented in `finished`.
	(M.new): Capture and handle `--` first, as it is a substring of
	long options and might match twice otherwise.
	Accept a comma after a long option to allow multiple spellings of
	a long option on the same line.
	Consume only one `-` prefixed word per iteration to ensure the
	handler patterns are compared against each one.

	specl: extract rather than hardcode default option specs.
	* specl/optparse.lua (set_handler): Diagnose multiple handlers.
	(new): Loop over option specification lines in the parsed help
	text, and set up default option handlers to match.

	specl: use optparse for command line option parsing.
	Make a start at replacing the current ad-hoc option parsing
	code with a more civilised module.
	* specs/optparse_specl.yaml: Write examples for the API we'd
	like to have.
	* specs/specs.mk (specl_SPECS): Add specs/optparse_specl.yaml.
	* specl/optparse.lua: New file, an option parser with a more
	civilised API.
	* specl/specl.mk (nobase_dist_lua_DATA): Add specl/optparse.lua.
	* src/specl.in: Use OptionParser instead of process_args.
	* specl/util.lua (warn, process_args): Remove.
	* specl/version.lua.in: Remove.
	* configure.ac (AC_CONFIG_FILES): Remove specl/version.lua.
	* local.mk (install_edit): Add various equivalent @PACKAGE@ etc.
	substitutions.
	(inplace_edit): Remove, it's a duplicate of $(install_edit).
	* src/src.mk (specl_inplace_edit): Start with $(install_edit).
	(docs/specl.1): Remove specl/version.lua dependency.

2013-05-12  Gary V. Vaughan  <gary@gnu.org>

	stdlib: use string_ext.escape_pattern instead of util.plain.
	* specl/std.lua (escape_pattern): Imported from upstream
	lua-stdlib.
	* specl/util.lua (plain): Remove. Re-export escape_pattern.
	Adjust all callers.

	formatters: display non-verbose inline summaries properly.
	* spec/util.lua (strip1st): Strip the 1st word, but NOT the only
	word!
	* spec/formatter/report.lua (tablulate): Use it. Reset colors
	correctly.
	(expectations): Show missing close-paren.
	* NEWS: Update.

	specl: be tolerant of spec descriptions that look like other types.
	* src/specl.lua (compile_examples): The rest of the code assumes
	that `description` is always a string.  Make it so.
	* NEWS: Update.

	matchers: be careful not to pass additional args to string.match!
	* specl/matchers.lua (matchers.contain): Wrap the returned
	values of util.plain in extra parens to discard all but the first
	return value before passing to string.match.
	* NEWS: Update.

2013-05-10  Gary V. Vaughan  <gary@gnu.org>

	docs: match <h2> anchor shortcuts with github.io generated html anchors.
	* docs/specl.md: The javascript at http://gvvaughan/github.io/specl
	rewrites h2 anchors with '-' separators.  Make sure the markdown
	shortcuts match.

2013-05-09  Gary V. Vaughan  <gary@gnu.org>

	docs: add missing docs for matchers.Matcher.format_any_of.
	* docs/specl.md (Custom Matchers): Document format_any_of
	constructor method.
	* NEWS: Update.

2013-05-09  Gary V. Vaughan  <gary@vaughan.pe>

	Merge pull request #9 from rrthomas/master
	.gitignore: add bin/

2013-05-08  Reuben Thomas  <rrt@sc3d.org>

	.gitignore: remove release-notes-* and add bin/

2013-05-08  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* configure.ac (AC_INIT): Bump version number to 7.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./local.mk (old_NEWS_hash): Auto-update.

	Release version 6
	* NEWS: Record release date.

	maint: relax load error matching patterns for luajit compatibility.
	Luajit returns errors from loadstring compiled code without line
	numbers or truncated input string, so relax the match patterns
	to accept either format.
	Thanks again, Travis!
	* specs/matchers_spec.yaml (error matcher): Relax error output
	matching for luajit.
	* specl/matchers.lua (matchers.error): Use long format for any_of
	reformatter, to match format_expect.

	maint: use Lua 5.2 compatible pattern escaping.
	Lua 5.1 accepts patterns with unknown % escapes treated as
	literals, but Lua 5.2 raises an error. Factor pattern escaping
	into a function.
	Thank you, Travis!
	* specl/util.lua (plain): New function to escape only pattern
	magic characters.
	* specl/matchers.lua (escape, reformat, matchers.error)
	(matchers.contain): Use it.
	* specl/shell.lua (matchers.contain_output)
	(matchers.contain_error): Likewise.

	docs: convert to jekyll markdown format.
	Updating the docs site is now a simple matter of copying this
	file to index.md in the gh-pages branch, and letting github do
	its magic to pick up the changes.
	* docs/specl.md: Add YAML frontmatter.
	Wrap code blocks in pygments highlight tags.
	Redo numbered headers with ## format markup for jekyll.
	Add markdown section anchors that match jekyll auto-generated
	anchors for easy cross-referencing.
	* NEWS: Update.

	refactor: untabify.
	Bring back zmacs... vi's TABy auto-indent is EVIL!
	* specl/color.lua, specl/formatter/progress.lua,
	specl/formatter/report.lua, specl/formatter/tap.lua,
	specl/matchers.lua, specl/util.lua, src/specl.lua: Untabify.

	refactor: remove `one_of` support, always use `any_of`.
	* specl/matchers.lua (Matcher["one_of?"}, Matcher.format_one_of):
	Renamed from these...
	(Matcher["any_of?"], Matcher.format_any_of): ...to these.
	Adjust all callers.
	(adaptor_error): Folded back into expect.__index.
	(expect.one_of): Remove.
	* specs/matchers_spec.yaml, specs/shell_spec.yaml: Adjust.
	* docs/specl.md: Update.
	* NEWS: Update.

	matchers: support `any_of` as an alias for `one_of`.
	* specl/matchers.lua (matchers.error): Display "no error" when no
	error message was raised, but one was expected.
	(adaptor_error): New function. Diagnose misuse of `should`
	adaptors.
	(expect): Don't overwrite full matcher name, use `matcher_root`
	to hold the matcher lookup key.
	Add support for `any_of` adaptor, mainly for use with `should_not`
	because `expect (1).should_not_be.one_of {1, 2 ,3}` reads badly.
	Call `adaptor_error` when an unsupported adaptor is called.
	* specs/matchers_spec.yaml: Lots more examples to exercise every
	permutation of matcher vs. not vs. one_of or any_of.

	refactor: move long format display from shell.lua to matchers.lua.
	* specl/matcher.lua (reformat): Rename single item reformatting
	from this...
	(_reformat): to this.
	* specl/shell.lua (concat): Move from here...
	* specl/matchers.lua (reformat): ...to here, making use of
	_reformat to simplify.
	(matchers.error): Use long format output.
	* specs/matchers_spec.yaml: Adjust.
	* specl/shell.lua: Simplify matchers accordingly.

	refactor: rename expect target parameter to actual.
	* specl/matchers.lua (expect): Rename <target> parameter to
	<actual> to match the rest of the code.

	refactor: no need to use matchers.stringify in shell.lua.
	* specl/shell.lua (matchers.exit): Use `tostring` instead of
	importing matchers.stringify into `q`.

	refactor: use Lua "%q" formatting instead of rolling our own.
	* specl/matchers.lua (q): Use Lua "%q" formatting instead of
	manually emulating it.

	matchers: support `one_of` syntax for alternatives.
	* specs/matchers_spec.yaml: Add `one_of` examples for every
	matcher.
	(it diagnoses zero alternatives with one_of): Add an example of
	getting a diagnostic from calling ...one_of {}.
	* specs/shell_spec.yaml: Add `one_of` examples for every matcher.
	* specl/matcher.lua (expect): Rename `matcher` parameter to
	`matcher_name`.
	(expect.__index:score): Factor out of returned function.
	(expect.__index): Return a functable instead of a function, with
	a `one_of` method, and a `__call` metamethod.
	(Matcher["one_of?"]): Call the matcherp predicate with every
	table entry, until one matches successfully.
	(Matcher): Add default for `format_one_of`.
	* specl/util.lua (concat): Factor pretty alternatives display
	formatting out of type_error.
	(M.QUOTED): Export a constant for self-documenting concat calls,
	using `concat (foo, util.QUOTED)`.
	(type_error): Simplify.
	* specl/matcher.lua (matchers.error, matchers.match)
	(matchers.contain): Add `format_one_of` methods.
	* specl/util.lua (type_check): Support '#table' in the typelist to
	specify a non-empty table.
	(type_error): Display nicely formatted error when an empty table
	is found when checking for '#table'.
	* specl/util.lua (map): Move above first use, in concat ().
	* docs/specl.md (Matching alternatives with `one_of`): Document it.
	* NEWS: Update.

	specl: show description and offset line for example compile errors.
	Previously, if the Lua code of any example failed, Specl would
	dump the stack, usually containing a useless list of nested
	run_context, run_examples etc etc.  We can already do a much
	better job than that... libyaml needs to provide the support
	for full and proper filewise line numbers though.
	* specs/specl_spec.yaml (it reports line of error): Example to
	demonstrate that the offset line of a compile failure is shown
	on stderr.
	* src/specl.lua (compile_example): Add a description parameter,
	and use it as a prefix for displaying the line offset for the
	failure, along with the Lua error.

	refactor: make output of failed expectations prettier.
	* specl/color.lua (shell): Rename from this...
	(match): ...to this. Adjust all callers.
	* specl/shell.lua (escape, colon): Move from here...
	* specl/matchers.lua (escape, reformat): ...to here. Adjust all
	callers.
	(M): Re-export reformat for use in specl/shell.lua.
	* specl/std.lua (prettytostring): New function, from lua-stdlib
	string_ext module.
	* specl/util.lua (prettytostring): Re-export std.prettytostring.
	* specl/matchers.lua (matcher.contain): Use prettytostring to
	show contents of failed expections with tables.
	* specs/matchers_spec.yaml, specs/shell_spec.yaml: Many new
	examples to verify prettier failed expectation output for each
	matcher.

	matchers: more powerful matcher result message API.
	* specl/matchers.lua (Matcher): Don't add spaces and commas auto-
	matically, assuming output always fits on a line, but do set
	format_actual and format_expect to provide that by default.
	Adjust all clients.
	* specl/color.lua (colormap): Add an entry for coloring shell
	output.
	* specl/shell.lua: Use new shell color, and new Matcher formatting
	API to present nicely formatted output and error stream display.

	std: add chomp from upstream lua-stdlib.
	* specl/std.lua (chomp): New function, from lua-stdlib string_ext.
	* specl/util.lua (chomp): Re-export std.chomp.

	color: use color.reset instead of "%{reset}".
	* specl/color.lua (colormap): Add reset.
	* specl/formatter/progress.lua, specl/formatter/report.lua: Use it.

	shell: add Process errout matchers.
	* specs/shell_spec.lua (output_error matcher)
	(match_error matcher, contain_error matcher): Specifications for
	new matchers to check the contents of stderr from a Process.
	* specl/shell.lua (matchers.output_error, matchers.match_error)
	(matchers.contain_error): Implement new matchers.

	specs: use unique description text in shell_spec.yaml.
	* specs/shell_spec.yaml: correctly describe the behaviour being
	checked.

	specs: test the correct matcher when tickling errors.
	* specs/shell_spec.yaml (contain_output matcher): Don't call the
	should_output matcher by mistake!

	shell: use the correct parameter name.
	* specl/shell.lua (matchers.match_output, matchers.contain_output):
	Format a correctly named parameter.

2013-05-07  Gary V. Vaughan  <gary@gnu.org>

	matchers: fix a message typo.
	* specl/matchers.lua (matchers.error): 'containing' has only one 'a'!

2013-05-05  Gary V. Vaughan  <gary@gnu.org>

	matchers: support custom matchers.
	* specl/matchers.lua (Matcher): matcher object factory.
	(matchers): Add metatable to verify assignments are objects
	from the Matcher factory.
	(matchers.equal, matchers.be, matchers.error, matchers.match)
	(matchers.contain): Rewrite with the API.
	(expect): Adjust calling convention accordingly.
	* specl/shell.lua: Rewrite shell matchers with the new API.
	* specs/spec_helper.lua (matchers.instantiate_a): Likewise.
	* docs/specl.md (Custom Matchers): New section. Document custom
	matchers API.
	* NEWS: Update.

2013-05-04  Gary V. Vaughan  <gary@gnu.org>

	util: matching a nil parameter with "any" type_check is ok!
	* specl/util.lua (type_check): Lua treats deliberate `nil`
	function arguments the same as omitted arguments, so don't raise
	an error for a `nil` argument matched against an "any" type.

	util: fix a misnamed local variable declaration.
	* specl/util.lua (type_error): Declare `expected` correctly.

2013-05-03  Gary V. Vaughan  <gary@gnu.org>

	shell: support running and matching state of shell commands.
	* specs/shell_spec.yaml: Specify desired behaviour for supporting
	executing and matching results from shell commands.
	* specs/specs.mk (specl_SPECS): Add shell_spec.yaml.
	* specl/shell.lua: New file, implemnting specs above.
	(Command): A util.Object type for specifying shell commands, along
	with environment variables and input source.
	(Process): A util.Object type for recording process status and
	outputs.
	(spawn): Execute a `Command` and return a `Process`.
	* specl/specl.mk (nobase_dist_lua_DATA): Add specl/shell.lua.
	* specl/matchers.lua (q): Export `q` to ease creation of additional
	matchers in other modules.
	* specl/shell.lua (exit, output, match_output, contain_output): New
	matchers for querying the state of a `Process` from `spawn`.
	* specs/spec_helper.lua (run_spec): Rewrite as a `specl/shell.lua`
	client.
	* specs/formatters_spec.yaml, specs/matchers_spec.yaml,
	specs/specl_spec.yaml: Adjust for changes in `run_spec`.
	* src/specl.lua (specl.cmdpipe): Remove undocumented function.
	* NEWS: Update.

	util: type aware Object wrapper, and parameter type checker.
	* specl/util.lua (Object): New prototype inheriting from std.Object.
	with the addition of a "type" field.
	(typeof): Report the type of Object derived objects, or defer to
	core type() for built in types.
	(type_check): Compare types from a parameter list against valid
	type list, raising an error for a type mismatch.
	(type_error): Write a parameter type mismatch error in the style
	of Lua core function parameter type errors.

	std: import clone_rename, merge, and Object from lua-stdlib.
	* specl/std.lua (clone_rename, merge, Object): Import from
	lua-stdlib.
	(M): Export them.

	specs: nested expect calls don't need `require "specl"`.
	* specs/matchers_spec.yaml (contain matcher, match matcher):
	Remove noisy require and `specl.` table qualifiers.

	specs: copy symbols from `require "foo"` into local env.
	* src/specl.lua (initenv.require): Support consistent use of
	`require "foo"` to import foo's global symbols into the local
	environment, even when foo uses modern `return API_table` style.

2013-05-01  Gary V. Vaughan  <gary@gnu.org>

	maint: update slingshot.
	* local.mk: Move local changes from Makefile.am to here, to
	match latest slingshot usage.
	* GNUmakefile, Makeflie.am, build-aux/release.mk,
	build-aux/specl.mk, specs/specs.mk: Update form slingshot
	upstream.
	* connfigure.ac: Merge changes from slingshot.
	* m4/ax_with_prog.m4: Remove.
	* .travis.yml: Regenerate.
	* specs/formatters_spec.yaml, specs/matchers_spec.yaml,
	specs/spec_helper.lua, specs/specl_spec.yaml, src/src.mk: Update
	local specl path to new bin/specl location.

	travis: make check in verbose mode.
	* .travis.yml: Regenerate.

	travis: let luarocks install dependencies to catch any missed ones.
	* travis.yml.in (script): Remove inessential rock preinstallations.
	Don't forget to run self-tests.
	* .travis.yml: Regenerate.

	portability: use {...} instead of table.pack (...).
	* src/specl.in (slurp): table.pack is not supported by Lua 5.1,
	so use {...} notation instead for compatibility with 5.1 and
	5.2.

	configury: remove needless subdir-objects option.
	* configure.ac (AM_INIT_AUTOMAKE): Remove subdir-objects option.
	We don't have any compiled objects at all!

	configury: remove unused auxdir macro.
	* Makefile.am (auxdir): Remove.

	maint: distribute README.md.
	* Makefile.am (EXTRA_DIST): Add README.md.
	(old_NEWS_hash): Move into bootstrap section of the file.

	maint: bump version to 6.
	* configure.ac (AC_INIT): Bump version number to 6.

	formatters: non-verbose inline report summaries.
	* specl/formatters/report.lua (expectations): Keep track of
	pending, failing and unexpectedly passing expectations, for
	display as a per-example summary in non-verbose mode.

	refactor: rearrange specl function into a more logical order.
	* src/specl.lua: Reorder function definitions.

	specl: top-level before and after support.
	* src/specl.in (slurp): Hoist document-level before and after
	functions out of the enumerated examples table.
	Prepend the current spec directory to `package.path`.
	* specs/specl_spec.yaml (describe specl before): Move from
	here...
	* src/specl.lua (run): Top level now has hoisted before and
	afters, so pass it to `run_examples` rather than `run_contexts`.
	(compile_specs): Likewise.
	* specs/spec_helper.lua (run_spec): ...to here.
	* docs/specl.md (Separating Helper Functions): Add documentation
	and a basic example.
	* NEWS: Update.

	specl: remove dead code from Lua spec format days.
	* src/specl.lua (compile_examples): No need to check for already
	compiled code now that we only support YAML specs.
	(compile_example): Simplify accordingly.

	specl: initialise spec environments earlier.
	* src/specl.lua (run_examples): initialise with local symbols
	earlier, so that they are available to before and after blocks.

	specl: require now works intuitively from a spec file.
	* specs/environmest_spec.yaml (describe environments): Change
	specifications to how require calls should affect the lookup of
	symbols they define.
	* src/specl.lua (initenv): Before deferring to the system
	loaders, try to find a required file along package.path and if
	found, load it in the context of the innermost environment.
	* docs/specl.md (Environments verses `require`): Remove.
	`require` works properly in spec files now.
	* NEWS: Update.

	specl: support multi-document YAML stream files.
	* src/specl.in (slurp): Don't discard additional documents from the
	yaml.load stream.
	* NEWS: Update.

2013-04-29  Gary V. Vaughan  <gary@gnu.org>

	maint: post-release administrivia.
	* NEWS: Add header line for next release.
	* .prev-version: Record previous version.
	* ./Makefile.am (old_NEWS_hash): Auto-update.

	Release version 5
	* NEWS: Record release date.

	specs: remove speclc_spec.yaml.
	* specs/speclc_spec.yaml: Remove. speclc was removed already.

	maint: move to slingshot release framework.
	* .autom4te.cfg: Turn off auto4mte.cache directories.
	* travis.yml.in: Continuous Integration configuration.
	* .travis.yml: Regenerate.
	* configure.ac (AC_CONFIG_FILES): Generate .travis.yml.
	* build-aux/mkrockspecs: Upgrade from Slingshot.
	* build-aux/mail, build-aux/release.mk, build-aux/rockspecs.mk,
	build-aux/sanity.mk: Slingshot release and rockspec rules.
	* specs/specs.mk, src/src.mk: Adjust.
	* GNUmakefile: Adjust, and correct typo found by sanity checks.
	* Makefile.am (release_extra_dist): Override this, because we're
	not using the huge rewritten gnulib bootstrap (there's no need
	since we don't compile anything, and only use Automake and Auto-
	conf).
	* docs/specl.md: Remove trailing whitespace.

2013-04-28  Gary V. Vaughan  <gary@gnu.org>

	AUTHORS: Fix a typo.

	mkrockspecs: rewritten to load a yaml conf.
	* rockspec.conf: New file. Specl specific rockspec configuration.
	* build-aux/mkrockspecs: Rewritten.  Works like a real program
	now, processing options and loading configuration from a
	standard './rockspec.conf' in YAML format, otherwise stdin.
	* build-aux/rockspec-template.lua: Remove. Baked into mkrockspecs
	now, instead.
	* build-aux/luarocks.mk: Move from here...
	* build-aux/rockspecs.mk: ...to here.
	($(package_rockspec), $(scm_rockspec)): Adjust for lack of
	template.
	* Makefile.am: Adjust includes for new file location.

	maint: factor out useful common make rules.
	* build-aux/luarocks.mk: New file. Factored out of...
	* Makefile.am: ...here.
	* build-aux/release.mk: New file. Factored out of...
	* GNUmakeflie: ...here.
	* build-aux/mkrockspecs: Adjust parameters to include a rockspec
	revision number as parameter 3.
	* rockspecs.lua: Move from here...
	* build-aux/rockspec-template.lua: ...to here. Interpolate new
	revision argument.
	* .travis.yml: Adjust for new location of luarocks-config.lua.
	* .gitignore, build-aux/.git-ignore: Adjust.

	maint: use NEWS based release notes for woger.
	* GNUmakeflie (release-prep-hook): Set to default release-prep
	rule.
	(announcement): New rule. Output the relevant section of NEWS.
	(release-prep): New rule. Generate a release announcement, plus
	assorted post-release book-keeping.
	(release): Use it.

	maint: refactor maintainer release rules.
	* GNUmakefile: Re-order so that the main 'release' and then 'alpha
	beta stable' rules are at the top, with everything else following
	in normal execution order.
	(release, alpha beta stable, check-in-release-branch): No need
	to tie rule commands together with '&& \' suffixes, just to
	make sure the rule aborts on the first error... make does that
	anyway!
	(news-today): Rename from this...
	(today): ...to this.
	(PREV_VERSION): No need to assign with :=, calling $(shell) runs
	immediately anyway.
	(unpack-distcheck-release): Inline to only caller.

	maint: abort release with uncommitted changes.
	* GNUmakefile (vc-diff-check): Git optimised version of the
	vc-diff-check rule from gnulib/maint.mk.
	(alpha beta stable): Use it.

	maint: only push new refspecs on release.
	* GNUmakefile (GIT_PUBLISH): Remove.
	(release): Explicitly push master, release and the new release
	tag from each.

	maint: fix VPATH builds of rockspecs.
	Now that we ship the release rockspec, it needs to work with a
	VPATH build otherwise distcheck doesn't complete.
	* build-aux/mkrockspecs: make already knows where it wants the
	output file, so just write to stdout...
	* Makefile.am: ...which is redirected to the correct location at
	make time.
	* build-aux/mkrockspecs: Move rockspec lint call from here...
	* Makefile.am: ...to here.

	configury: use configure to find sed and egrep.
	* GNUmakefile (EGREP, SED): Remove.
	* configure.ac (AC_PROG_EGREP, AC_PROG_SED): Add.

	maint: remove GNUisms from do-release-commit-and-tag.
	* build-aux/do-release-commit-and-tag: Allow non-dot version
	numbers.
	Use a nicer commit message: 'Release version vNNN'.
	(func_sort_ver): New function.  Use it instead of GNU only
	'sort -V'.
	* Makefile.am (EXTRA_DIST): Add do-release-commit-and-tag.

	maint: adopt do-release-commit-and-tag plus Make rules from gnulib.
	* build-aux/do-release-commit-and-tag: New file, from gnulib.
	* .prev-version: New file.  Previous release version number,
	required by do-release-commit-and-tag.
	* GNUmakefile: Add associated rules from gnulib GNUmakefile and
	maint.mk to improve make automated releases.
	(rockspecs): Move rockspec rules from here...
	* Makeflie.am (rockspecs): ...to here.
	(EXTRA_DIST): Add release rockspec.

	maint: use a NEWS file for user visible changes.
	* NEWS: New file.  Import RELEASE-NOTES from earlier releases.
	* .gitignore: Update.

	maint: improve the release rules for single directory process.
	* GNUmakefile: Tidy up formatting, and then simplify and fix
	release rules to always add only released files to the release
	branch.

	formatters: load unprefixed formatters from LuaRocks install.
	Now that we correctly install Specl lua files with LuaRocks, they
	are actually moved into the standard LUA_PATH automatically.  So,
	the long $(luadir)/specl/formatter/?.lua won't find them, and we
	have to augment the --formatter optarg on load failure to look in
	the right directory under the standard LUA_PATH.
	* src/src.mk (INSTALL_PATH): Remove useless formatter segment.
	* specl/version.lua.in (M["--formatter"]): If straight formatter
	load fails, try again with "specl.formatter." prefixed.

	specl: remove loadstring fallback for failed yaml load.
	* src/specl.in (slurp): Go straight to setting an error messaage
	if the yaml.load fails.

2013-04-11  Gary V. Vaughan  <gary@gnu.org>

	configury: make sure we have a src subdir in VPATH builds.
	* src/src.mk (src/specl): Make a `src` sub-directory if we don't
	already have one.

	maint: move specl and specl.lua to a new src directory.
	Previously, when setting the path to .../specl/?.lua so that
	`require "specl"` works, it also means that `require "std"` will
	find `.../specl/std.lua` instead of lua-stdlib's installed version.
	* specl/specl.in, specl/specl.lua: Move from here...
	* src/specl.in, src/specl.lua: ...to here.
	* specl/specl.mk: Move all but nobase_dist_lua_DATA from here...
	* src/src.mk: New file. ...to here.
	* specl/.gitignore: Move /specl from here...
	* src/.gitignore: New file. ...to here.
	* Makefile.am: Include new src.mk makeflie fragment.
	* specs/formatters_spec.yaml, specs/matcher_spec.yaml,
	specs/specl_spec.yaml: Adjust for new location of specl program.
	* rockspecs.lua: Make sure we install to the directory LuaRocks
	knows about.

2013-04-10  Gary V. Vaughan  <gary@gnu.org>

	configury: fix 'make distcheck'.
	* GNUmakefile (MKROCKSPECS): Spell mkrockspecs without .lua suffix.
	* specl/specl.mk (EXTRA_DIST): Likewise.
	* Makefile.am (EXTRA_DIST): Spell specl-rockspec.lua as
	rockspecs.lua.

	formatters: display elapsed wall clock time in summary.
	* specl/matchers.lua (M.stats.starttime): Call os.time instead of
	os.clock, to get wall clock time instead of CPU seconds burned.
	* specl/formatter/progress.lua (footer): Likewies when calculating
	the elapsed time to display.
	* specl/formatter/report.lua (footer): Likewise.

	specs: remove speclc and lua spec compatibility.
	There is too much magic involved in hand-writing a compatible
	Lua format specfile now.  Remove support and simplify accordingly.
	* build-aux/speclc.in: Remove.
	* specs/specs.mk: Remove speclc creation and all invocations.
	(.yaml.lua, specl_LUASPECS): Remove.

	configury: move to updated lua-stdlib machinery.
	* build-aux/mkrockspecs.lua: Remove...
	* build-aux/mkrockspecs: ...and replace with lua-stdlib master
	version.
	* specl-rockspec.lua: Move from here...
	* rockspecs.lua: ...to here.
	* GNUmakefile: Adjust accordingly.

	configury: simplify bootstrap a little.
	* bootstrap.conf: Remove.
	* bootstrap: Create ChangeLog stub. Call autoreconf. Nothing more.
	* GNUmakefile (Makefile.in): Remove unused bootstrap arguments.

	configury: remove spurious ROCKSPEC_ENV reference.
	* GNUmakefile (MKROCKSPECS): Remove unused $(ROCKSPEC_ENV).

2013-04-09  Gary V. Vaughan  <gary@gnu.org>

	docs: correct some small mistakes in README.md.
	* README.md (SPECL): Add missing 'a'.
	(Installation): Specl uses bootstrap, not autoreconf.

	configury: remove checks for C compilation.
	* configure.ac (AM_PROG_AR, AC_PROG_CC, AX_LUA_HEADERS): Remove.
	None of these are used unless we have C code to compile.

	maint: bump version to 5.
	* configure.ac (AC_INIT): Bump version number to 5.

2013-04-08  Gary V. Vaughan  <gary@gnu.org>

	matchers: error matcher no longer requires reversed arguments.
	* specs/matchers_spec.yaml (error matcher): Specify all the
	behaviours of a normal argument order `should_error` based
	expectation.
	* specs/speclc_spec.yaml (it expands the expect macro): Specify
	the format of expanded expect calls.
	* build-aux/speclc.in (dump_example): Implement it.  Use a
	LuaMacro to inject a pcall into the expect expression.
	* specl-rockspec.lua (dependencies): Add luamacro >= 2.2.0.
	* specl/specl.lua (compile_example): Use the same LuaMacro to
	inject a pcall into compiled YAML chunks.
	(run_examples): Rename expect to _expect in the sandbox env to
	match the name in the expanded expect pcall.
	* specl/matchers.c (expect): New `ok` parameter to capture the
	pcall status.  Pass `ok` to the selected matcher handler.
	(matchers.error): Require arguments in the same order as the
	other matchers, plus a new `ok` parameter.
	* specs/matchers_spec.yaml: Fill in the remaining specifications
	for all currently implemnted matchers.

	docs: reorganise and simplify.
	* README.md: Move usage documentation from here...
	* docs/specl.md: ...to here.
	* .gitignore: Adjust.

2013-04-07  Gary V. Vaughan  <gary@gnu.org>

	maint: display build badge for master branch only.
	* README.md: Don't show failing builds from experimental/release
	branch commits.

2013-04-06  Gary V. Vaughan  <gary@gnu.org>

	maint: failing tests now causes Travis CI to fail the whole build.
	* .travis.yml (after_script): Exit status here has no effect on
	failure or otherwise.  Moved from here...
	(script): ...to here, where failing tests will be reported as a
	failing build.

	specs: propagate package.path to specl subprocesses.
	* specs/specl_spec.yaml (specl.before::run_spec): Add the package.
	path to forked specl command so that it has access to ansicolors
	et.al. from the parent LUA_PATH, which may have been carefully set
	to match the interpreter by the caller.
	* specs/formatters_spec.yaml (formatters.before::run_spec): Ditto.
	Also, escape single quotes in yaml before passing to printf.

	maint: pass LUA to all make invocations for Travis CI.
	* .travis.yml (script): Pass LUA to all make invocations.

	rockspecs: fix a typo in mkrockspecs.lua script.
	* build-aux/mkrockspecs.lua: LUAROCKS has only one R in it!

	configury: fix a typo in luarocks-config.lua rule.
	* GNUmakefile (luarocks-config.lua): Come out of single-quotes to
	allow expansion of LUA_INCDIR and LUA_BINDIR.

	maint: remove remaining references to removed speclcpath.
	* build-aux/speclc.in (package.cpath): Remove.
	* specl/specl.in (package.cpath): Remove.

	configury: use check_local to pass back specs local rule.
	* specs/specs.mk (check-local): Rename from this...
	(specs-check-local): ...to this.
	(check_local): Append specs-check-local.

	maint: show verbose make check output in Travis CI logs.
	* .travis.yml (after_script): Set V=1 for verbose make output.

	maint: set local luarocks path before make check in Travis CI.
	* .travis.yml (after_script): Set local luarocks path before
	running make check.

	maint: use proven Travis CI build recipes from lyaml.
	* .travis.yml: Overhaul according to lyaml recipes.
	* GNUmakefile (luarocks-config.lua): In order to work correctly
	with a given lua interpreter for a particular luarcoks tree, make
	sure to set the appropriate luarocks variables when writing a
	luarcoks-config.lua. Also, take care to honour environment
	values for those variables at make-time, because the user probably
	knows better how their environment is set up than the generic
	make rules can!
	* README.md: Add travis build status badge markup.
	* build-aux/mkrockspecs.lua: Use the user selected luarocks
	invocation to execute luarocks lint.
	* specl-rockspec.lua (build.build_command): Pass $(LUA) as a
	configure precious variable so that latest ax-lua.m4 uses it as
	passed instead of running the hardcoded search for a lua binary.

2013-04-05  Gary V. Vaughan  <gary@gnu.org>

	maint: install correct libyaml package for Travis CI.
	* .travis.yal (install): spell libyaml with a -dev on the end!

	maint: install libyaml for Travis CI.
	* .travis.yml (install): libyaml is a build requirement.

	maint: install requisite luarocks for Travis CI.
	* .travis.yml (script): Install ansicolors and lyaml.

	maint: install help2man for travis.
	* .travis.yml (install): help2man is a build requirement.

	maint: relax autoconf requirement to v2.68.
	* configure.ac (AC_INIT): 2.68 is new enough, and is the newest
	version available by default on Travis CI server.

	maint: use travis CI server.
	* .travis.yml: New file. Travis CI directives.

2013-04-03  Gary V. Vaughan  <gary@gnu.org>

	maint: update TODO.
	* TODO.yaml (pending support): Remove.  Pending is fully
	implemented now.
	(report line numbers of pending and failed examples): New entry.

	specs: remove nonsense pending with before examples.
	A spec that contains before/after actions is not empty, so it
	is non-sensical to expect that non-empty specification to be
	pending by default, even though it has no non-reserved word
	examples.
	* specs/specl_spec.yaml (it is pending with a lone before)
	(it is pending with a lone after, it is pending with before and)
	(after): Remove.

2013-03-29  Gary V. Vaughan  <gary@gnu.org>

	docs: clarify documentation of custom formatters.
	* README.md (Custom Formatters): Edit for clarity and accuracy.

	docs: document string argument to pending call.
	* README.md (Pending Examples): Document string argument to
	pending call.

2013-03-24  Gary V. Vaughan  <gary@gnu.org>

	matchers: report pending argument for pending passes.
	* specl/matchers.lua (M.pending): Accept and store an optional
	argument.
	(M.expect): Copy pending argument to expectations status table.
	* specs/specl_spec.yaml: Remove pending call from newly passing
	example.
	* specl/formatters/progress.lua (expectations): If a value was
	stored in the pending field, display it in the pending report.
	* specl/formatters/report.lua (expectations): Likewise.

2013-03-22  Gary V. Vaughan  <gary@gnu.org>

	formatters: new TODO items for pending behaviour as pending specs.
	* specs/specl_spec.yaml: New TODO items for pending behaviour as
	pending specs.

	matchers: diagnose passing expectations in pending examples.
	* specs/specl_spec.yaml: Rearrange slightly to make room for a
	new specification for unexpected passes in pending examples.
	* README.md (Pending Examples): Document reporting of unexpected
	passes with the built in formatters.
	(Custom Formatters): Document changes to the expectations API
	needed to support this.
	* specl/colors.lua (colormap.warn, colormap.strong): New colors
	for unexpected pass reporting.
	* specl/formatter/progress.lua (expectations): Return unexpected
	pass report strings, and display a `?` in the progress bar.
	(footer): Report unexpected passes in the summaries.
	* specl/formatter/report.lua (expectations, footer): Likewise,
	except of course there is no progress bar with this formatter,
	so display the unexpected pass report in the main output when
	verbose is set.

	formatters: handle 0 expectations gracefully.
	* specs/specl_spec.yaml: Specify "No expectations" behaviour.
	* specl/formatter/report.lua (footer): If expectations was never
	called, then report will be nil; so guard report dereferencing to
	avoid a crash.
	* specl/formatter/progress.lua (footer): Likewise.
	Also, change summary to say "No expectations met" when none were
	given.

2013-03-20  Gary V. Vaughan  <gary@gnu.org>

	maint: bump version to 4.
	* configure.ac (AC_INIT): Bump version number to 4.

	specl: report YAML compilation failures.
	* specl/specl.lua (compile_example): Report loadstring error
	messages.
	Add newline before function closing `end` incase the previous line
	ends in a comment.
	* TODO.yaml: Remove fixed item.

	refactor: move color selection to specl/color.lua.
	To provide a more uniform use of color between built in formatters,
	factor out hard-coded colors and look them up by content type.
	* specl/color (colormap): Tabulate names of some useful colors, and
	return it, defaulting to underlining unknown color lookups.
	* specl/formatters/progress.lua, specl/formatters/report.lua: Use
	it.

	formatters: always show fail summary, use verbose for inline.
	You shouldn't need to specify `--verbose` on the command line to
	get a summary of failing and pending examples, show them all the
	time by default.  The `--verbose` switch now enables additional
	inline reporting, where that makes sense.
	* specl/formatter/progress.lua (footer): Always show summaries.
	* specl/formatter/report.lua (footer): LIkewise.
	(expectations): Show additional inline pending and failing reports
	in verbose mode.
	* GNUmakefile (specl_verbose_0): With V=1 use report formatter in
	verbose mode, otherwise default formatter.

	formatters: use table accumulators to collect pending reports.
	* specl/formatter/progress.lua (expectations): Split returned
	value into a `pend` and `fail` reports.
	(footer): Display `pend` and `fail` summaries in verbose mode.
	* specl/formatter/report.lua (expectations, footer): Likewise.
	* specl/formatter/tap.lua (expectations): Display pending reports
	inline as TAP comments.

	formatters: provide a richer accumulator API for custom formatters.
	* README.md (Custom Formatters): Document the richer API.
	* specs/formatters_spec.yaml: New file. Specify accumulator API
	behaviour.
	* specs/specs.mk (specl_SPECS): Add specs/formatters_spec.yaml.
	(specl_LUASPECS): Add specs/formatters_spec.lua.
	* specl/specl.lua (accumulator): Implement it.

2013-03-19  Gary V. Vaughan  <gary@gnu.org>

	maint: adjust output from compiled Lua spec files.
	Since we effectively run every specification twice to make sure
	support for Lua specs isn't broken, tweak the descriptions of
	compiled specs so we can tell them apart in failure summaries.
	* specs/specs.mk (.yaml.lua): Inject '(Lua spec)' into top-level
	describe entries as compiled specs are written to disk.

	formatters: tweak color output for report formatter.
	* specl/formatter/report.lua (footer): Use blue instead of red
	for the failing report header output.

	maint: remove completed TODO items.
	* TODO.yaml: Remove completed TODO items.

	matchers: report an empty example definition as a pending example.
	* README.md (Pending Examples): Update to document empty example
	definitions as denoting a pending example.
	* specs/specl_spec.yaml: Remove pending status for empty example
	definition specifications.
	* specl/specl.lua (compile_examples): Replace any empty definition
	with a call to `pending` before compiling.
	* specs/speclc_spec.lua: New file. Specify that the compiler must
	produce a Lua format spec file with a call to `pending` injected
	into otherwise empty example definitions.
	* specs/specs.mk (specl_SPECS): Add specs/speclc_spec.yaml.
	(specl_LUASPECS): Add specs/speclc_spec.lua.
	* build-aux/speclc.in (dump_example): Replace otherwise empty
	example definitions with a call to `pending`.

	matchers: preliminary support for pending expectations.
	* README.md: Document required behaviour of pending examples.
	Edit the surrounding text so that the new section fits in to
	the narrative logically.
	* specs/specl_spec.yaml: New examples to show how pending
	examples should work.  Some are still pending!
	* specl/specl.lua (run_examples): Change the formatters API
	slightly, because we don't want to have already displayed an
	example description on the previous line before we know whether
	the description is for a still pending example.
	* specl/formatter/progress.lua (expectations): Decode the new
	status parameter table to display pending examples as '*'.
	* specl/formatter/report.lua (tabulate): Make a suitably
	colorful output table element.  Factored out of spec.
	(spec): Adjust.
	(example): Remove.
	(expectations): Decode the new status pararameter table to show
	whether the whole example is pending, or that the expectations
	are specifying currently unimplemented behaviour.
	* spelc/formatter/tap.lua (expectations): Likewise.
	* specl/formatter/progress.lua (footer): Show pending examples
	in statistics.
	(M): Remove unused example entry point.
	* specl/formatter/report.lua, specl/formatter/tap.lua (footer)
	(M): Likewise.
	* specl/matchers.lua (M.init): New entry point to prepare for
	a new block of expectations, that keep track of pending status.
	(M.status): New entry point. Return results after a block of
	expectations have run.
	* specl/specl.lua (run_examples): Use them instead of hard-
	coding.
	* specl/matchers.lua (M.stats): Add pend counter.
	(M.expect): Don't try to match an expectation for a pending
	example, or count it's status.
	(M.pending): New entry point, put the current expectation block
	in pending mode, and increment pend counter.

	docs: re-organise and edit README.md to make way for pending docs.
	* README.md (YAML): Split out from the Specifications section.
	Don't list the quirks at the end, explain them in the main text
	of this section.
	Renumber following sections accordingly.
	(Contexts): Introduce an example right away.
	(Pending Examples): Pending.
	(Custom Formatters): Describe API changes necessary to support
	display of pending expectations and examples.

2013-03-18  Gary V. Vaughan  <gary@gnu.org>

	refactor: move command pipe managment into environment sandbox.
	Generalize the output and exit status capturing functions into
	the outermost environment sandbox, where it can be used by any
	spec-files.
	* specs/specl_spec.yaml (exit_status, capture_output): Refactored
	from here...
	* specl/specl.lua (env.spec.cmdpipe): ...to here.
	* specs/specl_spec.yaml (run_spec): New helper function, wrapping
	spec.cmdpipe.
	Adjust all callers.

	matchers: use util.tostring to display tables for diagnostics.
	* specl/matchers.lua: Import specl.util.
	(q): Use util.tostring so that tables output by failed expectations
	are legible.

	refactor: move non-lua-stdlib functions out of specl.std.
	* AUTHORS: Credit Reuben Thomas for the contents of
	specl/std.lua.
	* specl/std.lua: Change copyright header to refrect the correct
	copyright and license terms of the code in this file.
	(prog, warn, process_args): Move from here...
	* specl/util.lua (prog, warn, process_args): ...to here.
	* specl/std.lua (metatable, strbuf,clone, metamethod, render)
	(tostring): New functions.  Copied from, or trivial reworkings of
	code from lua-stdlib.
	(M): Update accordingly.
	* specl/util.lua: Import specl.std.
	(M.process_files, M.slurp, M.tostring): Re-export functions from
	specl.std.
	* specl/specl.in: Import those APIs from specl.util instead of
	specl.std.

	refactor: use canonical util.nop everywhere.
	* specl/specl.lua (nop): Remove.
	(compile_example): Use util.nop.

	specl: improve --help output.
	* specl/version.lua.in (M["--help"]): Improve --help output
	formatting, and correct an inaccuracy in --verbose description.

	docs: recommend --help for more info, -h was a typo.
	* README.md (Command Line): Fix a typo.

	refactor: encapsulate coloring into util.princ.
	* specl/util.lua: Require "specl.color".
	(M.princ, M.writc): Wrap ansicolor printing with princ, and
	io.stdout:write with writc.
	* specl/formatter/progress.lua, specl/formatter/report.lua:
	Require "specl.util" instead of "specl.color".
	Use princ and writc wrappers.

	specl: -v doesn't change formatter, support -f for that.
	* README.md (Command Line): Document change of meaning for
	`--verbose`.
	* specl/version.lua.in (M.opts): Default verbose to false.
	(M["--help"]): Document changes to command line interface.
	(M["--verbose"]): Don't change formatter, set verbose mode.
	(M["-f"]): An alias for `--formatter`.
	* specl/formatter/progress.lua, specl/formatter/report.lua
	(footer): Only show the failure summary in verbose mode.
	* GNUmakefile (specl_verbose_0): Pass `--verbose` to get failure
	summary.
	* specl/std.lua (process_args): Support short option arguments.
	(specl_verbose_1): Additionally, switch to the report formatter.

	rockspecs: fix a typo, and remove unused configure flags.
	* specl-rockspec.lua (dependencies): spell ansicolors correctly.
	(build.build_command): Remove unused YAML flags.

	configury: distribute specl/util.lua.
	* specl/specl.mk (nobase_dist_lua_DATA): Add specl/util.lua.

	refactor: move common formatter helpers into specl.util module.
	* specl/util.lua (map, strip1st, indent, nop): New file.
	* specl/formatter/progress.lua, specl/formatter/report.lua,
	specl/formatter/tap.lua: Import those functions from specl.util
	and remove local copies.
	* specl/formatter/progress.lua (expectations, footer): Display
	a failed expectation summary in the footer output.

	formatters: redisplay failed test reports in output footer.
	* README.md (Custom Formatters): Document accumulator feature of
	new custom formatter API.
	* specl/formatter/report.lua (map, strip1st): New functions,
	copied from tap.lua.
	(expectations): Return a separate but unindented concatenated
	string of all failure reports.
	(footer): Summarize failure reports.
	* specl/specl.lua (accumulator): New function to accumulate a
	string from pieces.
	(run_contexts, run_examples): Pass returned strings from formatter
	API calls to accumulator.
	(run): Initialise the formatter accumulated string, and then pass
	the result to formatter.footer.

	docs: many fine improvements to README.md.
	* README.md: Proof read the file carefully, and make corrections
	for grammar, spelling and clarity.

	docs: improve installation instructions.
	* README.md (Installation): New section.  Describe installation
	options.  Renumber following sections.

	refactor: generalize std.lua, move Specl specifics to version.lua.
	* specl/std.lua (optarg): Remove.
	(process_args): Remove Specl specific option processing, in favor
	of tabulated general option processor.
	* specl/version.lua.in (M): Tabulate option processing in terms
	of handler functions.
	(M.opts): Default option settings.

	refactor: simplify option processing.
	* specl/version.lua.in (M.PACKAGE, M.PACKAGE_NAME)
	(M.PACKAGE_BUGREPORT, M.VERSION, M.Name, M.program)
	(M.COPYRIGHT_STRING, M.COPYRIGHT_NOTICE, M.BUGREPORT_NOTICE):
	Remove.
	* specl/std.lua (prog.version, prog.usage): Move from here...
	* specl/version.lua.in (M.version, M.usage): ...to here, and
	simplify.

	formatters: color output on ANSI terminals.
	* specl-rockspec.lua (dependencies): Add ansicolor.
	* specl/std.lua (prog.usage): Describe new --color option.
	(optarg): Factor out extraction of argument options after '='.
	(process_args): Use it for --formatter processing.
	Add support for --color option.
	* specl/specl.in (opts): Make global, for visibility in color.lua.
	* specl/color.lua (color): New file.  Enable or disable colored
	output according to opts.color setting.
	* specl/specl.mk (nobase_dist_lua_DATA): Add color.lua.
	* specs/specl_spec.yaml: Add `--color=no` to specl invocations for
	saner output comparison checks.
	* specl/formatter/progress.lua: Color output when --color=no was
	not specified.
	* specl/formatter/report.lua: Likewise.

2013-03-17  Gary V. Vaughan  <gary@gnu.org>

	yaml: spun off into a separate project.
	Rather than ship and build our own yaml binding, spin it off to
	http://github.com/gvvaughan/lyaml and depend on a new luarock
	built from that.
	* yaml/yaml.mk: Remove.
	* Makefile.am: Adjust.
	* specl/specl.mk (SPECL_CPATH): Remove.
	(specl_install_edit, specl_inplace_edit): Adjust.
	(specl_specl_DEPS): Remove yaml/lyaml.la.
	* yaml/lua52compat.h, yaml/lyaml.c: Remove.
	* configure.ac (LT_INIT): Remove, along with supporting configury.
	(AC_CONFIG_HEADERS): Remove.
	* specl-rockspec.lua (external_dependencies.YAML): Remove.
	(dependencies): Add lyaml.

	rockspecs: remove debug line.
	* build-aux/mkrockspecs.lua: Remove left-over debug line.

	maint: add AUTHORS file.
	* AUTHORS: New file.

	formatters: strip 1st word from descriptions in formatters.
	* specl/specl.lua (run_contexts, run_examples): Don't strip 1st
	words, just pass full description tables to formatters.
	* specl/formatters/progress.lua (spec, example): Remove.
	* specl/formatters/tap.lua (header, spec, example): Remove.
	(map, strip1st): Strip 1st word from each element of a table.
	* specl/formatters/progress.lua (expectations): Rename `desc`
	parameter to `descriptions`.
	* specl/formatters/report.lua (indent, spec, example)
	(expectations): Likewise.
	* specl/formatters/tap.lua (expectations): Likewise.
	* specl/formatters/report.lua (spec, example): Strip 1st word
	from descriptions before printing.
	* specl/formatters/tap.lua (expectations): Likewise.
	* specl/formatters/progress.lua (nop): Null operation function.
	(M): Use nop as appropriate.
	* specl/formatters/tap.lua (nop, M): Likewise.

	specl: don't inject a Lua return keyword into a YAML spec.
	Assume specs are written in YAML, and only fallback to legacy
	Lua format if that fails.
	* specl/specl.in (slurp): Try yaml.load first, and loadstring
	with an injected return keyword only if yaml.load failed.
	Reported by François Perrad.

2013-03-16  Gary V. Vaughan  <gary@gnu.org>

	docs: document improved custom formatter API.
	* README.md (Custom Formatters): Document improved custom formatter
	API from François Perrad.

	formatters: support loading builtin formatters by basename.
	* specs/specl_spec.yaml: New specification for using a custom
	formatter by basename on the command line.
	* specl/specl.mk (specl_install_edit): Do as the documentation
	states, and allow loading of builtin formatters with a simple
	`--formatter=tap` command line option.

2013-03-16  Gary V. Vaughan  <gary@vaughan.pe>

	Merge pull request #3 from fperrad/tap
	TAP formatter

2013-03-16  Francois Perrad  <francois.perrad@gadz.org>

	add TAP formatter

	refactor formatter
	replace the string 'indent' by the array 'desc'

2013-03-15  Gary V. Vaughan  <gary@gnu.org>

	docs: be more relaxed about literal block markers.
	* README.md: Improve description of when `|' is necessary, and
	remove them from embedded examples.
	* specs/environment_spec.yaml, specs/matchers_spec.yaml,
	specs/specl_spec.yaml: Remove unnecessary `|' markers and use
	fewer new-lines.

	specs: specify behaviour of require calls in examples.
	* specs/environment_spec.yaml (when requiring a module): New
	specifications for use of require.
	* README.md (Environments versus `require`): Document that extra
	care is required when testing behaviour of required modules.

	environments: intercept load* calls in spec-files.
	Make sure that side-effects from executing a load* function
	variant in a spec-file example occur in the example environment.
	* specl/specl.in (clone): Remove.
	(sandbox): No need for a deep clone, because Specl is hygienic
	and puts everything in locals or the global specl table *after*
	the sandbox is created.
	* specl/specl.lua (run): Save references to the unwrapped core
	load* functions...
	(initenv): ...so they can be intercepted and wrapped specifically
	for each environment table.
	(run_examples): Call initenv() before running an example.
	* specs/environment_spec.yaml: A slew of examples to verify
	correct symbol access with load* variants.

2013-03-14  Gary V. Vaughan  <gary@gnu.org>

	specl: isolate specl modules into their own namespace.
	To avoid potential clashes with modules along the load-path of a
	specl client, refer to specl's own modules using the specl name-
	space.
	* specl/specl.in: Use `require "specl.std"`.  specl.lua is
	already in the specl namespace, so no need to prefix that one.
	* specl/specl.lua: Likewise for specl modules required here.
	* specl/std.lua: Likewise.
	* specl/specl.mk (SPECL_PATH): Support prefixed requires in the
	build tree.
	(specl_install_edit): Likewise, for the install tree.
	(nobase_dist_lua_DATA): Move specl/specl.lua from here...
	(dist_lua_DATA): ...to here, so that specl.lua is not installed
	into the specl subdirectory, and `require "specl"` works
	correctly.

2013-03-13  Gary V. Vaughan  <gary@gnu.org>

	specs: make sure Lua specs are compiled correctly.
	Using '$^' passes all dependencies as a single non-existent
	filename - garbage in, garbage out.
	* specs/specs.mk (.yaml.lua): Use '$<', which passes the correct
	yaml input for compilation to Lua.

	configury: move gmake-only SPECL_OPTS rules to GNUmakefile.
	* specs/specs.mk (SPECL_OPTS, specl_verbose_, specl_verbose_0)
	(specl_verbose_1): Move from here...
	* GNUmakefile: ..to here.

	specl: implement our own getopt with no dependencies.
	Lua stdlib getopt.lua ends up pulling in several more stdlib
	modules, which we don't want if specl is to be useful as the
	BDD tool for stdlib itself.  And after removing getopt, it turns
	out we still had a handful of hidden dependencies on stdlib
	ext module behaviours.
	* specl/std/getopt.lua: Remove.
	* specl/std.lua: Implement our own slurp, warn, process_args and
	process_files functions.
	* specl/specl.in (prog): Move from here...
	* specl/std.lua (prog): ...to here.
	* specl/specl.in: Simplify with the help of bespoke std.lua.
	* specl/specl.mk (nobase_dist_lua_DATA): Adjust.
	* build-aux/speclc.in: Use our mini std.lua.
	(reserved): Use a table with true valued keys. instead of a std
	set. Adjust all callers.
	* specl/matchers.lua (M): Inject public APIs as we go, rather
	than relying on stdlib table.merge to assemble the M table.
	* specl/spel.lua (M): Likewise.
	* specs/specl_spec.yaml (specl): Don't rely on stdlib nil concat
	behaviour.

2013-03-12  Gary V. Vaughan  <gary@gnu.org>

	specl: break dependency on std sets.
	Being intertwined with lua-stdlib makes it hard to use specl for
	the std specs.
	* specl/specl.lua (reserved): Use a table with true valued keys,
	instead of a std set.

2013-03-10  Gary V. Vaughan  <gary@gnu.org>

	environments: make runner environments more robust.
	Make sure each nested example block uses the same environment
	for before, definition and after calls, and passes the correctly
	initialised environment (after befores have run) to nested
	contexts.
	* specs/environment_spec.yaml: Uncomment previously failing
	examples.
	* specl/specl.in (clone): New function, copied from stdlib
	tree.lua.
	(sandbox): Before loading anything, make a deep copy of the
	pristine global environment to use as a sandbox for running
	examples.
	* specl/specl.lua (run): Add an env parameter, and pass that to
	run_contexts.
	(run_contexts): Remove dead code.
	(run_examples): Set up the sandbox for the current example group
	from the env parameter, and use it for each example before,
	definition and after block.
	Fix a bug that passed the wrong environment to recursive
	run_context calls.

2013-03-10  Reuben Thomas  <rrt@sc3d.org>

	configury: ensure lua includes match lua binary version.
	* configure.ac (AX_LUA_HEADERS): Invoke this macro.

	configury: AC_CONFIG_MACRO_DIRS is not released yet!
	* configure.ac (AC_CONFIG_MACRO_DIRS): Replace this...
	(AC_CONFIG_MACRO_DIR): ...with the buggy old API call.

	specl: factor away getopt.Option constructor.
	* specl/std/getopt.lua: Update to latest upstream.
	* specl/specl.in (prog.options): Use bare tables, per stdlib-34
	API.

2013-03-09  Gary V. Vaughan  <gary@gnu.org>

	docs: document current dir removal for custom formatters.
	* README.md (Command Line): Make note of the fact that loading
	custom formatters from the current directory requires a little
	extra path munging in the environment.

	specl: break dependency on lua-stdlib.
	* specl/matchers.lua: Do not require std.
	* specl/std/getopt.lua: A copy of stdlib-33 getopt.lua.
	* specl/specl.in: Require local copy of getopt instead of all of
	stdlib.
	* specl/specl.mk (nobase_dist_lua_DATA): Add specl/std/getopt.lua.
	* specl-rockspec.lua (dependencies): Remove std dependency.
	* TODO.yaml: Remove completed TODO item.

	TODO: more TODO items.
	* TODO.yaml: Put some new pressing TODO items at the top of the list.

	specl: support --formatter=FILE option.
	* specl/specl.in (prog): Add new formatter option.
	If formatter was passed, try to load the passed formatter.
	Pass the eventual formatter to specl.run.
	* specs/specl_spec.yaml (when using a custom formatter): Check
	that custom formatters are called correctly.
	* README.md (Custom Formatters): New section describing how to
	write a custom formatter.

	maint: support 'make check V=1' and 'SPECL_OPTS=-v make check'
	* specs/specs.mk (SPECL_OPTS): Unless set in the environment already,
	pass -v to specl according to whether or not V=1 was given to make.
	(check-local): Use it.

	formatters: factor out into separate modules.
	For Automake to install subdirectories correctly with a _DATA
	primary, the nobase_ prefix only works when the source and
	destination directories have the same name, so we have to rename
	'src' to 'specl' in order that the new specl/formatters/*.lua
	sources are installed correctly.
	* specl/specl.mk (dist_pkglua_DATA): Rename from this...
	(nobase_dist_lua_DATA): ...to this.
	* src/.gitignore, src/matchers.lua, src/specl.in, src/specl.lua,
	src/specl.mk, src/version.lua.in: Move from here...
	* specl/.gitignore, specl/matchers.lua, specl/specl.in,
	specl/specl.lua, specl/specl.mk, specl/version.lua.in: ...to here.
	* Makefile.am, configure.ac, specl/specl.mk, specs/specs.mk,
	specs/specl_spec.yaml: Adjust.
	* specl/specl.lua (M): Remove progress and report.
	(progress): Move from here...
	* specl/formatter/progress.lua: New file.  ...to here.
	* specl/specl.lua (report): Move from here...
	* specl/formatter/report.lua: New file.  ...to here.
	* specl/matchers.lua (expectations, stats): Initialise inside the
	module table.
	(expect): Update inside the module table.
	(M): Adjust.
	* specl/specl.in: Load and pass report formatter to specl.run()
	on demand.
	* specl/specl.mk (nobase_dist_lua_DATA): Add
	specl/formatter/progress.lua and specl/formatter/report.lua.
	(specl_specl_DEPS): Adjust.

	matchers: factor out into a separate module.
	Get rid of ugly global stats and expectations place holders, and
	factor matchers out into their own module.
	* src/specl.lua (objcmp, q, matchers, expect, expectations)
	(stats): Move from here...
	* src/matchers.lua (objcmp, q, M.matchers, M.expect, M.expectations)
	(M.stats): ...to here.
	* src/specl.lua (run_examples, run): Adjust.
	(M): Remove matchers.
	* src/specl.mk (dist_pkglua_DATA): Add src/matchers.lua.

	specl: set specl._VERSION correctly.
	* src/specl.lua (version): require version.lua.
	(M._VERSION): Set from version table.

	maint: ignore .DS_Store files.
	* .gitignore: Add .DS_Store.

	specl: ensure lyaml is built before running specl.
	Parallel make gets carried away without a full and complete
	dependency graph, so be sure to specify that specl doesn't work
	until lyaml.la is built.
	* src/specl.mk (src_specl_DEPS): Add yaml/lyaml.la.
	Reported by Reuben Thomas at https://github.com/gvvaughan/specl/issues/1.

2013-03-06  Gary V. Vaughan  <gary@gnu.org>

	maint: bump version to 3.
	* configure.ac (AC_INIT): Bump version number to 3.

	rockspecs: correct source.url and source.dir for github.
	* specl-rockspec.lua (source.url, source.dir): Remove '-1' suffix.

	maint: distribute README.md.
	* Makefile.am (EXTRA_DIST): Add README.md.

	rockspecs: build from github zip file.
	Rather than require git clone to checkout the source tree at
	rockspec install time, download the automatic github zip file.
	* specl-rockspec.lua (source): Extrapolate zip file location.
	(source.branch): Remove.
	* src/specl.mk (specl_install_edit): Use pkgluadir and libdir
	to match luarocks installation dirs.
	* yaml/yaml.mk (luaexec_LTLIBRARIES): Rename from this...
	(lib_LTLIBRARIES): ...to this, or luarocks doubles up the
	installation subdirectories to lua/5.x/lua/5.x!

	rockspecs: fix missing quote in build_command.
	* specl-rockspec.lua (build.build_command): Add missing quote.

	maint: don't distribute compiled Lua specs.
	* specs/specs.mk (SPECLC): Path to speclc program.
	(specl_SPECS): Remove Lua spec files.
	(specl_LUASPECS): List Lua spec files.
	(.yaml.lua): Make sure there is a specs dir in the build tree.
	(DISTCLEANFILES): Remove generated lua spec files.

	maint: distribute specl-rockspec.lua.
	* Makefile.am (EXTRA_DIST): Add specl-rockspec.lua.

	specl: always pass a (small) number to os.exit().
	os.exit in Lua 5.1 doesn't accept a boolean, so we pass it 1 if
	there are any failures, otherwise 0.
	* src/specl.lua (run): Return a small integer suitable for os.exit.
	* src/specl.in: Remove completed TODO.

	specl: use loadstring for Lua 5.1 compatibility.
	* src/specl.lua (loadstring): If loadstring is not defined, then
	this must be Lua 5.2, so define a loadstring work-a-like around
	load.
	* src/specl.in (slurp): Use loadstring, either from Lua 5.1 core,
	or the wrapper above.

2013-02-28  Gary V. Vaughan  <gary@gnu.org>

	maint: more TODO items.
	* TODO.yaml: New items.

	specl: support continued (undocumented!) specl-1 _spec.lua specs.
	* src/specl.in (slurp): First try to load as pure Lua, and if
	that fails, fall back to the YAML loader before erroring.
	* src/specl.lua (copile_specs, compile_examples, compile_example):
	Factor out compilation phase for YAML specs.
	* build-aux/speclc.in: New file. %_spec.yaml to %_spec.lua
	compiler (requires lyaml!).
	* specs/specs.mk (build-aux/speclc): Build it from speclc.in.
	(.yaml.lua): New rule to compile all yaml specs to lua to make
	sure Lua specs continue to be fully functional.
	(specl_SPECS): Add lua specs.
	* build-aux/.gitignore: Add speclc.
	* specs/environment_spec.yaml: Comment out a spec that fails
	when loaded as a lua spec, but passes as a yaml spec :-?
	* TODO.yaml: Remove done items.

	maint: keep track of TODO items in the repository.
	* TODO.yaml: New file. List pending TODO items.

	yaml: compile lua fragments on the fly instead of requiring `!lua`.
	* yaml/lyaml.c (load_scalar): Remove `!lua` precompiling support.
	* src/specl.lua (compile_example): New function to compile an
	example.
	(run_examples): Use it when encountering an uncompiled example.
	* specs/environment_spec.yaml, specs/matchers_spec.yaml,
	specs/specl_spec.yaml: Remove all `!lua` tags.
	* specs/specl_spec.yaml: New expectations for yaml specs on CLI
	standard input.
	* README.md: Update documentation. Particularly removing the
	notes about dealing with quirks of `!lua`.

2013-02-27  Gary V. Vaughan  <gary@gnu.org>

	specs: specify exit statuses
	* specs/specl_spec.yaml (describe specl): New examples to specify
	exit status of specl.
	(describe matchers): Move everything else from here...
	* specs/matchers_spec.yaml: ...to here.

	maint: GNUmakefile improvements.
	* GNUmakefile (unpack-distcheck-release): Be sure to rebuild rockspecs.
	(check-in-release): Commit all unpacked files on the release branch.

	rockspecs: allow arbitrary revision numbers.
	* build-aux/mkrockspecs.lua (qualified_version): New value.
	Extract this from the template, in case this is not a revision -1
	rockspec.

2013-02-26  Gary V. Vaughan  <gary@gnu.org>

	specl: return non-zero exit status when there are failing specs.
	* src/specl.lua (run): Return false when there are failing tests.

	maint: call woger properly at release time.
	* GNUmakefile (WOGER_ENV): Lua environment settings for extracting
	woger release variables.
	(WOGER_OUT): Lua call for feretting out the rockspec file
	settings used by woger.
	(release): Fully populate all the fields needed to make a correct
	woger release of Specl.

2013-02-25  Gary V. Vaughan  <gary@gnu.org>

	docs: update README to document new YAML syntax spec files.
	* README.md: Updated to document new YAML syntax spec files.

	configury: user-overridable search for install libyaml.
	* configure.ac (AC_CHECK_HEADERS): Look for yaml.h.
	(AC_SEARCH_LIBS): Abort with an error if libyaml is not found.
	* yaml/yaml.mk (yaml_lyaml_la_LIBADD): Remove hardcoded -lyaml.
	* specl-rockspec.lua (external_dependencies): Add yaml.
	(build.build_command): Pass through YAML options from rockspec
	make command.

	specs: factor out specification checking to a separate makefile.
	* src/specl.mk (Specs): Move this section from here...
	* specs/specs.mk: New file.  ...to here.
	* Makefile.am: Include specs/specs.mk.

	specs: a minimal environment sharing spec.
	* specs/environment_spec.yaml: New file. Ensure before, after,
	examples in the same scope share execution environments
	correctly.
	* src/specl.mk (specl_SPECS): New macro. List all spec files.
	(EXTRA_DIST): Adjust.
	(check-local): Add dependencies. Remove unnecessary environment
	setting. Pass a static list of spec files.

	specl: read yaml format spec files.
	* yaml/lua52compat.h, yaml/yaml.c: New files.  Sources for yaml
	module.
	* yaml/yaml.mk: New file. Build yaml module.
	* Makefile.am: Include it.
	(lib_LTLIBRARIES): Initialise.
	* configure.ac (AC_INIT): Bump version to 2.
	(AM_INIT_AUTOMAKE): Use subdir-objects.
	(LT_PREREQ, LT_INIT): Add libtool setup.
	(AC_PROG_CC, AC_HEADER_STDC): Add C compiler setup.
	(AC_CONFIG_HEADERS): Make config.h.
	* specs/specl_spec.lua: Move from here...
	* specs/specl_spec.yaml: ...to here. Reformat to yaml.
	* src/specl.mk (check-local): Move from here...
	* specs/specs.mk: New file. ...to here.
	* src/specl.lua (run_examples): YAML doesn't provide a pleasant
	way to format reserved descriptions (before, after) outside of
	the ordered list of actual examples, so we have to make a first
	pass over the list to extract them, and then be careful not to
	run them again in the main loop.

	specl: fix --version and --help formatting with stdlib-33 getopt.
	* src/specl.in (prog.version): Separate out copyright notice...
	(prog.copyright): ...to here.
	(prog.description): Latest stdlib getopt doesn't need double
	newline paragraph separators.
	* src/version.lua.in (M.COPYRIGHT_NOTICE): Rejustify slightly.
	Point to gnu licenses webpage rather than COPYING file, which
	might have been lost during installation!

	rockspecs: add dependency on latest stdlib rock.
	* specl-rockspec.lua (dependencies): Add stdlib.

	maint: don't check release tarball file in on release branch.
	* .gitignore: Ignore specl-*.tar.gz.
	* build-aux/.gitignore: Don't ignore manually imported
	gitlog-to-changelog.

	specl: update to cleaner stdlib-33 getopt formats.
	* src/version.lua.in (M.COPYRIGHT_NOTICE): Remove stray '\n'.
	* src/specl.in (prog): No longer needs to be a magic global.
	(options): Ditto.  Move from here...
	(prog.options): ...to here.
	(prog.purpose, prog.description): Reword to match rockspec.
	(prog.version): Add this for --version output.
	(prog.banner): Remove.

	maint: fix typos in GNUmakefile.
	* GNUmakefile (unpack-distcheck-release): Add missing \s, ` and '.
	(Makefile.in): Only one '-' in '-Wall'.

	configury: install correctly from './configure; make all install'.
	The latest 'm4/ax_lua.m4' sets up pkgluadir to point into Lua's
	module directory.
	* Makefile.am (install_edit, inplace_edit): Remove useless
	@pkgdatadir@ and @pkgdocdir@ substitutions.
	* src/specl.mk (specldatadir): Remove.
	(specl_install_edit, specl_inplace_edit): Use pkgluadir instead.
	(dist_specldata_DATA): Rename from this...
	(dist_pkglua_DATA): ...to this.
	* src/specl.in (package.path): Inject pkgluadir substitution.
	(PATH_DATA, PATH_DOCDIR): Remove.  Unused variables.

2013-02-24  Gary V. Vaughan  <gary@gnu.org>

	configury: add rockspec machinery.
	* specl-rockspec.lua: New file. Rockspec data.
	* build-aux/mkrockspecs.lua: New file. Reuben's templating
	rockspec building script.
	* GNUmakefile (luarocks-config.lua, rockspecs): Use it to build
	rockspecs.
	* src/specl.mk (EXTRA_DIST): Add build-aux/mkrockspecs.lua.

	specs: specl specs for specl.
	* src/specl.mk (check-local): Run specs with 'make check'.

	configury: use ./bootstrap && ./configure && make & sudo make install.
	* bootstrap: New file, from Libtool master HEAD.
	* bootstrap.conf: New file.  Configure bootstrap for Specl.
	* build-aux/gitlog-to-changelog: New file.  Required for
	'make dist'.
	* configure.ac: New file. Check Specl build prerequisites.
	* m4/ax_compare_version.m4, m4/ax_lua.m4, m4/ax_with_prog.m4:
	New files. Used by configure.ac.
	* src/version.lua.in: New file.  Configured constants.
	* specl: Moved from here...
	* specl.in: ...to here.  Rework to use src/version.lua.in.
	* Makefile.am: New file. Top-level non-recursive Makefile.
	* src/specl.mk: New file. Make fragment for specl directory.
	* .gitignore, build-aux/.gitignore, src/.gitignore: New files.

2013-02-22  Gary V. Vaughan  <gary@gnu.org>

	specl: set _G._SPEC to allow modules to expose additional APIs.
	When a non-public API is being specified, we need a way to inform
	the module to give the specification access to it.
	* specl (_G._SPEC): Set this to true.
	* src/specl.lua (M): Put _expect into the module table if it is set.
	(matchers.contain): Improve wording of error message.
	* specs/specl_spec.lua (describe contain matcher): Add spec for
	error message.
	* src/specl.lua (matchers.match): Improve wording of error message.
	* specs/specl_spec.lua (describe match matcher): Add spec for error
	message.

	maint: store the version number in the interface table.
	* src/specl.lua (M): Add _VERSION key.
	* specl (prog): Use it in the --version output.

	matchers: compare table key/value contents using contain matcher.
	* src/specl.lua: When checking expectations against a table,
	compare against each key and value in the table.
	* specs/specl_spec.lua: Remove fake specs.
	Specify behaviour of contain matcher.
	* specl: Remove obsolete TODO entries.
	* README.md: Document it.

	formatters: Be consistent when reporting met expectations.
	* src/specl.lua (report): Add "Met" prefix to output.
	(progress): Write "expectations met", not "examples worked".

	matchers: make the contain and match matchers useable.
	Fix some silly bugs preventing these matchers from working
	properly.
	* src/specl.lua (matchers.match): Use VALUE consistently for
	parameter name.
	Set the return condition properly.
	(matchers.contain): Likewise.
	string.match patterns are not anchored, so no need to bookend
	with .*.

2013-02-21  Gary V. Vaughan  <gary@gnu.org>

	docs: initial draft documentation in README.
	* README.md: Rewritten with initial draft documentation.

2013-02-20  Gary V. Vaughan  <gary@gnu.org>

	matchers: make the error matcher useable.
	* src/specl.lua (matchers.error): Take arguments in reverse, so
	that 'should_error' is called like pcall, and 'expect' is a
	substring to match against any resulting error message.
	(report.expectation): Since error messages can be very long,
	reindent multiple lines as best as possible.

	matchers: work properly with _not_ expectations.
	* src/specl.lua (q): New function to quote strings in failure
	messages nicely.
	(matchers): Always return the failure status message, even if
	the matcher succeeded, since it may be inverted later with a 'not'.

	formatters: nicer fail message for report formatter.
	* src/specl.lua (report.expectations): Reformat slightly for
	better english, and to stand out better.

	formatter: group and format expectations every example.
	Fix a bug that counts a FAILed expectation incorrectly. Restart
	the counter for every example, not just at the start of the
	entire group.
	* src/specl.lua (run_examples): Don't save up all the expectations
	from the entire group before displaying, format them after every
	example completes.

	environments: fix the environment sharing TODO.
	* src/specl.lua (run_examples): Pass the correct block environment
	into the block, so that befores share settings with examples and
	afters correctly, and then reset when they go out of scope.
	* specl: Remove TODO.

	specl: implement an alternate format, selected by -v option.
	* specl (options): Accept -v or -verbose.
	* src/specl.lua (run): Add new format parameter.  Assuming what
	is passed conforms to the API, that formatter will be called as
	the examples are executed.
	(formatter): Move from here...
	(report): ...to here.
	(progress): New formatter that just prints dots as examples pass,
	or F as they fail.
	(formatter): Default formatter is the new progress formatter.
	(M): Put the two formatters in the public interface.
	* specl: Request the old report formatter in verbose mode.

	maint: refill copyright notices.

	specl: write a command line interface.
	* src/specl.lua: Don't clobber the global namespace with anything.
	(M): Record and return APIs.
	(Fake specs): Move from here...
	* specs/specl_spec.lua: New file. ...to here.
	* specl: New file. Load the specl module, and use it to process
	each spec file passed on the command line.
	* README.md: Update.

	maint: fix mistakes in pasted copyright header.
	* src/specl.lua: Actually, not part of GNU Zile, and didn't exist
	at all for the first 4 years of the 2009-2013 copyright range.

2013-02-19  Gary V. Vaughan  <gary@gnu.org>

	maint: add README.
	* README.md: New file. Barely useful at the moment...

	specl: initial import.
