describe specl:
- before: |
    function exit_status (cmd)
      local output, status = "", nil
      local f = io.popen (cmd .. "; echo $?")
      while true do
        local line = f:read ()
        if line == nil then break end
        output = output .. "\n" .. status
        status = line
      end
      f:close ()
      return tonumber (status)
    end

    function capture_output (cmd)
      local output = ""
      local f = io.popen (cmd)
      while true do
        local line = f:read ()
        if line == nil then break end
        output = output .. "\n" .. line
      end
      f:close ()
      return output
    end

- describe command line interface:
  - before: |
      yaml = "describe x:\n- it passes: expect (true).should_be (true)"

  - it reads a spec from standard input with no arguments: |
      output = capture_output ("printf '" .. yaml .. "'|src/specl")
      expect (output).should_contain ("All expectations met, in ")

  - "it reads a spec from standard input for '-' filename argument": |
      output = capture_output ("printf '" .. yaml .. "'|src/specl -")
      expect (output).should_contain ("All expectations met, in ")

  - it exits with zero status when there are no failing examples: |
      expect (exit_status ("printf '" .. yaml .. "'|src/specl")).should_be (0)

  - "it exits with non-zero status when there are failing examples": |
      yaml = "describe x:\n- it fails: expect (1).should_be (0)"
      expect (exit_status ("printf '" .. yaml .."'|src/specl")).should_not_be (0)
